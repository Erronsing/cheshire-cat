if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (goog.isInModuleLoader_()) {
    throw Error("goog.provide can not be used within a goog.module.");
  }
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
goog.forwardDeclare("Document");
goog.forwardDeclare("HTMLScriptElement");
goog.forwardDeclare("XMLHttpRequest");
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_loadFlags) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    if (!opt_loadFlags || typeof opt_loadFlags === "boolean") {
      opt_loadFlags = opt_loadFlags ? {"module":"goog"} : {};
    }
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.loadFlags[path] = opt_loadFlags;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.writeScripts_(path);
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
goog.define("goog.TRANSPILE", "detect");
goog.define("goog.TRANSPILER", "transpile.js");
if (goog.DEPENDENCIES_ENABLED) {
  goog.dependencies_ = {loadFlags:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return doc != null && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
  goog.importProcessedScript_ = function(src, isModule, needsTranspile) {
    var bootstrap = 'goog.retrieveAndExec_("' + src + '", ' + isModule + ", " + needsTranspile + ");";
    goog.importScript_("", bootstrap);
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    var loadFlags = path && goog.dependencies_.loadFlags[path] || {};
    if (path && (loadFlags["module"] == "goog" || goog.needsTranspile_(loadFlags["lang"]))) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModuleFromUrl = function(url) {
    goog.retrieveAndExec_(url, true, false);
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareLegacyNamespace:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function() {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = (doc.createElement("script"));
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      if (opt_sourceText === undefined) {
        if (!goog.IS_OLD_IE_) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.needsTranspile_ = function(lang) {
    if (goog.TRANSPILE == "always") {
      return true;
    } else {
      if (goog.TRANSPILE == "never") {
        return false;
      } else {
        if (!goog.transpiledLanguages_) {
          goog.transpiledLanguages_ = {"es5":true, "es6":true, "es6-impl":true};
          try {
            goog.transpiledLanguages_["es5"] = eval("[1,].length!\x3d1");
            var es6implTest = "let a\x3d{};const X\x3dclass{constructor(){}x(z){return new Map([" + "...arguments]).get(z[0])\x3d\x3d3}};return new X().x([a,3])";
            var es6fullTest = "class X{constructor(){if(new.target!\x3dString)throw 1;this.x\x3d42}}" + "let q\x3dReflect.construct(X,[],String);if(q.x!\x3d42||!(q instanceof " + "String))throw 1;for(const a of[2,3]){if(a\x3d\x3d2)continue;function " + "f(z\x3d{a}){let a\x3d0;return z.a}{function f(){return 0;}}return f()" + "\x3d\x3d3}";
            if (eval('(()\x3d\x3e{"use strict";' + es6implTest + "})()")) {
              goog.transpiledLanguages_["es6-impl"] = false;
            }
            if (eval('(()\x3d\x3e{"use strict";' + es6fullTest + "})()")) {
              goog.transpiledLanguages_["es6"] = false;
            }
          } catch (err) {
          }
        }
      }
    }
    return !!goog.transpiledLanguages_[lang];
  };
  goog.transpiledLanguages_ = null;
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function(pathToLoad) {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    visitNode(pathToLoad);
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        var loadFlags = deps.loadFlags[path] || {};
        var needsTranspile = goog.needsTranspile_(loadFlags["lang"]);
        if (loadFlags["module"] == "goog" || needsTranspile) {
          goog.importProcessedScript_(goog.basePath + path, loadFlags["module"] == "goog", needsTranspile);
        } else {
          goog.importScript_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    try {
      var xhr = new goog.global["XMLHttpRequest"];
      xhr.open("get", src, false);
      xhr.send();
      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;
    } catch (err) {
      return null;
    }
  }
};
goog.retrieveAndExec_ = function(src, isModule, needsTranspile) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText == null) {
      throw new Error('Load of "' + src + '" failed');
    }
    if (needsTranspile) {
      scriptText = goog.transpile_.call(goog.global, scriptText, src);
    }
    if (isModule) {
      scriptText = goog.wrapModule_(src, scriptText);
    } else {
      scriptText += "\n//# sourceURL\x3d" + src;
    }
    var isOldIE = goog.IS_OLD_IE_;
    if (isOldIE) {
      goog.dependencies_.deferred[originalPath] = scriptText;
      goog.queuedModules_.push(originalPath);
    } else {
      importScript(src, scriptText);
    }
  }
};
goog.transpile_ = function(code, path) {
  var jscomp = goog.global["$jscomp"];
  if (!jscomp) {
    goog.global["$jscomp"] = jscomp = {};
  }
  var transpile = jscomp.transpile;
  if (!transpile) {
    var transpilerPath = goog.basePath + goog.TRANSPILER;
    var transpilerCode = goog.loadFileSync_(transpilerPath);
    if (transpilerCode) {
      eval(transpilerCode + "\n//# sourceURL\x3d" + transpilerPath);
      jscomp = goog.global["$jscomp"];
      transpile = jscomp.transpile;
    }
  }
  if (!transpile) {
    var suffix = " requires transpilation but no transpiler was found.";
    transpile = jscomp.transpile = function(code, path) {
      goog.logToConsole_(path + suffix);
      return code;
    };
  }
  return transpile(code, path);
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if (obj !== null && "removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1e9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _evalTest_ \x3d 1;");
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = (doc.createElement("SCRIPT"));
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  if (goog.isInModuleLoader_()) {
    throw Error("goog.scope is not supported within a goog.module.");
  }
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {
    return ctr;
  }
  var superclassSealable = !goog.defineClass.isUnsealable_(superClass);
  var wrappedCtr = function() {
    var instance = ctr.apply(this, arguments) || this;
    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
    if (this.constructor === wrappedCtr && superclassSealable && Object.seal instanceof Function) {
      Object.seal(instance);
    }
    return instance;
  };
  return wrappedCtr;
};
goog.defineClass.isUnsealable_ = function(ctr) {
  return ctr && ctr.prototype && ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:" "};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "" && ch <= "�";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.intAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\", "\x3c":"\x3c"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  var sb = ['"'];
  for (var i = 0;i < s.length;i++) {
    var ch = s.charAt(i);
    var cc = ch.charCodeAt(0);
    sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
  }
  sb.push('"');
  return sb.join("");
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = String.prototype.repeat ? function(string, length) {
  return string.repeat(length);
} : function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i) >>> 0;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.lastComponent = function(str, separators) {
  if (!separators) {
    return str;
  } else {
    if (typeof separators == "string") {
      separators = [separators];
    }
  }
  var lastSeparatorIndex = -1;
  for (var i = 0;i < separators.length;i++) {
    if (separators[i] == "") {
      continue;
    }
    var currentSeparatorIndex = str.lastIndexOf(separators[i]);
    if (currentSeparatorIndex > lastSeparatorIndex) {
      lastSeparatorIndex = currentSeparatorIndex;
    }
  }
  if (lastSeparatorIndex == -1) {
    return str;
  }
  return str.slice(lastSeparatorIndex + 1);
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = Number(a[i] != b[j]);
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  Array.prototype.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call((opt_obj), arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call((opt_obj), arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call((opt_obj), val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call((opt_obj), arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return Array.prototype.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call((opt_obj), rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.asserts.assert(f != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return Array.prototype.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call((opt_obj), rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call((opt_obj), arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call((opt_obj), element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeLast = function(arr, obj) {
  var i = goog.array.lastIndexOf(arr, obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call((opt_obj), val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return Array.prototype.concat.apply(Array.prototype, arguments);
};
goog.array.join = function(var_args) {
  return Array.prototype.concat.apply(Array.prototype, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return Array.prototype.slice.call(arr, start);
  } else {
    return Array.prototype.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = (compareFn)(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  var compArr = new Array(arr.length);
  for (var i = 0;i < arr.length;i++) {
    compArr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(compArr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = compArr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call((opt_obj), value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call((opt_obj), element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      Array.prototype.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        Array.prototype.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = Array.prototype.splice.call(arr, fromIndex, 1);
  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  var minLen = arguments[0].length;
  for (var i = 1;i < arguments.length;i++) {
    if (arguments[i].length < minLen) {
      minLen = arguments[i].length;
    }
  }
  for (var i = 0;i < minLen;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      value.push(arguments[j][i]);
    }
    result.push(value);
  }
  return result;
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.array.concatMap = function(arr, f, opt_obj) {
  return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj));
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.object");
goog.object.is = function(v, v2) {
  if (v === v2) {
    return v !== 0 || 1 / v === 1 / (v2);
  }
  return v !== v && v2 !== v2;
};
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call((opt_obj), obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call((opt_obj), obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call((opt_obj), obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call((opt_obj), obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call((opt_obj), obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return obj !== null && key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call((opt_this), obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in (obj)) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (obj !== null && key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (obj !== null && key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in (obj) ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (goog.isFunction(obj.clone)) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdge_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchEdge_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera"]);
  }
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(["Edge"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_EDGE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.define("goog.userAgent.ASSUME_IPOD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();
goog.userAgent.determineVersion_ = function() {
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode != null && docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
  if (goog.userAgent.OPERA) {
    return /(?:Version)[ \/]?(\S+)/.exec(userAgent);
  }
  return undefined;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return Number(goog.userAgent.DOCUMENT_MODE) >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet("area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr");
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "' of type " + goog.typeOf(safeStyle));
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], rgb() and " + "rgba(), got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
          goog.asserts.fail("String value requires balanced quotes, got: " + value);
          value = goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0;i < value.length;i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_RE_ = /^([-,."'%_!# a-zA-Z0-9]+|(?:rgb|hsl)a?\([0-9.%, ]+\))$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "' of type " + goog.typeOf(safeStyleSheet));
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL)) {
    return (goog.global.URL);
  } else {
    if (goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL)) {
      return (goog.global.webkitURL);
    } else {
      if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"‪", RLE:"‫", PDF:"‬", LRM:"‎", RLM:"‏"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿" + "‎Ⰰ-﬜︀-﹯﻽-￿";
goog.i18n.bidi.rtlChars_ = "֑-ۯۺ-߿‏יִ-﷿ﹰ-ﻼ";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1״").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1׳");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = 0.40;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      element.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      element.dir = "rtl";
      break;
    default:
      element.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "' of type " + goog.typeOf(safeUrl));
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SafeUrl.fromTelUrl = function(telUrl) {
  if (!goog.string.caseInsensitiveStartsWith(telUrl, "tel:")) {
    telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(telUrl);
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.html.SafeUrl.ABOUT_BLANK = goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function() {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "' of type " + goog.typeOf(trustedResourceUrl));
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.fromConstants = function(parts) {
  var unwrapped = "";
  for (var i = 0;i < parts.length;i++) {
    unwrapped += goog.string.Const.unwrap(parts[i]);
  }
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl;
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;
  return trustedResourceUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "' of type " + goog.typeOf(safeHtml));
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.APPLET, goog.dom.TagName.BASE, goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.MATH, goog.dom.TagName.META, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.SVG, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  goog.html.SafeHtml.verifyTagName(tagName);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(tagName, opt_attributes, opt_content);
};
goog.html.SafeHtml.verifyTagName = function(tagName) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  if (opt_src) {
    goog.html.TrustedResourceUrl.unwrap(opt_src);
  }
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc && goog.html.SafeHtml.unwrap(opt_srcdoc);
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createSandboxIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.canUseSandboxIframe()) {
    throw new Error("The browser does not support sandboxed iframes.");
  }
  var fixedAttributes = {};
  if (opt_src) {
    fixedAttributes["src"] = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(opt_src));
  } else {
    fixedAttributes["src"] = null;
  }
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  fixedAttributes["sandbox"] = "";
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, {}, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.canUseSandboxIframe = function() {
  return goog.global["HTMLIFrameElement"] && "sandbox" in goog.global["HTMLIFrameElement"].prototype;
};
goog.html.SafeHtml.createScriptSrc = function(src, opt_attributes) {
  goog.html.TrustedResourceUrl.unwrap(src);
  var fixedAttributes = {"src":src};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", attributes);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0;i < styleSheet.length;i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.createMetaRefresh = function(url, opt_secs) {
  var unwrappedUrl = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(url));
  if (goog.labs.userAgent.browser.isIE() || goog.labs.userAgent.browser.isEdge()) {
    if (goog.string.contains(unwrappedUrl, ";")) {
      unwrappedUrl = "'" + unwrappedUrl.replace(/'/g, "%27") + "'";
    }
  }
  var attributes = {"http-equiv":"refresh", "content":(opt_secs || 0) + "; url\x3d" + unwrappedUrl};
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta", attributes);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      value = goog.html.SafeHtml.getStyleValue_(value);
    } else {
      if (/^on/i.test(name)) {
        throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (goog.isString(value)) {
                value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
              } else {
                throw Error('Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl, goog.string.Const, or string,' + ' value "' + value + '" given.');
              }
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  result += goog.html.SafeHtml.stringifyAttributes(tagName, opt_attributes);
  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.stringifyAttributes = function(tagName, opt_attributes) {
  var result = "";
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  return result;
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.BR = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3cbr\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.provide("goog.dom.safe.InsertAdjacentHtmlPosition");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:"afterbegin", AFTEREND:"afterend", BEFOREBEGIN:"beforebegin", BEFOREEND:"beforeend"};
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setImageSrc = function(imageElement, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.provide("goog.html.SafeScript");
goog.require("goog.asserts");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeScript = function() {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(script) {
  var scriptString = goog.string.Const.unwrap(script);
  if (scriptString.length === 0) {
    return goog.html.SafeScript.EMPTY;
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
  };
}
goog.html.SafeScript.unwrap = function(safeScript) {
  if (safeScript instanceof goog.html.SafeScript && safeScript.constructor === goog.html.SafeScript && safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeScript, got '" + safeScript + "' of type " + goog.typeOf(safeScript));
    return "type_error:SafeScript";
  }
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(script) {
  return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(script);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(script) {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = script;
  return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.html.uncheckedconversions");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(justification, html, opt_dir) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(justification, script) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmpty(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(justification, style) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(justification, styleSheet) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 0.000001);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return (goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num ? 1 : 0);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2e-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2e-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += Number(tx);
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    if (goog.dom.canUseQuerySelector_(parent)) {
      retVal = parent.querySelector("." + className);
    } else {
      retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
    }
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return (arrayLike);
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return (arrayLike);
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "nonce":"nonce", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeightForWindow = function(win) {
  return goog.dom.getDocumentHeight_(win);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = (doc.documentElement);
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0;i < rows;i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0;j < columns;j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.constHtmlToNode = function(var_args) {
  var stringArray = goog.array.map(arguments, goog.string.Const.unwrap);
  var safeHtml = goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Constant HTML string, that gets turned into a " + "Node later, so it will be automatically balanced."), stringArray.join(""));
  return goog.dom.safeHtmlToNode(safeHtml);
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.BR, html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch((node).tagName) {
    case goog.dom.TagName.APPLET:
    case goog.dom.TagName.AREA:
    case goog.dom.TagName.BASE:
    case goog.dom.TagName.BR:
    case goog.dom.TagName.COL:
    case goog.dom.TagName.COMMAND:
    case goog.dom.TagName.EMBED:
    case goog.dom.TagName.FRAME:
    case goog.dom.TagName.HR:
    case goog.dom.TagName.IMG:
    case goog.dom.TagName.INPUT:
    case goog.dom.TagName.IFRAME:
    case goog.dom.TagName.ISINDEX:
    case goog.dom.TagName.KEYGEN:
    case goog.dom.TagName.LINK:
    case goog.dom.TagName.NOFRAMES:
    case goog.dom.TagName.NOSCRIPT:
    case goog.dom.TagName.META:
    case goog.dom.TagName.OBJECT:
    case goog.dom.TagName.PARAM:
    case goog.dom.TagName.SCRIPT:
    case goog.dom.TagName.SOURCE:
    case goog.dom.TagName.STYLE:
    case goog.dom.TagName.TRACK:
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return (element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return (goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (goog.isDef(node.firstElementChild)) {
    return (node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (goog.isDef(node.lastElementChild)) {
    return (node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (goog.isDef(node.nextElementSibling)) {
    return (node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (goog.isDef(node.previousElementSibling)) {
    return (node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return (node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (!parent || !descendant) {
    return false;
  }
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  return frame.contentDocument || (frame).contentWindow.document;
};
goog.dom.getFrameContentWindow = function(frame) {
  try {
    return frame.contentWindow || (frame.contentDocument ? goog.dom.getWindow(frame.contentDocument) : null);
  } catch (e) {
  }
  return null;
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  goog.asserts.assert(element !== null, "goog.dom.getOuterHtml expects a non-null value for element");
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_((element)) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = (element).tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect;
  if (!goog.isFunction(element["getBoundingClientRect"]) || goog.userAgent.IE && element.parentElement == null) {
    rect = {"height":element.offsetHeight, "width":element.offsetWidth};
  } else {
    rect = element.getBoundingClientRect();
  }
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && node !== null && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return (goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var steps = 0;
  while (element && (opt_maxSearchSteps == null || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (goog.isDef(win.devicePixelRatio)) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.userAgent.product");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.userAgent");
goog.define("goog.userAgent.product.ASSUME_FIREFOX", false);
goog.define("goog.userAgent.product.ASSUME_IPHONE", false);
goog.define("goog.userAgent.product.ASSUME_IPAD", false);
goog.define("goog.userAgent.product.ASSUME_ANDROID", false);
goog.define("goog.userAgent.product.ASSUME_CHROME", false);
goog.define("goog.userAgent.product.ASSUME_SAFARI", false);
goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
goog.userAgent.product.OPERA = goog.userAgent.OPERA;
goog.userAgent.product.IE = goog.userAgent.IE;
goog.userAgent.product.EDGE = goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
goog.userAgent.product.isIphoneOrIpod_ = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
};
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_ = function() {
  return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
};
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
goog.provide("goog.math.Integer");
goog.math.Integer = function(bits, sign) {
  this.bits_ = [];
  this.sign_ = sign;
  var top = true;
  for (var i = bits.length - 1;i >= 0;i--) {
    var val = bits[i] | 0;
    if (!top || val != sign) {
      this.bits_[i] = val;
      top = false;
    }
  }
};
goog.math.Integer.IntCache_ = {};
goog.math.Integer.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Integer.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Integer([value | 0], value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Integer.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Integer.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Integer.ZERO;
  } else {
    if (value < 0) {
      return goog.math.Integer.fromNumber(-value).negate();
    } else {
      var bits = [];
      var pow = 1;
      for (var i = 0;value >= pow;i++) {
        bits[i] = value / pow | 0;
        pow *= goog.math.Integer.TWO_PWR_32_DBL_;
      }
      return new goog.math.Integer(bits, 0);
    }
  }
};
goog.math.Integer.fromBits = function(bits) {
  var high = bits[bits.length - 1];
  return new goog.math.Integer(bits, high & 1 << 31 ? -1 : 0);
};
goog.math.Integer.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Integer.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character');
    }
  }
  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Integer.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Integer.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Integer.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Integer.fromNumber(value));
    }
  }
  return result;
};
goog.math.Integer.TWO_PWR_32_DBL_ = (1 << 16) * (1 << 16);
goog.math.Integer.ZERO = goog.math.Integer.fromInt(0);
goog.math.Integer.ONE = goog.math.Integer.fromInt(1);
goog.math.Integer.TWO_PWR_24_ = goog.math.Integer.fromInt(1 << 24);
goog.math.Integer.prototype.toInt = function() {
  return this.bits_.length > 0 ? this.bits_[0] : this.sign_;
};
goog.math.Integer.prototype.toNumber = function() {
  if (this.isNegative()) {
    return -this.negate().toNumber();
  } else {
    var val = 0;
    var pow = 1;
    for (var i = 0;i < this.bits_.length;i++) {
      val += this.getBitsUnsigned(i) * pow;
      pow *= goog.math.Integer.TWO_PWR_32_DBL_;
    }
    return val;
  }
};
goog.math.Integer.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  } else {
    if (this.isNegative()) {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.divide(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Integer.prototype.getBits = function(index) {
  if (index < 0) {
    return 0;
  } else {
    if (index < this.bits_.length) {
      return this.bits_[index];
    } else {
      return this.sign_;
    }
  }
};
goog.math.Integer.prototype.getBitsUnsigned = function(index) {
  var val = this.getBits(index);
  return val >= 0 ? val : goog.math.Integer.TWO_PWR_32_DBL_ + val;
};
goog.math.Integer.prototype.getSign = function() {
  return this.sign_;
};
goog.math.Integer.prototype.isZero = function() {
  if (this.sign_ != 0) {
    return false;
  }
  for (var i = 0;i < this.bits_.length;i++) {
    if (this.bits_[i] != 0) {
      return false;
    }
  }
  return true;
};
goog.math.Integer.prototype.isNegative = function() {
  return this.sign_ == -1;
};
goog.math.Integer.prototype.isOdd = function() {
  return this.bits_.length == 0 && this.sign_ == -1 || this.bits_.length > 0 && (this.bits_[0] & 1) != 0;
};
goog.math.Integer.prototype.equals = function(other) {
  if (this.sign_ != other.sign_) {
    return false;
  }
  var len = Math.max(this.bits_.length, other.bits_.length);
  for (var i = 0;i < len;i++) {
    if (this.getBits(i) != other.getBits(i)) {
      return false;
    }
  }
  return true;
};
goog.math.Integer.prototype.notEquals = function(other) {
  return !this.equals(other);
};
goog.math.Integer.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Integer.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Integer.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Integer.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Integer.prototype.compare = function(other) {
  var diff = this.subtract(other);
  if (diff.isNegative()) {
    return -1;
  } else {
    if (diff.isZero()) {
      return 0;
    } else {
      return +1;
    }
  }
};
goog.math.Integer.prototype.shorten = function(numBits) {
  var arr_index = numBits - 1 >> 5;
  var bit_index = (numBits - 1) % 32;
  var bits = [];
  for (var i = 0;i < arr_index;i++) {
    bits[i] = this.getBits(i);
  }
  var sigBits = bit_index == 31 ? 4294967295 : (1 << bit_index + 1) - 1;
  var val = this.getBits(arr_index) & sigBits;
  if (val & 1 << bit_index) {
    val |= 4294967295 - sigBits;
    bits[arr_index] = val;
    return new goog.math.Integer(bits, -1);
  } else {
    bits[arr_index] = val;
    return new goog.math.Integer(bits, 0);
  }
};
goog.math.Integer.prototype.negate = function() {
  return this.not().add(goog.math.Integer.ONE);
};
goog.math.Integer.prototype.add = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  var carry = 0;
  for (var i = 0;i <= len;i++) {
    var a1 = this.getBits(i) >>> 16;
    var a0 = this.getBits(i) & 65535;
    var b1 = other.getBits(i) >>> 16;
    var b0 = other.getBits(i) & 65535;
    var c0 = carry + a0 + b0;
    var c1 = (c0 >>> 16) + a1 + b1;
    carry = c1 >>> 16;
    c0 &= 65535;
    c1 &= 65535;
    arr[i] = c1 << 16 | c0;
  }
  return goog.math.Integer.fromBits(arr);
};
goog.math.Integer.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Integer.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Integer.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Integer.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Integer.TWO_PWR_24_) && other.lessThan(goog.math.Integer.TWO_PWR_24_)) {
    return goog.math.Integer.fromNumber(this.toNumber() * other.toNumber());
  }
  var len = this.bits_.length + other.bits_.length;
  var arr = [];
  for (var i = 0;i < 2 * len;i++) {
    arr[i] = 0;
  }
  for (var i = 0;i < this.bits_.length;i++) {
    for (var j = 0;j < other.bits_.length;j++) {
      var a1 = this.getBits(i) >>> 16;
      var a0 = this.getBits(i) & 65535;
      var b1 = other.getBits(j) >>> 16;
      var b0 = other.getBits(j) & 65535;
      arr[2 * i + 2 * j] += a0 * b0;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j);
      arr[2 * i + 2 * j + 1] += a1 * b0;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
      arr[2 * i + 2 * j + 1] += a0 * b1;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
      arr[2 * i + 2 * j + 2] += a1 * b1;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 2);
    }
  }
  for (var i = 0;i < len;i++) {
    arr[i] = arr[2 * i + 1] << 16 | arr[2 * i];
  }
  for (var i = len;i < 2 * len;i++) {
    arr[i] = 0;
  }
  return new goog.math.Integer(arr, 0);
};
goog.math.Integer.carry16_ = function(bits, index) {
  while ((bits[index] & 65535) != bits[index]) {
    bits[index + 1] += bits[index] >>> 16;
    bits[index] &= 65535;
  }
};
goog.math.Integer.prototype.slowDivide_ = function(other) {
  if (this.isNegative() || other.isNegative()) {
    throw Error("slowDivide_ only works with positive integers.");
  }
  var twoPower = goog.math.Integer.ONE;
  var multiple = other;
  while (multiple.lessThanOrEqual(this)) {
    twoPower = twoPower.shiftLeft(1);
    multiple = multiple.shiftLeft(1);
  }
  var res = twoPower.shiftRight(1);
  var total = multiple.shiftRight(1);
  var total2;
  multiple = multiple.shiftRight(2);
  twoPower = twoPower.shiftRight(2);
  while (!multiple.isZero()) {
    total2 = total.add(multiple);
    if (total2.lessThanOrEqual(this)) {
      res = res.add(twoPower);
      total = total2;
    }
    multiple = multiple.shiftRight(1);
    twoPower = twoPower.shiftRight(1);
  }
  return res;
};
goog.math.Integer.prototype.divide = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Integer.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().divide(other.negate());
    } else {
      return this.negate().divide(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.divide(other.negate()).negate();
    }
  }
  if (this.bits_.length > 30) {
    return this.slowDivide_(other);
  }
  var res = goog.math.Integer.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Integer.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Integer.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Integer.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Integer.prototype.modulo = function(other) {
  return this.subtract(this.divide(other).multiply(other));
};
goog.math.Integer.prototype.not = function() {
  var len = this.bits_.length;
  var arr = [];
  for (var i = 0;i < len;i++) {
    arr[i] = ~this.bits_[i];
  }
  return new goog.math.Integer(arr, ~this.sign_);
};
goog.math.Integer.prototype.and = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0;i < len;i++) {
    arr[i] = this.getBits(i) & other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ & other.sign_);
};
goog.math.Integer.prototype.or = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0;i < len;i++) {
    arr[i] = this.getBits(i) | other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ | other.sign_);
};
goog.math.Integer.prototype.xor = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0;i < len;i++) {
    arr[i] = this.getBits(i) ^ other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ ^ other.sign_);
};
goog.math.Integer.prototype.shiftLeft = function(numBits) {
  var arr_delta = numBits >> 5;
  var bit_delta = numBits % 32;
  var len = this.bits_.length + arr_delta + (bit_delta > 0 ? 1 : 0);
  var arr = [];
  for (var i = 0;i < len;i++) {
    if (bit_delta > 0) {
      arr[i] = this.getBits(i - arr_delta) << bit_delta | this.getBits(i - arr_delta - 1) >>> 32 - bit_delta;
    } else {
      arr[i] = this.getBits(i - arr_delta);
    }
  }
  return new goog.math.Integer(arr, this.sign_);
};
goog.math.Integer.prototype.shiftRight = function(numBits) {
  var arr_delta = numBits >> 5;
  var bit_delta = numBits % 32;
  var len = this.bits_.length - arr_delta;
  var arr = [];
  for (var i = 0;i < len;i++) {
    if (bit_delta > 0) {
      arr[i] = this.getBits(i + arr_delta) >>> bit_delta | this.getBits(i + arr_delta + 1) << 32 - bit_delta;
    } else {
      arr[i] = this.getBits(i + arr_delta);
    }
  }
  return new goog.math.Integer(arr, this.sign_);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += String(a1);
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.objectProperty = function(prop, object) {
  return prop;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.reflect.cache = function(cacheObj, key, valueFn, opt_keyFn) {
  var storedKey = opt_keyFn ? opt_keyFn(key) : key;
  if (Object.prototype.hasOwnProperty.call(cacheObj, storedKey)) {
    return cacheObj[storedKey];
  }
  return cacheObj[storedKey] = valueFn(key);
};
goog.provide("goog.math.Long");
goog.require("goog.reflect");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.valueCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {
      return new goog.math.Long(val | 0, val < 0 ? -1 : 0);
    });
  } else {
    return new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  }
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value)) {
    return goog.math.Long.getZero();
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.getMinValue();
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.getMaxValue();
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.getZero();
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.getZero = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.ZERO, function() {
    return goog.math.Long.fromInt(0);
  });
};
goog.math.Long.getOne = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.ONE, function() {
    return goog.math.Long.fromInt(1);
  });
};
goog.math.Long.getNegOne = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.NEG_ONE, function() {
    return goog.math.Long.fromInt(-1);
  });
};
goog.math.Long.getMaxValue = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MAX_VALUE, function() {
    return goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
  });
};
goog.math.Long.getMinValue = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MIN_VALUE, function() {
    return goog.math.Long.fromBits(0, 2147483648 | 0);
  });
};
goog.math.Long.getTwoPwr24 = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.TWO_PWR_24, function() {
    return goog.math.Long.fromInt(1 << 24);
  });
};
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.getMinValue())) {
    return goog.math.Long.getMinValue();
  } else {
    return this.not().add(goog.math.Long.getOne());
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.getZero();
  } else {
    if (other.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    return other.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return this.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.getTwoPwr24()) && other.lessThan(goog.math.Long.getTwoPwr24())) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    if (other.equals(goog.math.Long.getOne()) || other.equals(goog.math.Long.getNegOne())) {
      return goog.math.Long.getMinValue();
    } else {
      if (other.equals(goog.math.Long.getMinValue())) {
        return goog.math.Long.getOne();
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.getZero())) {
          return other.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.getZero();
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.getOne();
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.math.Long.ValueCacheId_ = {MAX_VALUE:1, MIN_VALUE:2, ZERO:3, ONE:4, NEG_ONE:5, TWO_PWR_24:6};
goog.provide("cljs.core");
goog.require("goog.math.Long");
goog.require("goog.math.Integer");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.9.521";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_warn_on_infer_STAR_ = false;
if (typeof cljs.core.PROTOCOL_SENTINEL !== "undefined") {
} else {
  cljs.core.PROTOCOL_SENTINEL = {};
}
goog.define("cljs.core._STAR_target_STAR_", "default");
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_namespace_maps_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__9571__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__9571 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9572__i = 0, G__9572__a = new Array(arguments.length - 0);
        while (G__9572__i < G__9572__a.length) {
          G__9572__a[G__9572__i] = arguments[G__9572__i + 0];
          ++G__9572__i;
        }
        args = new cljs.core.IndexedSeq(G__9572__a, 0);
      }
      return G__9571__delegate.call(this, args);
    };
    G__9571.cljs$lang$maxFixedArity = 0;
    G__9571.cljs$lang$applyTo = function(arglist__9573) {
      var args = cljs.core.seq(arglist__9573);
      return G__9571__delegate(args);
    };
    G__9571.cljs$core$IFn$_invoke$arity$variadic = G__9571__delegate;
    return G__9571;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__9574__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__9574 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9575__i = 0, G__9575__a = new Array(arguments.length - 0);
        while (G__9575__i < G__9575__a.length) {
          G__9575__a[G__9575__i] = arguments[G__9575__i + 0];
          ++G__9575__i;
        }
        args = new cljs.core.IndexedSeq(G__9575__a, 0);
      }
      return G__9574__delegate.call(this, args);
    };
    G__9574.cljs$lang$maxFixedArity = 0;
    G__9574.cljs$lang$applyTo = function(arglist__9576) {
      var args = cljs.core.seq(arglist__9576);
      return G__9574__delegate(args);
    };
    G__9574.cljs$core$IFn$_invoke$arity$variadic = G__9574__delegate;
    return G__9574;
  }();
  return null;
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return typeof x === "string" && 1 === x.length;
};
cljs.core.any_QMARK_ = function cljs$core$any_QMARK_(x) {
  return true;
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__7248__auto__ = ty;
    if (cljs.core.truth_(and__7248__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__7248__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4655__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4655__auto__)) {
    var s = temp__4655__auto__;
    return s;
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.system_time = function cljs$core$system_time() {
  if (typeof performance !== "undefined" && !(performance.now == null)) {
    return performance.now();
  } else {
    if (typeof process !== "undefined" && !(process.hrtime == null)) {
      var t = process.hrtime();
      return (t[0] * 1.0E9 + t[1]) / 1000000.0;
    } else {
      return (new Date).getTime();
    }
  }
};
cljs.core.make_array = function cljs$core$make_array(var_args) {
  var args9577 = [];
  var len__8373__auto___9583 = arguments.length;
  var i__8374__auto___9584 = 0;
  while (true) {
    if (i__8374__auto___9584 < len__8373__auto___9583) {
      args9577.push(arguments[i__8374__auto___9584]);
      var G__9585 = i__8374__auto___9584 + 1;
      i__8374__auto___9584 = G__9585;
      continue;
    } else {
    }
    break;
  }
  var G__9582 = args9577.length;
  switch(G__9582) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9577.slice(2), 0, null);
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic = function(type, size, more_sizes) {
  var dims = more_sizes;
  var dimarray = new Array(size);
  var n__8183__auto___9587 = dimarray.length;
  var i_9588 = 0;
  while (true) {
    if (i_9588 < n__8183__auto___9587) {
      dimarray[i_9588] = cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.make_array, null, dims) : cljs.core.apply.call(null, cljs.core.make_array, null, dims);
      var G__9589 = i_9588 + 1;
      i_9588 = G__9589;
      continue;
    } else {
    }
    break;
  }
  return dimarray;
};
cljs.core.make_array.cljs$lang$applyTo = function(seq9578) {
  var G__9579 = cljs.core.first(seq9578);
  var seq9578__$1 = cljs.core.next(seq9578);
  var G__9580 = cljs.core.first(seq9578__$1);
  var seq9578__$2 = cljs.core.next(seq9578__$1);
  return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(G__9579, G__9580, seq9578__$2);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__8183__auto___9590 = len;
  var i_9591 = 0;
  while (true) {
    if (i_9591 < n__8183__auto___9590) {
      new_arr[i_9591] = arr[i_9591];
      var G__9592 = i_9591 + 1;
      i_9591 = G__9592;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__9593 = i + 1;
      i = G__9593;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget(var_args) {
  var args9594 = [];
  var len__8373__auto___9603 = arguments.length;
  var i__8374__auto___9604 = 0;
  while (true) {
    if (i__8374__auto___9604 < len__8373__auto___9603) {
      args9594.push(arguments[i__8374__auto___9604]);
      var G__9605 = i__8374__auto___9604 + 1;
      i__8374__auto___9604 = G__9605;
      continue;
    } else {
    }
    break;
  }
  var G__9599 = args9594.length;
  switch(G__9599) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9594.slice(2), 0, null);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__9600 = cljs.core.aget;
  var G__9601 = array[i];
  var G__9602 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__9600, G__9601, G__9602) : cljs.core.apply.call(null, G__9600, G__9601, G__9602);
};
cljs.core.aget.cljs$lang$applyTo = function(seq9595) {
  var G__9596 = cljs.core.first(seq9595);
  var seq9595__$1 = cljs.core.next(seq9595);
  var G__9597 = cljs.core.first(seq9595__$1);
  var seq9595__$2 = cljs.core.next(seq9595__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__9596, G__9597, seq9595__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset(var_args) {
  var args9607 = [];
  var len__8373__auto___9618 = arguments.length;
  var i__8374__auto___9619 = 0;
  while (true) {
    if (i__8374__auto___9619 < len__8373__auto___9618) {
      args9607.push(arguments[i__8374__auto___9619]);
      var G__9620 = i__8374__auto___9619 + 1;
      i__8374__auto___9619 = G__9620;
      continue;
    } else {
    }
    break;
  }
  var G__9613 = args9607.length;
  switch(G__9613) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9607.slice(3), 0, null);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__9614 = cljs.core.aset;
  var G__9615 = array[idx];
  var G__9616 = idx2;
  var G__9617 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__9614, G__9615, G__9616, G__9617) : cljs.core.apply.call(null, G__9614, G__9615, G__9616, G__9617);
};
cljs.core.aset.cljs$lang$applyTo = function(seq9608) {
  var G__9609 = cljs.core.first(seq9608);
  var seq9608__$1 = cljs.core.next(seq9608);
  var G__9610 = cljs.core.first(seq9608__$1);
  var seq9608__$2 = cljs.core.next(seq9608__$1);
  var G__9611 = cljs.core.first(seq9608__$2);
  var seq9608__$3 = cljs.core.next(seq9608__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__9609, G__9610, G__9611, seq9608__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array(var_args) {
  var args9622 = [];
  var len__8373__auto___9628 = arguments.length;
  var i__8374__auto___9629 = 0;
  while (true) {
    if (i__8374__auto___9629 < len__8373__auto___9628) {
      args9622.push(arguments[i__8374__auto___9629]);
      var G__9630 = i__8374__auto___9629 + 1;
      i__8374__auto___9629 = G__9630;
      continue;
    } else {
    }
    break;
  }
  var G__9624 = args9622.length;
  switch(G__9624) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9622.length)].join(""));
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__9625 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__9626 = [];
  var G__9627 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__9625, G__9626, G__9627) : cljs.core.reduce.call(null, G__9625, G__9626, G__9627);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9635 = arguments.length;
  var i__8374__auto___9636 = 0;
  while (true) {
    if (i__8374__auto___9636 < len__8373__auto___9635) {
      args__8380__auto__.push(arguments[i__8374__auto___9636]);
      var G__9637 = i__8374__auto___9636 + 1;
      i__8374__auto___9636 = G__9637;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 2 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(2), 0, null) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8381__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq9632) {
  var G__9633 = cljs.core.first(seq9632);
  var seq9632__$1 = cljs.core.next(seq9632);
  var G__9634 = cljs.core.first(seq9632__$1);
  var seq9632__$2 = cljs.core.next(seq9632__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__9633, G__9634, seq9632__$2);
};
cljs.core.Fn = function() {
};
cljs.core.IFn = function() {
};
cljs.core._invoke = function cljs$core$_invoke(var_args) {
  var args9638 = [];
  var len__8373__auto___9641 = arguments.length;
  var i__8374__auto___9642 = 0;
  while (true) {
    if (i__8374__auto___9642 < len__8373__auto___9641) {
      args9638.push(arguments[i__8374__auto___9642]);
      var G__9643 = i__8374__auto___9642 + 1;
      i__8374__auto___9642 = G__9643;
      continue;
    } else {
    }
    break;
  }
  var G__9640 = args9638.length;
  switch(G__9640) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9638.length)].join(""));
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__7929__auto__.call(null, this$);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__7929__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__7929__auto__.call(null, this$, a);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__7929__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__7929__auto__.call(null, this$, a, b);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__7929__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$4 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__7929__auto__.call(null, this$, a, b, c);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__7929__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$5 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__7929__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__7929__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$6 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__7929__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__7929__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$7 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__7929__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$8 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$9 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$10 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$11 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$12 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$13 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$14 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$15 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$16 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$17 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$18 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$19 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$20 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$21 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._invoke[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$22 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__7929__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__7929__auto____$1 = cljs.core._invoke["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__7929__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__7928__auto__ = value == null ? null : value;
    var m__7929__auto__ = cljs.core._clone[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__7929__auto__.call(null, value);
    } else {
      var m__7929__auto____$1 = cljs.core._clone["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__7929__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = function() {
};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._count[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._count["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = function() {
};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._empty[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._empty["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = function() {
};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._conj[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__7929__auto__.call(null, coll, o);
    } else {
      var m__7929__auto____$1 = cljs.core._conj["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__7929__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = function() {
};
cljs.core._nth = function cljs$core$_nth(var_args) {
  var args9645 = [];
  var len__8373__auto___9648 = arguments.length;
  var i__8374__auto___9649 = 0;
  while (true) {
    if (i__8374__auto___9649 < len__8373__auto___9648) {
      args9645.push(arguments[i__8374__auto___9649]);
      var G__9650 = i__8374__auto___9649 + 1;
      i__8374__auto___9649 = G__9650;
      continue;
    } else {
    }
    break;
  }
  var G__9647 = args9645.length;
  switch(G__9647) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9645.length)].join(""));
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._nth[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__7929__auto__.call(null, coll, n);
    } else {
      var m__7929__auto____$1 = cljs.core._nth["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__7929__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._nth[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__7929__auto__.call(null, coll, n, not_found);
    } else {
      var m__7929__auto____$1 = cljs.core._nth["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__7929__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
};
cljs.core.ISeq = function() {
};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._first[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._first["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._rest[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._rest["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = function() {
};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._next[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._next["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = function() {
};
cljs.core._lookup = function cljs$core$_lookup(var_args) {
  var args9652 = [];
  var len__8373__auto___9655 = arguments.length;
  var i__8374__auto___9656 = 0;
  while (true) {
    if (i__8374__auto___9656 < len__8373__auto___9655) {
      args9652.push(arguments[i__8374__auto___9656]);
      var G__9657 = i__8374__auto___9656 + 1;
      i__8374__auto___9656 = G__9657;
      continue;
    } else {
    }
    break;
  }
  var G__9654 = args9652.length;
  switch(G__9654) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9652.length)].join(""));
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._lookup[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__7929__auto__.call(null, o, k);
    } else {
      var m__7929__auto____$1 = cljs.core._lookup["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__7929__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._lookup[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__7929__auto__.call(null, o, k, not_found);
    } else {
      var m__7929__auto____$1 = cljs.core._lookup["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__7929__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__7929__auto__.call(null, coll, k);
    } else {
      var m__7929__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__7929__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._assoc[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__7929__auto__.call(null, coll, k, v);
    } else {
      var m__7929__auto____$1 = cljs.core._assoc["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__7929__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IFind = function() {
};
cljs.core._find = function cljs$core$_find(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IFind$_find$arity$2 == null)) {
    return coll.cljs$core$IFind$_find$arity$2(coll, k);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._find[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__7929__auto__.call(null, coll, k);
    } else {
      var m__7929__auto____$1 = cljs.core._find["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__7929__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IFind.-find", coll);
      }
    }
  }
};
cljs.core.IMap = function() {
};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._dissoc[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__7929__auto__.call(null, coll, k);
    } else {
      var m__7929__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__7929__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = function() {
};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._key[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._key["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._val[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._val["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = function() {
};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._disjoin[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__7929__auto__.call(null, coll, v);
    } else {
      var m__7929__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__7929__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = function() {
};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._peek[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._peek["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._pop[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._pop["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = function() {
};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._assoc_n[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__7929__auto__.call(null, coll, n, val);
    } else {
      var m__7929__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__7929__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = function() {
};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._deref[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__7929__auto__.call(null, o);
    } else {
      var m__7929__auto____$1 = cljs.core._deref["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__7929__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = function() {
};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__7929__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__7929__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__7929__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = function() {
};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._meta[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__7929__auto__.call(null, o);
    } else {
      var m__7929__auto____$1 = cljs.core._meta["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__7929__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = function() {
};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._with_meta[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__7929__auto__.call(null, o, meta);
    } else {
      var m__7929__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__7929__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = function() {
};
cljs.core._reduce = function cljs$core$_reduce(var_args) {
  var args9659 = [];
  var len__8373__auto___9662 = arguments.length;
  var i__8374__auto___9663 = 0;
  while (true) {
    if (i__8374__auto___9663 < len__8373__auto___9662) {
      args9659.push(arguments[i__8374__auto___9663]);
      var G__9664 = i__8374__auto___9663 + 1;
      i__8374__auto___9663 = G__9664;
      continue;
    } else {
    }
    break;
  }
  var G__9661 = args9659.length;
  switch(G__9661) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9659.length)].join(""));
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._reduce[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__7929__auto__.call(null, coll, f);
    } else {
      var m__7929__auto____$1 = cljs.core._reduce["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__7929__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._reduce[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__7929__auto__.call(null, coll, f, start);
    } else {
      var m__7929__auto____$1 = cljs.core._reduce["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__7929__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._kv_reduce[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__7929__auto__.call(null, coll, f, init);
    } else {
      var m__7929__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__7929__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = function() {
};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._equiv[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__7929__auto__.call(null, o, other);
    } else {
      var m__7929__auto____$1 = cljs.core._equiv["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__7929__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = function() {
};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._hash[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__7929__auto__.call(null, o);
    } else {
      var m__7929__auto____$1 = cljs.core._hash["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__7929__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = function() {
};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._seq[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__7929__auto__.call(null, o);
    } else {
      var m__7929__auto____$1 = cljs.core._seq["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__7929__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = function() {
};
cljs.core.IList = function() {
};
cljs.core.IRecord = function() {
};
cljs.core.IReversible = function() {
};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._rseq[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._rseq["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = function() {
};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._sorted_seq[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__7929__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__7929__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__7929__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__7929__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__7929__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__7929__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._entry_key[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__7929__auto__.call(null, coll, entry);
    } else {
      var m__7929__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__7929__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._comparator[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._comparator["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = function() {
};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__7928__auto__ = writer == null ? null : writer;
    var m__7929__auto__ = cljs.core._write[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__7929__auto__.call(null, writer, s);
    } else {
      var m__7929__auto____$1 = cljs.core._write["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__7929__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__7928__auto__ = writer == null ? null : writer;
    var m__7929__auto__ = cljs.core._flush[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__7929__auto__.call(null, writer);
    } else {
      var m__7929__auto____$1 = cljs.core._flush["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__7929__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = function() {
};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._pr_writer[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__7929__auto__.call(null, o, writer, opts);
    } else {
      var m__7929__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__7929__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = function() {
};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(x) {
  if (!(x == null) && !(x.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return x.cljs$core$IPending$_realized_QMARK_$arity$1(x);
  } else {
    var x__7928__auto__ = x == null ? null : x;
    var m__7929__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto__.call(null, x);
    } else {
      var m__7929__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", x);
      }
    }
  }
};
cljs.core.IWatchable = function() {
};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._notify_watches[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__7929__auto__.call(null, this$, oldval, newval);
    } else {
      var m__7929__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__7929__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._add_watch[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__7929__auto__.call(null, this$, key, f);
    } else {
      var m__7929__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__7929__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core._remove_watch[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__7929__auto__.call(null, this$, key);
    } else {
      var m__7929__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__7929__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = function() {
};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._as_transient[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = function() {
};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__7928__auto__ = tcoll == null ? null : tcoll;
    var m__7929__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__7929__auto__.call(null, tcoll, val);
    } else {
      var m__7929__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__7929__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__7928__auto__ = tcoll == null ? null : tcoll;
    var m__7929__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__7929__auto__.call(null, tcoll);
    } else {
      var m__7929__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__7929__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = function() {
};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__7928__auto__ = tcoll == null ? null : tcoll;
    var m__7929__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__7929__auto__.call(null, tcoll, key, val);
    } else {
      var m__7929__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__7929__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = function() {
};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__7928__auto__ = tcoll == null ? null : tcoll;
    var m__7929__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__7929__auto__.call(null, tcoll, key);
    } else {
      var m__7929__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__7929__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = function() {
};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__7928__auto__ = tcoll == null ? null : tcoll;
    var m__7929__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__7929__auto__.call(null, tcoll, n, val);
    } else {
      var m__7929__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__7929__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__7928__auto__ = tcoll == null ? null : tcoll;
    var m__7929__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__7929__auto__.call(null, tcoll);
    } else {
      var m__7929__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__7929__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = function() {
};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__7928__auto__ = tcoll == null ? null : tcoll;
    var m__7929__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__7929__auto__.call(null, tcoll, v);
    } else {
      var m__7929__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__7929__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = function() {
};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__7928__auto__ = x == null ? null : x;
    var m__7929__auto__ = cljs.core._compare[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__7929__auto__.call(null, x, y);
    } else {
      var m__7929__auto____$1 = cljs.core._compare["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__7929__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = function() {
};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._drop_first[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = function() {
};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._chunked_first[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._chunked_rest[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = function() {
};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._chunked_next[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = function() {
};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__7928__auto__ = x == null ? null : x;
    var m__7929__auto__ = cljs.core._name[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto__.call(null, x);
    } else {
      var m__7929__auto____$1 = cljs.core._name["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__7928__auto__ = x == null ? null : x;
    var m__7929__auto__ = cljs.core._namespace[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto__.call(null, x);
    } else {
      var m__7929__auto____$1 = cljs.core._namespace["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = function() {
};
cljs.core.IReset = function() {
};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__7929__auto__.call(null, o, new_value);
    } else {
      var m__7929__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__7929__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = function() {
};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_(var_args) {
  var args9666 = [];
  var len__8373__auto___9669 = arguments.length;
  var i__8374__auto___9670 = 0;
  while (true) {
    if (i__8374__auto___9670 < len__8373__auto___9669) {
      args9666.push(arguments[i__8374__auto___9670]);
      var G__9671 = i__8374__auto___9670 + 1;
      i__8374__auto___9670 = G__9671;
      continue;
    } else {
    }
    break;
  }
  var G__9668 = args9666.length;
  switch(G__9668) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9666.length)].join(""));
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__7929__auto__.call(null, o, f);
    } else {
      var m__7929__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__7929__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__7929__auto__.call(null, o, f, a);
    } else {
      var m__7929__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__7929__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$4 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__7929__auto__.call(null, o, f, a, b);
    } else {
      var m__7929__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__7929__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$5 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__7929__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__7929__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__7929__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__7928__auto__ = o == null ? null : o;
    var m__7929__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__7929__auto__.call(null, o, new_value);
    } else {
      var m__7929__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__7929__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = function() {
};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__7928__auto__ = coll == null ? null : coll;
    var m__7929__auto__ = cljs.core._iterator[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto__.call(null, coll);
    } else {
      var m__7929__auto____$1 = cljs.core._iterator["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__7929__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  return h1__$6 ^ h1__$6 >>> 16;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__9673 = i + 2;
        var G__9674 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__9673;
        h1 = G__9674;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__9677 = i + 1;
          var G__9678 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__9677;
          hash = G__9678;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  if (k == null) {
    return 0;
  } else {
    var h = cljs.core.string_hash_cache[k];
    if (typeof h === "number") {
      return h;
    } else {
      return cljs.core.add_to_string_hash_cache(k);
    }
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null) ^ 0;
  } else {
    if (typeof o === "number") {
      if (cljs.core.truth_(isFinite(o))) {
        return Math.floor(o) % 2147483647;
      } else {
        var G__9686 = o;
        switch(G__9686) {
          case Infinity:
            return 2146435072;
            break;
          case -Infinity:
            return -1048576;
            break;
          default:
            return 2146959360;
        }
      }
    } else {
      if (o === true) {
        return 1231;
      } else {
        if (o === false) {
          return 1237;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf() ^ 0;
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o) ^ 0;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(c, x) {
  return x instanceof c;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = cljs.core.not(a.ns);
      if (and__7248__auto__) {
        return b.ns;
      } else {
        return and__7248__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__9694 = a.ns;
            var G__9695 = b.ns;
            return goog.array.defaultCompare(G__9694, G__9695);
          }();
          if (0 === nsc) {
            var G__9696 = a.name;
            var G__9697 = b.name;
            return goog.array.defaultCompare(G__9696, G__9697);
          } else {
            return nsc;
          }
        }
      } else {
        var G__9698 = a.name;
        var G__9699 = b.name;
        return goog.array.defaultCompare(G__9698, G__9699);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__9701 = null;
  var G__9701__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__9701__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__9701 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9701__2.call(this, self__, coll);
      case 3:
        return G__9701__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9701.cljs$core$IFn$_invoke$arity$2 = G__9701__2;
  G__9701.cljs$core$IFn$_invoke$arity$3 = G__9701__3;
  return G__9701;
}();
cljs.core.Symbol.prototype.apply = function(self__, args9700) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9700)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__7700__auto__ = self__._hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol(var_args) {
  var args9702 = [];
  var len__8373__auto___9705 = arguments.length;
  var i__8374__auto___9706 = 0;
  while (true) {
    if (i__8374__auto___9706 < len__8373__auto___9705) {
      args9702.push(arguments[i__8374__auto___9706]);
      var G__9707 = i__8374__auto___9706 + 1;
      i__8374__auto___9706 = G__9707;
      continue;
    } else {
    }
    break;
  }
  var G__9704 = args9702.length;
  switch(G__9704) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9702.length)].join(""));
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx < 1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns), cljs.core.str.cljs$core$IFn$_invoke$arity$1("/"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 6717441;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("#'"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.sym)].join("");
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__9710 = this$__$1.sym;
    var G__9711 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__9710, G__9711) : cljs.core._EQ_.call(null, G__9710, G__9711);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash_symbol(self__.sym);
};
cljs.core.Var.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Var.prototype.call = function() {
  var G__9756 = null;
  var G__9756__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__9756__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__9756__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__9756__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__9756__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__9756__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__9756__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__9756__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__9756__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__9756__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__9756__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__9756__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__9756__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__9756__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__9756__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__9756__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__9756__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__9756__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__9756__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__9756__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__9756__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__9756__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__9712 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__9713 = a;
    var G__9714 = b;
    var G__9715 = c;
    var G__9716 = d;
    var G__9717 = e;
    var G__9718 = f;
    var G__9719 = g;
    var G__9720 = h;
    var G__9721 = i;
    var G__9722 = j;
    var G__9723 = k;
    var G__9724 = l;
    var G__9725 = m;
    var G__9726 = n;
    var G__9727 = o;
    var G__9728 = p;
    var G__9729 = q;
    var G__9730 = r;
    var G__9731 = s;
    var G__9732 = t;
    var G__9733 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__9712, G__9713, G__9714, G__9715, G__9716, G__9717, G__9718, G__9719, G__9720, G__9721, G__9722, G__9723, G__9724, G__9725, G__9726, G__9727, G__9728, G__9729, G__9730, G__9731, G__9732, G__9733) : cljs.core.apply.call(null, G__9712, G__9713, G__9714, G__9715, G__9716, G__9717, G__9718, G__9719, G__9720, G__9721, G__9722, G__9723, G__9724, G__9725, G__9726, G__9727, G__9728, G__9729, G__9730, 
    G__9731, G__9732, G__9733);
  };
  G__9756 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__9756__1.call(this, self__);
      case 2:
        return G__9756__2.call(this, self__, a);
      case 3:
        return G__9756__3.call(this, self__, a, b);
      case 4:
        return G__9756__4.call(this, self__, a, b, c);
      case 5:
        return G__9756__5.call(this, self__, a, b, c, d);
      case 6:
        return G__9756__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__9756__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__9756__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__9756__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__9756__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__9756__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__9756__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__9756__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__9756__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__9756__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__9756__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__9756__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__9756__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__9756__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__9756__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__9756__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__9756__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9756.cljs$core$IFn$_invoke$arity$1 = G__9756__1;
  G__9756.cljs$core$IFn$_invoke$arity$2 = G__9756__2;
  G__9756.cljs$core$IFn$_invoke$arity$3 = G__9756__3;
  G__9756.cljs$core$IFn$_invoke$arity$4 = G__9756__4;
  G__9756.cljs$core$IFn$_invoke$arity$5 = G__9756__5;
  G__9756.cljs$core$IFn$_invoke$arity$6 = G__9756__6;
  G__9756.cljs$core$IFn$_invoke$arity$7 = G__9756__7;
  G__9756.cljs$core$IFn$_invoke$arity$8 = G__9756__8;
  G__9756.cljs$core$IFn$_invoke$arity$9 = G__9756__9;
  G__9756.cljs$core$IFn$_invoke$arity$10 = G__9756__10;
  G__9756.cljs$core$IFn$_invoke$arity$11 = G__9756__11;
  G__9756.cljs$core$IFn$_invoke$arity$12 = G__9756__12;
  G__9756.cljs$core$IFn$_invoke$arity$13 = G__9756__13;
  G__9756.cljs$core$IFn$_invoke$arity$14 = G__9756__14;
  G__9756.cljs$core$IFn$_invoke$arity$15 = G__9756__15;
  G__9756.cljs$core$IFn$_invoke$arity$16 = G__9756__16;
  G__9756.cljs$core$IFn$_invoke$arity$17 = G__9756__17;
  G__9756.cljs$core$IFn$_invoke$arity$18 = G__9756__18;
  G__9756.cljs$core$IFn$_invoke$arity$19 = G__9756__19;
  G__9756.cljs$core$IFn$_invoke$arity$20 = G__9756__20;
  G__9756.cljs$core$IFn$_invoke$arity$21 = G__9756__21;
  G__9756.cljs$core$IFn$_invoke$arity$22 = G__9756__22;
  return G__9756;
}();
cljs.core.Var.prototype.apply = function(self__, args9709) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9709)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__9734 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__9735 = a;
  var G__9736 = b;
  var G__9737 = c;
  var G__9738 = d;
  var G__9739 = e;
  var G__9740 = f;
  var G__9741 = g;
  var G__9742 = h;
  var G__9743 = i;
  var G__9744 = j;
  var G__9745 = k;
  var G__9746 = l;
  var G__9747 = m;
  var G__9748 = n;
  var G__9749 = o;
  var G__9750 = p;
  var G__9751 = q;
  var G__9752 = r;
  var G__9753 = s;
  var G__9754 = t;
  var G__9755 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__9734, G__9735, G__9736, G__9737, G__9738, G__9739, G__9740, G__9741, G__9742, G__9743, G__9744, G__9745, G__9746, G__9747, G__9748, G__9749, G__9750, G__9751, G__9752, G__9753, G__9754, G__9755) : cljs.core.apply.call(null, G__9734, G__9735, G__9736, G__9737, G__9738, G__9739, G__9740, G__9741, G__9742, G__9743, G__9744, G__9745, G__9746, G__9747, G__9748, G__9749, G__9750, G__9751, G__9752, 
  G__9753, G__9754, G__9755);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || cljs.core.PROTOCOL_SENTINEL === value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0, null);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0, null);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_(var_args) {
  var args9769 = [];
  var len__8373__auto___9775 = arguments.length;
  var i__8374__auto___9776 = 0;
  while (true) {
    if (i__8374__auto___9776 < len__8373__auto___9775) {
      args9769.push(arguments[i__8374__auto___9776]);
      var G__9777 = i__8374__auto___9776 + 1;
      i__8374__auto___9776 = G__9777;
      continue;
    } else {
    }
    break;
  }
  var G__9774 = args9769.length;
  switch(G__9774) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9769.slice(2), 0, null);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__9779 = y;
        var G__9780 = cljs.core.first(more);
        var G__9781 = cljs.core.next(more);
        x = G__9779;
        y = G__9780;
        more = G__9781;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq9770) {
  var G__9771 = cljs.core.first(seq9770);
  var seq9770__$1 = cljs.core.next(seq9770);
  var G__9772 = cljs.core.first(seq9770__$1);
  var seq9770__$2 = cljs.core.next(seq9770__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__9771, G__9772, seq9770__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__9782 = n + 1;
      var G__9783 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__9784 = cljs.core.next(coll__$1);
      n = G__9782;
      hash_code = G__9783;
      coll__$1 = G__9784;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__9785 = n + 1;
      var G__9786 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__9787 = cljs.core.next(coll__$1);
      n = G__9785;
      hash_code = G__9786;
      coll__$1 = G__9787;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__9788 = this$__$1.valueOf();
    var G__9789 = other.valueOf();
    return goog.array.defaultCompare(G__9788, G__9789);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join(""));
  }
};
cljs.core.Inst = function() {
};
cljs.core.inst_ms_STAR_ = function cljs$core$inst_ms_STAR_(inst) {
  if (!(inst == null) && !(inst.cljs$core$Inst$inst_ms_STAR_$arity$1 == null)) {
    return inst.cljs$core$Inst$inst_ms_STAR_$arity$1(inst);
  } else {
    var x__7928__auto__ = inst == null ? null : inst;
    var m__7929__auto__ = cljs.core.inst_ms_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(inst) : m__7929__auto__.call(null, inst);
    } else {
      var m__7929__auto____$1 = cljs.core.inst_ms_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(inst) : m__7929__auto____$1.call(null, inst);
      } else {
        throw cljs.core.missing_protocol("Inst.inst-ms*", inst);
      }
    }
  }
};
Date.prototype.cljs$core$Inst$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$Inst$inst_ms_STAR_$arity$1 = function(inst) {
  var inst__$1 = this;
  return inst__$1.getTime();
};
cljs.core.inst_ms = function cljs$core$inst_ms(inst) {
  return cljs.core.inst_ms_STAR_(inst);
};
cljs.core.inst_QMARK_ = function cljs$core$inst_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$Inst$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.Inst, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.Inst, x);
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce(var_args) {
  var args9792 = [];
  var len__8373__auto___9801 = arguments.length;
  var i__8374__auto___9802 = 0;
  while (true) {
    if (i__8374__auto___9802 < len__8373__auto___9801) {
      args9792.push(arguments[i__8374__auto___9802]);
      var G__9803 = i__8374__auto___9802 + 1;
      i__8374__auto___9802 = G__9803;
      continue;
    } else {
    }
    break;
  }
  var G__9794 = args9792.length;
  switch(G__9794) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9792.length)].join(""));
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__9795 = val;
          var G__9796 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9795, G__9796) : f.call(null, G__9795, G__9796);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__9805 = nval;
          var G__9806 = n + 1;
          val = G__9805;
          n = G__9806;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__9797 = val__$1;
        var G__9798 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9797, G__9798) : f.call(null, G__9797, G__9798);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__9807 = nval;
        var G__9808 = n + 1;
        val__$1 = G__9807;
        n = G__9808;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__9799 = val__$1;
        var G__9800 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9799, G__9800) : f.call(null, G__9799, G__9800);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__9809 = nval;
        var G__9810 = n + 1;
        val__$1 = G__9809;
        n = G__9810;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce(var_args) {
  var args9811 = [];
  var len__8373__auto___9820 = arguments.length;
  var i__8374__auto___9821 = 0;
  while (true) {
    if (i__8374__auto___9821 < len__8373__auto___9820) {
      args9811.push(arguments[i__8374__auto___9821]);
      var G__9822 = i__8374__auto___9821 + 1;
      i__8374__auto___9821 = G__9822;
      continue;
    } else {
    }
    break;
  }
  var G__9813 = args9811.length;
  switch(G__9813) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9811.length)].join(""));
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__9814 = val;
          var G__9815 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9814, G__9815) : f.call(null, G__9814, G__9815);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__9824 = nval;
          var G__9825 = n + 1;
          val = G__9824;
          n = G__9825;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__9816 = val__$1;
        var G__9817 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9816, G__9817) : f.call(null, G__9816, G__9817);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__9826 = nval;
        var G__9827 = n + 1;
        val__$1 = G__9826;
        n = G__9827;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__9818 = val__$1;
        var G__9819 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9818, G__9819) : f.call(null, G__9818, G__9819);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__9828 = nval;
        var G__9829 = n + 1;
        val__$1 = G__9828;
        n = G__9829;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core._indexOf = function cljs$core$_indexOf(var_args) {
  var args9834 = [];
  var len__8373__auto___9837 = arguments.length;
  var i__8374__auto___9838 = 0;
  while (true) {
    if (i__8374__auto___9838 < len__8373__auto___9837) {
      args9834.push(arguments[i__8374__auto___9838]);
      var G__9839 = i__8374__auto___9838 + 1;
      i__8374__auto___9838 = G__9839;
      continue;
    } else {
    }
    break;
  }
  var G__9836 = args9834.length;
  switch(G__9836) {
    case 2:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9834.length)].join(""));
  }
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
  if (start >= len) {
    return -1;
  } else {
    var idx = start > 0 ? start : start < 0 ? function() {
      var x__7596__auto__ = 0;
      var y__7597__auto__ = start + len;
      return x__7596__auto__ > y__7597__auto__ ? x__7596__auto__ : y__7597__auto__;
    }() : start;
    while (true) {
      if (idx < len) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx) : cljs.core.nth.call(null, coll, idx), x)) {
          return idx;
        } else {
          var G__9841 = idx + 1;
          idx = G__9841;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._indexOf.cljs$lang$maxFixedArity = 3;
cljs.core._lastIndexOf = function cljs$core$_lastIndexOf(var_args) {
  var args9842 = [];
  var len__8373__auto___9845 = arguments.length;
  var i__8374__auto___9846 = 0;
  while (true) {
    if (i__8374__auto___9846 < len__8373__auto___9845) {
      args9842.push(arguments[i__8374__auto___9846]);
      var G__9847 = i__8374__auto___9846 + 1;
      i__8374__auto___9846 = G__9847;
      continue;
    } else {
    }
    break;
  }
  var G__9844 = args9842.length;
  switch(G__9844) {
    case 2:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9842.length)].join(""));
  }
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
  if (len === 0) {
    return -1;
  } else {
    var idx = start > 0 ? function() {
      var x__7603__auto__ = len - 1;
      var y__7604__auto__ = start;
      return x__7603__auto__ < y__7604__auto__ ? x__7603__auto__ : y__7604__auto__;
    }() : start < 0 ? len + start : start;
    while (true) {
      if (idx >= 0) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx) : cljs.core.nth.call(null, coll, idx), x)) {
          return idx;
        } else {
          var G__9849 = idx - 1;
          idx = G__9849;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._lastIndexOf.cljs$lang$maxFixedArity = 3;
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i, meta) {
  this.arr = arr;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 166592766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.indexOf = function() {
  var G__9850 = null;
  var G__9850__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__9850__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9850 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9850__1.call(this, x);
      case 2:
        return G__9850__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9850.cljs$core$IFn$_invoke$arity$1 = G__9850__1;
  G__9850.cljs$core$IFn$_invoke$arity$2 = G__9850__2;
  return G__9850;
}();
cljs.core.IndexedSeq.prototype.lastIndexOf = function() {
  var G__9851 = null;
  var G__9851__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
  };
  var G__9851__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9851 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9851__1.call(this, x);
      case 2:
        return G__9851__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9851.cljs$core$IFn$_invoke$arity$1 = G__9851__1;
  G__9851.cljs$core$IFn$_invoke$arity$2 = G__9851__2;
  return G__9851;
}();
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (0 <= i__$1 && i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    throw new Error("Index out of bounds");
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (0 <= i__$1 && i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, self__.meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__7596__auto__ = 0;
  var y__7597__auto__ = self__.arr.length - self__.i;
  return x__7596__auto__ > y__7597__auto__ ? x__7596__auto__ : y__7597__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = coll__$1.cljs$core$ICounted$_count$arity$1(null);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, new_meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i, meta) {
  return new cljs.core.IndexedSeq(arr, i, meta);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq(var_args) {
  var args9852 = [];
  var len__8373__auto___9855 = arguments.length;
  var i__8374__auto___9856 = 0;
  while (true) {
    if (i__8374__auto___9856 < len__8373__auto___9855) {
      args9852.push(arguments[i__8374__auto___9856]);
      var G__9857 = i__8374__auto___9856 + 1;
      i__8374__auto___9856 = G__9857;
      continue;
    } else {
    }
    break;
  }
  var G__9854 = args9852.length;
  switch(G__9854) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9852.length)].join(""));
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i, null);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq(var_args) {
  var args9859 = [];
  var len__8373__auto___9862 = arguments.length;
  var i__8374__auto___9863 = 0;
  while (true) {
    if (i__8374__auto___9863 < len__8373__auto___9862) {
      args9859.push(arguments[i__8374__auto___9863]);
      var G__9864 = i__8374__auto___9863 + 1;
      i__8374__auto___9863 = G__9864;
      continue;
    } else {
    }
    break;
  }
  var G__9861 = args9859.length;
  switch(G__9861) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9859.length)].join(""));
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.indexOf = function() {
  var G__9868 = null;
  var G__9868__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__9868__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9868 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9868__1.call(this, x);
      case 2:
        return G__9868__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9868.cljs$core$IFn$_invoke$arity$1 = G__9868__1;
  G__9868.cljs$core$IFn$_invoke$arity$2 = G__9868__2;
  return G__9868;
}();
cljs.core.RSeq.prototype.lastIndexOf = function() {
  var G__9869 = null;
  var G__9869__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
  };
  var G__9869__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__9869 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__9869__1.call(this, x);
      case 2:
        return G__9869__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9869.cljs$core$IFn$_invoke$arity$1 = G__9869__1;
  G__9869.cljs$core$IFn$_invoke$arity$2 = G__9869__2;
  return G__9869;
}();
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__9866 = cljs.core.List.EMPTY;
  var G__9867 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__9866, G__9867) : cljs.core.with_meta.call(null, G__9866, G__9867);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__9870 = sn;
      s = G__9870;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj(var_args) {
  var args9871 = [];
  var len__8373__auto___9877 = arguments.length;
  var i__8374__auto___9878 = 0;
  while (true) {
    if (i__8374__auto___9878 < len__8373__auto___9877) {
      args9871.push(arguments[i__8374__auto___9878]);
      var G__9879 = i__8374__auto___9878 + 1;
      i__8374__auto___9878 = G__9879;
      continue;
    } else {
    }
    break;
  }
  var G__9876 = args9871.length;
  switch(G__9876) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9871.slice(2), 0, null);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    var x__8102__auto__ = x;
    return cljs.core._conj(cljs.core.List.EMPTY, x__8102__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__9881 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__9882 = cljs.core.first(xs);
      var G__9883 = cljs.core.next(xs);
      coll = G__9881;
      x = G__9882;
      xs = G__9883;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq9872) {
  var G__9873 = cljs.core.first(seq9872);
  var seq9872__$1 = cljs.core.next(seq9872);
  var G__9874 = cljs.core.first(seq9872__$1);
  var seq9872__$2 = cljs.core.next(seq9872__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__9873, G__9874, seq9872__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__9884 = cljs.core.next(s);
      var G__9885 = acc + 1;
      s = G__9884;
      acc = G__9885;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth(var_args) {
  var args9890 = [];
  var len__8373__auto___9893 = arguments.length;
  var i__8374__auto___9894 = 0;
  while (true) {
    if (i__8374__auto___9894 < len__8373__auto___9893) {
      args9890.push(arguments[i__8374__auto___9894]);
      var G__9895 = i__8374__auto___9894 + 1;
      i__8374__auto___9894 = G__9895;
      continue;
    } else {
    }
    break;
  }
  var G__9892 = args9890.length;
  switch(G__9892) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9890.length)].join(""));
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__9897 = cljs.core.next(coll);
            var G__9898 = n - 1;
            coll = G__9897;
            n = G__9898;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__9899 = cljs.core.next(coll);
            var G__9900 = n - 1;
            var G__9901 = not_found;
            coll = G__9899;
            n = G__9900;
            not_found = G__9901;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth(var_args) {
  var args9902 = [];
  var len__8373__auto___9909 = arguments.length;
  var i__8374__auto___9910 = 0;
  while (true) {
    if (i__8374__auto___9910 < len__8373__auto___9909) {
      args9902.push(arguments[i__8374__auto___9910]);
      var G__9911 = i__8374__auto___9910 + 1;
      i__8374__auto___9910 = G__9911;
      continue;
    } else {
    }
    break;
  }
  var G__9904 = args9902.length;
  switch(G__9904) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9902.length)].join(""));
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("Index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n >= 0 && n < coll.length) {
            return coll[n];
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (typeof coll === "string") {
            if (n >= 0 && n < coll.length) {
              return coll.charAt(n);
            } else {
              throw new Error("Index out of bounds");
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("nth not supported on this type "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("Index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n >= 0 && n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n >= 0 && n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("nth not supported on this type "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__9913 = n__$1 - 1;
      var G__9914 = cljs.core.rest(xs);
      n__$1 = G__9913;
      xs = G__9914;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get(var_args) {
  var args9915 = [];
  var len__8373__auto___9920 = arguments.length;
  var i__8374__auto___9921 = 0;
  while (true) {
    if (i__8374__auto___9921 < len__8373__auto___9920) {
      args9915.push(arguments[i__8374__auto___9921]);
      var G__9922 = i__8374__auto___9921 + 1;
      i__8374__auto___9921 = G__9922;
      continue;
    } else {
    }
    break;
  }
  var G__9917 = args9915.length;
  switch(G__9917) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9915.length)].join(""));
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (!(k == null) && k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (!(k == null) && k < o.length) {
            return o.charAt(k | 0);
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (!(k == null) && k >= 0 && k < o.length) {
          return o[k | 0];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (!(k == null) && k >= 0 && k < o.length) {
            return o.charAt(k | 0);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc(var_args) {
  var args9924 = [];
  var len__8373__auto___9931 = arguments.length;
  var i__8374__auto___9932 = 0;
  while (true) {
    if (i__8374__auto___9932 < len__8373__auto___9931) {
      args9924.push(arguments[i__8374__auto___9932]);
      var G__9933 = i__8374__auto___9932 + 1;
      i__8374__auto___9932 = G__9933;
      continue;
    } else {
    }
    break;
  }
  var G__9930 = args9924.length;
  switch(G__9930) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9924.slice(3), 0, null);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentArrayMap.createAsIfByAssoc([k, v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__9935 = ret;
      var G__9936 = cljs.core.first(kvs);
      var G__9937 = cljs.core.second(kvs);
      var G__9938 = cljs.core.nnext(kvs);
      coll = G__9935;
      k = G__9936;
      v = G__9937;
      kvs = G__9938;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq9925) {
  var G__9926 = cljs.core.first(seq9925);
  var seq9925__$1 = cljs.core.next(seq9925);
  var G__9927 = cljs.core.first(seq9925__$1);
  var seq9925__$2 = cljs.core.next(seq9925__$1);
  var G__9928 = cljs.core.first(seq9925__$2);
  var seq9925__$3 = cljs.core.next(seq9925__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__9926, G__9927, G__9928, seq9925__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc(var_args) {
  var args9939 = [];
  var len__8373__auto___9945 = arguments.length;
  var i__8374__auto___9946 = 0;
  while (true) {
    if (i__8374__auto___9946 < len__8373__auto___9945) {
      args9939.push(arguments[i__8374__auto___9946]);
      var G__9947 = i__8374__auto___9946 + 1;
      i__8374__auto___9946 = G__9947;
      continue;
    } else {
    }
    break;
  }
  var G__9944 = args9939.length;
  switch(G__9944) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9939.slice(2), 0, null);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__9949 = ret;
        var G__9950 = cljs.core.first(ks);
        var G__9951 = cljs.core.next(ks);
        coll = G__9949;
        k = G__9950;
        ks = G__9951;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq9940) {
  var G__9941 = cljs.core.first(seq9940);
  var seq9940__$1 = cljs.core.next(seq9940);
  var G__9942 = cljs.core.first(seq9940__$1);
  var seq9940__$2 = cljs.core.next(seq9940__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__9941, G__9942, seq9940__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__7260__auto__ = goog.isFunction(f);
  if (or__7260__auto__) {
    return or__7260__auto__;
  } else {
    if (!(f == null)) {
      if (false || cljs.core.PROTOCOL_SENTINEL === f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.MetaFn.prototype.call = function() {
  var G__9957 = null;
  var G__9957__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__9957__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__9957__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__9957__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__9957__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__9957__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__9957__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__9957__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__9957__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__9957__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__9957__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__9957__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__9957__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__9957__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__9957__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__9957__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__9957__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__9957__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__9957__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__9957__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__9957__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__9957__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__9957 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__9957__1.call(this, self__);
      case 2:
        return G__9957__2.call(this, self__, a);
      case 3:
        return G__9957__3.call(this, self__, a, b);
      case 4:
        return G__9957__4.call(this, self__, a, b, c);
      case 5:
        return G__9957__5.call(this, self__, a, b, c, d);
      case 6:
        return G__9957__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__9957__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__9957__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__9957__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__9957__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__9957__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__9957__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__9957__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__9957__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__9957__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__9957__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__9957__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__9957__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__9957__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__9957__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__9957__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__9957__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9957.cljs$core$IFn$_invoke$arity$1 = G__9957__1;
  G__9957.cljs$core$IFn$_invoke$arity$2 = G__9957__2;
  G__9957.cljs$core$IFn$_invoke$arity$3 = G__9957__3;
  G__9957.cljs$core$IFn$_invoke$arity$4 = G__9957__4;
  G__9957.cljs$core$IFn$_invoke$arity$5 = G__9957__5;
  G__9957.cljs$core$IFn$_invoke$arity$6 = G__9957__6;
  G__9957.cljs$core$IFn$_invoke$arity$7 = G__9957__7;
  G__9957.cljs$core$IFn$_invoke$arity$8 = G__9957__8;
  G__9957.cljs$core$IFn$_invoke$arity$9 = G__9957__9;
  G__9957.cljs$core$IFn$_invoke$arity$10 = G__9957__10;
  G__9957.cljs$core$IFn$_invoke$arity$11 = G__9957__11;
  G__9957.cljs$core$IFn$_invoke$arity$12 = G__9957__12;
  G__9957.cljs$core$IFn$_invoke$arity$13 = G__9957__13;
  G__9957.cljs$core$IFn$_invoke$arity$14 = G__9957__14;
  G__9957.cljs$core$IFn$_invoke$arity$15 = G__9957__15;
  G__9957.cljs$core$IFn$_invoke$arity$16 = G__9957__16;
  G__9957.cljs$core$IFn$_invoke$arity$17 = G__9957__17;
  G__9957.cljs$core$IFn$_invoke$arity$18 = G__9957__18;
  G__9957.cljs$core$IFn$_invoke$arity$19 = G__9957__19;
  G__9957.cljs$core$IFn$_invoke$arity$20 = G__9957__20;
  G__9957.cljs$core$IFn$_invoke$arity$21 = G__9957__21;
  G__9957.cljs$core$IFn$_invoke$arity$22 = G__9957__22;
  return G__9957;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args9956) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9956)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__7248__auto__ = !(o == null);
    if (and__7248__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__7248__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj(var_args) {
  var args9962 = [];
  var len__8373__auto___9968 = arguments.length;
  var i__8374__auto___9969 = 0;
  while (true) {
    if (i__8374__auto___9969 < len__8373__auto___9968) {
      args9962.push(arguments[i__8374__auto___9969]);
      var G__9970 = i__8374__auto___9969 + 1;
      i__8374__auto___9969 = G__9970;
      continue;
    } else {
    }
    break;
  }
  var G__9967 = args9962.length;
  switch(G__9967) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9962.slice(2), 0, null);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__9972 = ret;
        var G__9973 = cljs.core.first(ks);
        var G__9974 = cljs.core.next(ks);
        coll = G__9972;
        k = G__9973;
        ks = G__9974;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq9963) {
  var G__9964 = cljs.core.first(seq9963);
  var seq9963__$1 = cljs.core.next(seq9963);
  var G__9965 = cljs.core.first(seq9963__$1);
  var seq9963__$2 = cljs.core.next(seq9963__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__9964, G__9965, seq9963__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.ifind_QMARK_ = function cljs$core$ifind_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IFind$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IFind, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IFind, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj(var_args) {
  var args9997 = [];
  var len__8373__auto___10003 = arguments.length;
  var i__8374__auto___10004 = 0;
  while (true) {
    if (i__8374__auto___10004 < len__8373__auto___10003) {
      args9997.push(arguments[i__8374__auto___10004]);
      var G__10005 = i__8374__auto___10004 + 1;
      i__8374__auto___10004 = G__10005;
      continue;
    } else {
    }
    break;
  }
  var G__10000 = args9997.length;
  switch(G__10000) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args9997.slice(0), 0, null);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__8392__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq9998) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9998));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__10009_10011 = obj;
  var G__10010_10012 = function(G__10009_10011, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__10009_10011, keys);
  goog.object.forEach(G__10009_10011, G__10010_10012);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__10013 = i__$1 + 1;
      var G__10014 = j__$1 + 1;
      var G__10015 = len__$1 - 1;
      i__$1 = G__10013;
      j__$1 = G__10014;
      len__$1 = G__10015;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__10016 = i__$1 - 1;
      var G__10017 = j__$1 - 1;
      var G__10018 = len__$1 - 1;
      i__$1 = G__10016;
      j__$1 = G__10017;
      len__$1 = G__10018;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.boolean_QMARK_ = function cljs$core$boolean_QMARK_(x) {
  return x === true || x === false;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var or__7260__auto__ = !(s == null) ? s.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeqable$ ? true : !s.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  if (or__7260__auto__) {
    return or__7260__auto__;
  } else {
    return cljs.core.array_QMARK_(s) || typeof s === "string";
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__7260__auto__ = cljs.core.fn_QMARK_(f);
  if (or__7260__auto__) {
    return or__7260__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || cljs.core.PROTOCOL_SENTINEL === f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.int_QMARK_ = function cljs$core$int_QMARK_(x) {
  return cljs.core.integer_QMARK_(x) || x instanceof goog.math.Integer || x instanceof goog.math.Long;
};
cljs.core.pos_int_QMARK_ = function cljs$core$pos_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return x > 0;
  } else {
    if (x instanceof goog.math.Integer) {
      return cljs.core.not(x.isNegative()) && cljs.core.not(x.isZero());
    } else {
      if (x instanceof goog.math.Long) {
        return cljs.core.not(x.isNegative()) && cljs.core.not(x.isZero());
      } else {
        return false;
      }
    }
  }
};
cljs.core.neg_int_QMARK_ = function cljs$core$neg_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return x < 0;
  } else {
    if (x instanceof goog.math.Integer) {
      return x.isNegative();
    } else {
      if (x instanceof goog.math.Long) {
        return x.isNegative();
      } else {
        return false;
      }
    }
  }
};
cljs.core.nat_int_QMARK_ = function cljs$core$nat_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return !(x < 0) || x === 0;
  } else {
    if (x instanceof goog.math.Integer) {
      var or__7260__auto__ = cljs.core.not(x.isNegative());
      if (or__7260__auto__) {
        return or__7260__auto__;
      } else {
        return x.isZero();
      }
    } else {
      if (x instanceof goog.math.Long) {
        var or__7260__auto__ = cljs.core.not(x.isNegative());
        if (or__7260__auto__) {
          return or__7260__auto__;
        } else {
          return x.isZero();
        }
      } else {
        return false;
      }
    }
  }
};
cljs.core.float_QMARK_ = function cljs$core$float_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.double_QMARK_ = function cljs$core$double_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.infinite_QMARK_ = function cljs$core$infinite_QMARK_(x) {
  return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    if (cljs.core.ifind_QMARK_(coll)) {
      return cljs.core._find(coll, k);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
    }
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_(var_args) {
  var args10031 = [];
  var len__8373__auto___10037 = arguments.length;
  var i__8374__auto___10038 = 0;
  while (true) {
    if (i__8374__auto___10038 < len__8373__auto___10037) {
      args10031.push(arguments[i__8374__auto___10038]);
      var G__10039 = i__8374__auto___10038 + 1;
      i__8374__auto___10038 = G__10039;
      continue;
    } else {
    }
    break;
  }
  var G__10036 = args10031.length;
  switch(G__10036) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10031.slice(2), 0, null);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.createAsIfByAssoc([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__10041 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__10042 = etc;
          s = G__10041;
          xs = G__10042;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq10032) {
  var G__10033 = cljs.core.first(seq10032);
  var seq10032__$1 = cljs.core.next(seq10032);
  var G__10034 = cljs.core.first(seq10032__$1);
  var seq10032__$2 = cljs.core.next(seq10032__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__10033, G__10034, seq10032__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed(var_args) {
  var args10045 = [];
  var len__8373__auto___10048 = arguments.length;
  var i__8374__auto___10049 = 0;
  while (true) {
    if (i__8374__auto___10049 < len__8373__auto___10048) {
      args10045.push(arguments[i__8374__auto___10049]);
      var G__10050 = i__8374__auto___10049 + 1;
      i__8374__auto___10049 = G__10050;
      continue;
    } else {
    }
    break;
  }
  var G__10047 = args10045.length;
  switch(G__10047) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10045.length)].join(""));
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__10052 = xs;
      var G__10053 = ys;
      var G__10054 = len;
      var G__10055 = n + 1;
      xs = G__10052;
      ys = G__10053;
      len = G__10054;
      n = G__10055;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort(var_args) {
  var args10056 = [];
  var len__8373__auto___10061 = arguments.length;
  var i__8374__auto___10062 = 0;
  while (true) {
    if (i__8374__auto___10062 < len__8373__auto___10061) {
      args10056.push(arguments[i__8374__auto___10062]);
      var G__10063 = i__8374__auto___10062 + 1;
      i__8374__auto___10062 = G__10063;
      continue;
    } else {
    }
    break;
  }
  var G__10058 = args10056.length;
  switch(G__10058) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10056.length)].join(""));
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__10059_10065 = a;
    var G__10060_10066 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__10059_10065, G__10060_10066);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by(var_args) {
  var args10067 = [];
  var len__8373__auto___10070 = arguments.length;
  var i__8374__auto___10071 = 0;
  while (true) {
    if (i__8374__auto___10071 < len__8373__auto___10070) {
      args10067.push(arguments[i__8374__auto___10071]);
      var G__10072 = i__8374__auto___10071 + 1;
      i__8374__auto___10071 = G__10072;
      continue;
    } else {
    }
    break;
  }
  var G__10069 = args10067.length;
  switch(G__10069) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10067.length)].join(""));
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce(var_args) {
  var args10074 = [];
  var len__8373__auto___10082 = arguments.length;
  var i__8374__auto___10083 = 0;
  while (true) {
    if (i__8374__auto___10083 < len__8373__auto___10082) {
      args10074.push(arguments[i__8374__auto___10083]);
      var G__10084 = i__8374__auto___10083 + 1;
      i__8374__auto___10083 = G__10084;
      continue;
    } else {
    }
    break;
  }
  var G__10076 = args10074.length;
  switch(G__10076) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10074.length)].join(""));
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4655__auto__ = cljs.core.seq(coll);
  if (temp__4655__auto__) {
    var s = temp__4655__auto__;
    var G__10077 = f;
    var G__10078 = cljs.core.first(s);
    var G__10079 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__10077, G__10078, G__10079) : cljs.core.reduce.call(null, G__10077, G__10078, G__10079);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__10080 = val__$1;
        var G__10081 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10080, G__10081) : f.call(null, G__10080, G__10081);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__10086 = nval;
        var G__10087 = cljs.core.next(coll__$1);
        val__$1 = G__10086;
        coll__$1 = G__10087;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce(var_args) {
  var args10088 = [];
  var len__8373__auto___10093 = arguments.length;
  var i__8374__auto___10094 = 0;
  while (true) {
    if (i__8374__auto___10094 < len__8373__auto___10093) {
      args10088.push(arguments[i__8374__auto___10094]);
      var G__10095 = i__8374__auto___10094 + 1;
      i__8374__auto___10094 = G__10095;
      continue;
    } else {
    }
    break;
  }
  var G__10090 = args10088.length;
  switch(G__10090) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10088.length)].join(""));
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing(var_args) {
  var args10097 = [];
  var len__8373__auto___10100 = arguments.length;
  var i__8374__auto___10101 = 0;
  while (true) {
    if (i__8374__auto___10101 < len__8373__auto___10100) {
      args10097.push(arguments[i__8374__auto___10101]);
      var G__10102 = i__8374__auto___10101 + 1;
      i__8374__auto___10101 = G__10102;
      continue;
    } else {
    }
    break;
  }
  var G__10099 = args10097.length;
  switch(G__10099) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10097.length)].join(""));
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__10104 = null;
    var G__10104__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__10104__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__10104__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__10104 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__10104__0.call(this);
        case 1:
          return G__10104__1.call(this, x);
        case 2:
          return G__10104__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10104.cljs$core$IFn$_invoke$arity$0 = G__10104__0;
    G__10104.cljs$core$IFn$_invoke$arity$1 = G__10104__1;
    G__10104.cljs$core$IFn$_invoke$arity$2 = G__10104__2;
    return G__10104;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce(var_args) {
  var args10105 = [];
  var len__8373__auto___10108 = arguments.length;
  var i__8374__auto___10109 = 0;
  while (true) {
    if (i__8374__auto___10109 < len__8373__auto___10108) {
      args10105.push(arguments[i__8374__auto___10109]);
      var G__10110 = i__8374__auto___10109 + 1;
      i__8374__auto___10109 = G__10110;
      continue;
    } else {
    }
    break;
  }
  var G__10107 = args10105.length;
  switch(G__10107) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10105.length)].join(""));
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_(var_args) {
  var args10112 = [];
  var len__8373__auto___10118 = arguments.length;
  var i__8374__auto___10119 = 0;
  while (true) {
    if (i__8374__auto___10119 < len__8373__auto___10118) {
      args10112.push(arguments[i__8374__auto___10119]);
      var G__10120 = i__8374__auto___10119 + 1;
      i__8374__auto___10119 = G__10120;
      continue;
    } else {
    }
    break;
  }
  var G__10117 = args10112.length;
  switch(G__10117) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10112.slice(2), 0, null);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq10113) {
  var G__10114 = cljs.core.first(seq10113);
  var seq10113__$1 = cljs.core.next(seq10113);
  var G__10115 = cljs.core.first(seq10113__$1);
  var seq10113__$2 = cljs.core.next(seq10113__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__10114, G__10115, seq10113__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_(var_args) {
  var args10122 = [];
  var len__8373__auto___10128 = arguments.length;
  var i__8374__auto___10129 = 0;
  while (true) {
    if (i__8374__auto___10129 < len__8373__auto___10128) {
      args10122.push(arguments[i__8374__auto___10129]);
      var G__10130 = i__8374__auto___10129 + 1;
      i__8374__auto___10129 = G__10130;
      continue;
    } else {
    }
    break;
  }
  var G__10127 = args10122.length;
  switch(G__10127) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10122.slice(2), 0, null);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq10123) {
  var G__10124 = cljs.core.first(seq10123);
  var seq10123__$1 = cljs.core.next(seq10123);
  var G__10125 = cljs.core.first(seq10123__$1);
  var seq10123__$2 = cljs.core.next(seq10123__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__10124, G__10125, seq10123__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_(var_args) {
  var args10132 = [];
  var len__8373__auto___10138 = arguments.length;
  var i__8374__auto___10139 = 0;
  while (true) {
    if (i__8374__auto___10139 < len__8373__auto___10138) {
      args10132.push(arguments[i__8374__auto___10139]);
      var G__10140 = i__8374__auto___10139 + 1;
      i__8374__auto___10139 = G__10140;
      continue;
    } else {
    }
    break;
  }
  var G__10137 = args10132.length;
  switch(G__10137) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10132.slice(2), 0, null);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq10133) {
  var G__10134 = cljs.core.first(seq10133);
  var seq10133__$1 = cljs.core.next(seq10133);
  var G__10135 = cljs.core.first(seq10133__$1);
  var seq10133__$2 = cljs.core.next(seq10133__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__10134, G__10135, seq10133__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_(var_args) {
  var args10142 = [];
  var len__8373__auto___10148 = arguments.length;
  var i__8374__auto___10149 = 0;
  while (true) {
    if (i__8374__auto___10149 < len__8373__auto___10148) {
      args10142.push(arguments[i__8374__auto___10149]);
      var G__10150 = i__8374__auto___10149 + 1;
      i__8374__auto___10149 = G__10150;
      continue;
    } else {
    }
    break;
  }
  var G__10147 = args10142.length;
  switch(G__10147) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10142.slice(2), 0, null);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq10143) {
  var G__10144 = cljs.core.first(seq10143);
  var seq10143__$1 = cljs.core.next(seq10143);
  var G__10145 = cljs.core.first(seq10143__$1);
  var seq10143__$2 = cljs.core.next(seq10143__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__10144, G__10145, seq10143__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_(var_args) {
  var args10152 = [];
  var len__8373__auto___10158 = arguments.length;
  var i__8374__auto___10159 = 0;
  while (true) {
    if (i__8374__auto___10159 < len__8373__auto___10158) {
      args10152.push(arguments[i__8374__auto___10159]);
      var G__10160 = i__8374__auto___10159 + 1;
      i__8374__auto___10159 = G__10160;
      continue;
    } else {
    }
    break;
  }
  var G__10157 = args10152.length;
  switch(G__10157) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10152.slice(2), 0, null);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__10162 = y;
        var G__10163 = cljs.core.first(more);
        var G__10164 = cljs.core.next(more);
        x = G__10162;
        y = G__10163;
        more = G__10164;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq10153) {
  var G__10154 = cljs.core.first(seq10153);
  var seq10153__$1 = cljs.core.next(seq10153);
  var G__10155 = cljs.core.first(seq10153__$1);
  var seq10153__$2 = cljs.core.next(seq10153__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__10154, G__10155, seq10153__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_(var_args) {
  var args10165 = [];
  var len__8373__auto___10171 = arguments.length;
  var i__8374__auto___10172 = 0;
  while (true) {
    if (i__8374__auto___10172 < len__8373__auto___10171) {
      args10165.push(arguments[i__8374__auto___10172]);
      var G__10173 = i__8374__auto___10172 + 1;
      i__8374__auto___10172 = G__10173;
      continue;
    } else {
    }
    break;
  }
  var G__10170 = args10165.length;
  switch(G__10170) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10165.slice(2), 0, null);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__10175 = y;
        var G__10176 = cljs.core.first(more);
        var G__10177 = cljs.core.next(more);
        x = G__10175;
        y = G__10176;
        more = G__10177;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq10166) {
  var G__10167 = cljs.core.first(seq10166);
  var seq10166__$1 = cljs.core.next(seq10166);
  var G__10168 = cljs.core.first(seq10166__$1);
  var seq10166__$2 = cljs.core.next(seq10166__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__10167, G__10168, seq10166__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_(var_args) {
  var args10178 = [];
  var len__8373__auto___10184 = arguments.length;
  var i__8374__auto___10185 = 0;
  while (true) {
    if (i__8374__auto___10185 < len__8373__auto___10184) {
      args10178.push(arguments[i__8374__auto___10185]);
      var G__10186 = i__8374__auto___10185 + 1;
      i__8374__auto___10185 = G__10186;
      continue;
    } else {
    }
    break;
  }
  var G__10183 = args10178.length;
  switch(G__10183) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10178.slice(2), 0, null);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__10188 = y;
        var G__10189 = cljs.core.first(more);
        var G__10190 = cljs.core.next(more);
        x = G__10188;
        y = G__10189;
        more = G__10190;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq10179) {
  var G__10180 = cljs.core.first(seq10179);
  var seq10179__$1 = cljs.core.next(seq10179);
  var G__10181 = cljs.core.first(seq10179__$1);
  var seq10179__$2 = cljs.core.next(seq10179__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__10180, G__10181, seq10179__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_(var_args) {
  var args10191 = [];
  var len__8373__auto___10197 = arguments.length;
  var i__8374__auto___10198 = 0;
  while (true) {
    if (i__8374__auto___10198 < len__8373__auto___10197) {
      args10191.push(arguments[i__8374__auto___10198]);
      var G__10199 = i__8374__auto___10198 + 1;
      i__8374__auto___10198 = G__10199;
      continue;
    } else {
    }
    break;
  }
  var G__10196 = args10191.length;
  switch(G__10196) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10191.slice(2), 0, null);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__10201 = y;
        var G__10202 = cljs.core.first(more);
        var G__10203 = cljs.core.next(more);
        x = G__10201;
        y = G__10202;
        more = G__10203;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq10192) {
  var G__10193 = cljs.core.first(seq10192);
  var seq10192__$1 = cljs.core.next(seq10192);
  var G__10194 = cljs.core.first(seq10192__$1);
  var seq10192__$2 = cljs.core.next(seq10192__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__10193, G__10194, seq10192__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max(var_args) {
  var args10204 = [];
  var len__8373__auto___10210 = arguments.length;
  var i__8374__auto___10211 = 0;
  while (true) {
    if (i__8374__auto___10211 < len__8373__auto___10210) {
      args10204.push(arguments[i__8374__auto___10211]);
      var G__10212 = i__8374__auto___10211 + 1;
      i__8374__auto___10211 = G__10212;
      continue;
    } else {
    }
    break;
  }
  var G__10209 = args10204.length;
  switch(G__10209) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10204.slice(2), 0, null);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__7596__auto__ = x;
  var y__7597__auto__ = y;
  return x__7596__auto__ > y__7597__auto__ ? x__7596__auto__ : y__7597__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__7596__auto__ = x;
    var y__7597__auto__ = y;
    return x__7596__auto__ > y__7597__auto__ ? x__7596__auto__ : y__7597__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq10205) {
  var G__10206 = cljs.core.first(seq10205);
  var seq10205__$1 = cljs.core.next(seq10205);
  var G__10207 = cljs.core.first(seq10205__$1);
  var seq10205__$2 = cljs.core.next(seq10205__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__10206, G__10207, seq10205__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min(var_args) {
  var args10214 = [];
  var len__8373__auto___10220 = arguments.length;
  var i__8374__auto___10221 = 0;
  while (true) {
    if (i__8374__auto___10221 < len__8373__auto___10220) {
      args10214.push(arguments[i__8374__auto___10221]);
      var G__10222 = i__8374__auto___10221 + 1;
      i__8374__auto___10221 = G__10222;
      continue;
    } else {
    }
    break;
  }
  var G__10219 = args10214.length;
  switch(G__10219) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10214.slice(2), 0, null);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__7603__auto__ = x;
  var y__7604__auto__ = y;
  return x__7603__auto__ < y__7604__auto__ ? x__7603__auto__ : y__7604__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__7603__auto__ = x;
    var y__7604__auto__ = y;
    return x__7603__auto__ < y__7604__auto__ ? x__7603__auto__ : y__7604__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq10215) {
  var G__10216 = cljs.core.first(seq10215);
  var seq10215__$1 = cljs.core.next(seq10215);
  var G__10217 = cljs.core.first(seq10215__$1);
  var seq10215__$2 = cljs.core.next(seq10215__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__10216, G__10217, seq10215__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add(var_args) {
  var args10224 = [];
  var len__8373__auto___10230 = arguments.length;
  var i__8374__auto___10231 = 0;
  while (true) {
    if (i__8374__auto___10231 < len__8373__auto___10230) {
      args10224.push(arguments[i__8374__auto___10231]);
      var G__10232 = i__8374__auto___10231 + 1;
      i__8374__auto___10231 = G__10232;
      continue;
    } else {
    }
    break;
  }
  var G__10229 = args10224.length;
  switch(G__10229) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10224.slice(2), 0, null);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq10225) {
  var G__10226 = cljs.core.first(seq10225);
  var seq10225__$1 = cljs.core.next(seq10225);
  var G__10227 = cljs.core.first(seq10225__$1);
  var seq10225__$2 = cljs.core.next(seq10225__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__10226, G__10227, seq10225__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int(var_args) {
  var args10234 = [];
  var len__8373__auto___10240 = arguments.length;
  var i__8374__auto___10241 = 0;
  while (true) {
    if (i__8374__auto___10241 < len__8373__auto___10240) {
      args10234.push(arguments[i__8374__auto___10241]);
      var G__10242 = i__8374__auto___10241 + 1;
      i__8374__auto___10241 = G__10242;
      continue;
    } else {
    }
    break;
  }
  var G__10239 = args10234.length;
  switch(G__10239) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10234.slice(2), 0, null);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq10235) {
  var G__10236 = cljs.core.first(seq10235);
  var seq10235__$1 = cljs.core.next(seq10235);
  var G__10237 = cljs.core.first(seq10235__$1);
  var seq10235__$2 = cljs.core.next(seq10235__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__10236, G__10237, seq10235__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int(var_args) {
  var args10244 = [];
  var len__8373__auto___10250 = arguments.length;
  var i__8374__auto___10251 = 0;
  while (true) {
    if (i__8374__auto___10251 < len__8373__auto___10250) {
      args10244.push(arguments[i__8374__auto___10251]);
      var G__10252 = i__8374__auto___10251 + 1;
      i__8374__auto___10251 = G__10252;
      continue;
    } else {
    }
    break;
  }
  var G__10249 = args10244.length;
  switch(G__10249) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10244.slice(2), 0, null);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq10245) {
  var G__10246 = cljs.core.first(seq10245);
  var seq10245__$1 = cljs.core.next(seq10245);
  var G__10247 = cljs.core.first(seq10245__$1);
  var seq10245__$2 = cljs.core.next(seq10245__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__10246, G__10247, seq10245__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply(var_args) {
  var args10254 = [];
  var len__8373__auto___10260 = arguments.length;
  var i__8374__auto___10261 = 0;
  while (true) {
    if (i__8374__auto___10261 < len__8373__auto___10260) {
      args10254.push(arguments[i__8374__auto___10261]);
      var G__10262 = i__8374__auto___10261 + 1;
      i__8374__auto___10261 = G__10262;
      continue;
    } else {
    }
    break;
  }
  var G__10259 = args10254.length;
  switch(G__10259) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10254.slice(2), 0, null);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq10255) {
  var G__10256 = cljs.core.first(seq10255);
  var seq10255__$1 = cljs.core.next(seq10255);
  var G__10257 = cljs.core.first(seq10255__$1);
  var seq10255__$2 = cljs.core.next(seq10255__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__10256, G__10257, seq10255__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int(var_args) {
  var args10264 = [];
  var len__8373__auto___10270 = arguments.length;
  var i__8374__auto___10271 = 0;
  while (true) {
    if (i__8374__auto___10271 < len__8373__auto___10270) {
      args10264.push(arguments[i__8374__auto___10271]);
      var G__10272 = i__8374__auto___10271 + 1;
      i__8374__auto___10271 = G__10272;
      continue;
    } else {
    }
    break;
  }
  var G__10269 = args10264.length;
  switch(G__10269) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10264.slice(2), 0, null);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq10265) {
  var G__10266 = cljs.core.first(seq10265);
  var seq10265__$1 = cljs.core.next(seq10265);
  var G__10267 = cljs.core.first(seq10265__$1);
  var seq10265__$2 = cljs.core.next(seq10265__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__10266, G__10267, seq10265__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract(var_args) {
  var args10274 = [];
  var len__8373__auto___10280 = arguments.length;
  var i__8374__auto___10281 = 0;
  while (true) {
    if (i__8374__auto___10281 < len__8373__auto___10280) {
      args10274.push(arguments[i__8374__auto___10281]);
      var G__10282 = i__8374__auto___10281 + 1;
      i__8374__auto___10281 = G__10282;
      continue;
    } else {
    }
    break;
  }
  var G__10279 = args10274.length;
  switch(G__10279) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10274.slice(2), 0, null);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq10275) {
  var G__10276 = cljs.core.first(seq10275);
  var seq10275__$1 = cljs.core.next(seq10275);
  var G__10277 = cljs.core.first(seq10275__$1);
  var seq10275__$2 = cljs.core.next(seq10275__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__10276, G__10277, seq10275__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int(var_args) {
  var args10284 = [];
  var len__8373__auto___10290 = arguments.length;
  var i__8374__auto___10291 = 0;
  while (true) {
    if (i__8374__auto___10291 < len__8373__auto___10290) {
      args10284.push(arguments[i__8374__auto___10291]);
      var G__10292 = i__8374__auto___10291 + 1;
      i__8374__auto___10291 = G__10292;
      continue;
    } else {
    }
    break;
  }
  var G__10289 = args10284.length;
  switch(G__10289) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10284.slice(2), 0, null);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq10285) {
  var G__10286 = cljs.core.first(seq10285);
  var seq10285__$1 = cljs.core.next(seq10285);
  var G__10287 = cljs.core.first(seq10285__$1);
  var seq10285__$2 = cljs.core.next(seq10285__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__10286, G__10287, seq10285__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor(var_args) {
  var args10294 = [];
  var len__8373__auto___10300 = arguments.length;
  var i__8374__auto___10301 = 0;
  while (true) {
    if (i__8374__auto___10301 < len__8373__auto___10300) {
      args10294.push(arguments[i__8374__auto___10301]);
      var G__10302 = i__8374__auto___10301 + 1;
      i__8374__auto___10301 = G__10302;
      continue;
    } else {
    }
    break;
  }
  var G__10299 = args10294.length;
  switch(G__10299) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10294.slice(2), 0, null);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq10295) {
  var G__10296 = cljs.core.first(seq10295);
  var seq10295__$1 = cljs.core.next(seq10295);
  var G__10297 = cljs.core.first(seq10295__$1);
  var seq10295__$2 = cljs.core.next(seq10295__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__10296, G__10297, seq10295__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and(var_args) {
  var args10304 = [];
  var len__8373__auto___10310 = arguments.length;
  var i__8374__auto___10311 = 0;
  while (true) {
    if (i__8374__auto___10311 < len__8373__auto___10310) {
      args10304.push(arguments[i__8374__auto___10311]);
      var G__10312 = i__8374__auto___10311 + 1;
      i__8374__auto___10311 = G__10312;
      continue;
    } else {
    }
    break;
  }
  var G__10309 = args10304.length;
  switch(G__10309) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10304.slice(2), 0, null);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq10305) {
  var G__10306 = cljs.core.first(seq10305);
  var seq10305__$1 = cljs.core.next(seq10305);
  var G__10307 = cljs.core.first(seq10305__$1);
  var seq10305__$2 = cljs.core.next(seq10305__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__10306, G__10307, seq10305__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or(var_args) {
  var args10314 = [];
  var len__8373__auto___10320 = arguments.length;
  var i__8374__auto___10321 = 0;
  while (true) {
    if (i__8374__auto___10321 < len__8373__auto___10320) {
      args10314.push(arguments[i__8374__auto___10321]);
      var G__10322 = i__8374__auto___10321 + 1;
      i__8374__auto___10321 = G__10322;
      continue;
    } else {
    }
    break;
  }
  var G__10319 = args10314.length;
  switch(G__10319) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10314.slice(2), 0, null);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq10315) {
  var G__10316 = cljs.core.first(seq10315);
  var seq10315__$1 = cljs.core.next(seq10315);
  var G__10317 = cljs.core.first(seq10315__$1);
  var seq10315__$2 = cljs.core.next(seq10315__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__10316, G__10317, seq10315__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not(var_args) {
  var args10324 = [];
  var len__8373__auto___10330 = arguments.length;
  var i__8374__auto___10331 = 0;
  while (true) {
    if (i__8374__auto___10331 < len__8373__auto___10330) {
      args10324.push(arguments[i__8374__auto___10331]);
      var G__10332 = i__8374__auto___10331 + 1;
      i__8374__auto___10331 = G__10332;
      continue;
    } else {
    }
    break;
  }
  var G__10329 = args10324.length;
  switch(G__10329) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10324.slice(2), 0, null);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq10325) {
  var G__10326 = cljs.core.first(seq10325);
  var seq10325__$1 = cljs.core.next(seq10325);
  var G__10327 = cljs.core.first(seq10325__$1);
  var seq10325__$2 = cljs.core.next(seq10325__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__10326, G__10327, seq10325__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_(var_args) {
  var args10334 = [];
  var len__8373__auto___10340 = arguments.length;
  var i__8374__auto___10341 = 0;
  while (true) {
    if (i__8374__auto___10341 < len__8373__auto___10340) {
      args10334.push(arguments[i__8374__auto___10341]);
      var G__10342 = i__8374__auto___10341 + 1;
      i__8374__auto___10341 = G__10342;
      continue;
    } else {
    }
    break;
  }
  var G__10339 = args10334.length;
  switch(G__10339) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10334.slice(2), 0, null);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__10344 = y;
        var G__10345 = cljs.core.first(more);
        var G__10346 = cljs.core.next(more);
        x = G__10344;
        y = G__10345;
        more = G__10346;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq10335) {
  var G__10336 = cljs.core.first(seq10335);
  var seq10335__$1 = cljs.core.next(seq10335);
  var G__10337 = cljs.core.first(seq10335__$1);
  var seq10335__$2 = cljs.core.next(seq10335__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__10336, G__10337, seq10335__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(x) {
  return x > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(x) {
  return x === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__10347 = n__$1 - 1;
      var G__10348 = cljs.core.next(xs);
      n__$1 = G__10347;
      xs = G__10348;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str(var_args) {
  var args10349 = [];
  var len__8373__auto___10354 = arguments.length;
  var i__8374__auto___10355 = 0;
  while (true) {
    if (i__8374__auto___10355 < len__8373__auto___10354) {
      args10349.push(arguments[i__8374__auto___10355]);
      var G__10356 = i__8374__auto___10355 + 1;
      i__8374__auto___10355 = G__10356;
      continue;
    } else {
    }
    break;
  }
  var G__10353 = args10349.length;
  switch(G__10353) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10349.slice(1), 0, null);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8392__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__10358 = sb.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more))].join(""));
      var G__10359 = cljs.core.next(more);
      sb = G__10358;
      more = G__10359;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq10350) {
  var G__10351 = cljs.core.first(seq10350);
  var seq10350__$1 = cljs.core.next(seq10350);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__10351, seq10350__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs(var_args) {
  var args10360 = [];
  var len__8373__auto___10363 = arguments.length;
  var i__8374__auto___10364 = 0;
  while (true) {
    if (i__8374__auto___10364 < len__8373__auto___10363) {
      args10360.push(arguments[i__8374__auto___10364]);
      var G__10365 = i__8374__auto___10364 + 1;
      i__8374__auto___10364 = G__10365;
      continue;
    } else {
    }
    break;
  }
  var G__10362 = args10360.length;
  switch(G__10362) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10360.length)].join(""));
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__10367 = cljs.core.next(xs);
            var G__10368 = cljs.core.next(ys);
            xs = G__10367;
            ys = G__10368;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__10369 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__10370 = cljs.core.next(s);
        res = G__10369;
        s = G__10370;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__10371 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__10372 = cljs.core.next(s);
      h = G__10371;
      s = G__10372;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__10373 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__10374 = cljs.core.next(s__$1);
      h = G__10373;
      s__$1 = G__10374;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__10385_10395 = cljs.core.seq(fn_map);
  var chunk__10386_10396 = null;
  var count__10387_10397 = 0;
  var i__10388_10398 = 0;
  while (true) {
    if (i__10388_10398 < count__10387_10397) {
      var vec__10389_10399 = chunk__10386_10396.cljs$core$IIndexed$_nth$arity$2(null, i__10388_10398);
      var key_name_10400 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10389_10399, 0, null);
      var f_10401 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10389_10399, 1, null);
      var str_name_10402 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_10400) : cljs.core.name.call(null, key_name_10400);
      obj[str_name_10402] = f_10401;
      var G__10403 = seq__10385_10395;
      var G__10404 = chunk__10386_10396;
      var G__10405 = count__10387_10397;
      var G__10406 = i__10388_10398 + 1;
      seq__10385_10395 = G__10403;
      chunk__10386_10396 = G__10404;
      count__10387_10397 = G__10405;
      i__10388_10398 = G__10406;
      continue;
    } else {
      var temp__4657__auto___10407 = cljs.core.seq(seq__10385_10395);
      if (temp__4657__auto___10407) {
        var seq__10385_10408__$1 = temp__4657__auto___10407;
        if (cljs.core.chunked_seq_QMARK_(seq__10385_10408__$1)) {
          var c__8079__auto___10409 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__10385_10408__$1) : cljs.core.chunk_first.call(null, seq__10385_10408__$1);
          var G__10410 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__10385_10408__$1) : cljs.core.chunk_rest.call(null, seq__10385_10408__$1);
          var G__10411 = c__8079__auto___10409;
          var G__10412 = cljs.core.count(c__8079__auto___10409);
          var G__10413 = 0;
          seq__10385_10395 = G__10410;
          chunk__10386_10396 = G__10411;
          count__10387_10397 = G__10412;
          i__10388_10398 = G__10413;
          continue;
        } else {
          var vec__10392_10414 = cljs.core.first(seq__10385_10408__$1);
          var key_name_10415 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10392_10414, 0, null);
          var f_10416 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10392_10414, 1, null);
          var str_name_10417 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_10415) : cljs.core.name.call(null, key_name_10415);
          obj[str_name_10417] = f_10416;
          var G__10418 = cljs.core.next(seq__10385_10408__$1);
          var G__10419 = null;
          var G__10420 = 0;
          var G__10421 = 0;
          seq__10385_10395 = G__10418;
          chunk__10386_10396 = G__10419;
          count__10387_10397 = G__10420;
          i__10388_10398 = G__10421;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.indexOf = function() {
  var G__10422 = null;
  var G__10422__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10422__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10422 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10422__1.call(this, x);
      case 2:
        return G__10422__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10422.cljs$core$IFn$_invoke$arity$1 = G__10422__1;
  G__10422.cljs$core$IFn$_invoke$arity$2 = G__10422__2;
  return G__10422;
}();
cljs.core.List.prototype.lastIndexOf = function() {
  var G__10423 = null;
  var G__10423__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count);
  };
  var G__10423__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10423 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10423__1.call(this, x);
      case 2:
        return G__10423__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10423.cljs$core$IFn$_invoke$arity$1 = G__10423__1;
  G__10423.cljs$core$IFn$_invoke$arity$2 = G__10423__2;
  return G__10423;
}();
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ISeq$_rest$arity$1(null);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.indexOf = function() {
  var G__10426 = null;
  var G__10426__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10426__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10426 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10426__1.call(this, x);
      case 2:
        return G__10426__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10426.cljs$core$IFn$_invoke$arity$1 = G__10426__1;
  G__10426.cljs$core$IFn$_invoke$arity$2 = G__10426__2;
  return G__10426;
}();
cljs.core.EmptyList.prototype.lastIndexOf = function() {
  var G__10427 = null;
  var G__10427__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10427__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10427 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10427__1.call(this, x);
      case 2:
        return G__10427__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10427.cljs$core$IFn$_invoke$arity$1 = G__10427__1;
  G__10427.cljs$core$IFn$_invoke$arity$2 = G__10427__2;
  return G__10427;
}();
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(rev) {
  return cljs.core._rseq(rev);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___10431 = arguments.length;
  var i__8374__auto___10432 = 0;
  while (true) {
    if (i__8374__auto___10432 < len__8373__auto___10431) {
      args__8380__auto__.push(arguments[i__8374__auto___10432]);
      var G__10433 = i__8374__auto___10432 + 1;
      i__8374__auto___10432 = G__10433;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__10434 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__10434;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__10435 = i - 1;
      var G__10436 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__10435;
      r = G__10436;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq10430) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10430));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.indexOf = function() {
  var G__10437 = null;
  var G__10437__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10437__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10437 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10437__1.call(this, x);
      case 2:
        return G__10437__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10437.cljs$core$IFn$_invoke$arity$1 = G__10437__1;
  G__10437.cljs$core$IFn$_invoke$arity$2 = G__10437__2;
  return G__10437;
}();
cljs.core.Cons.prototype.lastIndexOf = function() {
  var G__10438 = null;
  var G__10438__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10438__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10438 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10438__1.call(this, x);
      case 2:
        return G__10438__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10438.cljs$core$IFn$_invoke$arity$1 = G__10438__1;
  G__10438.cljs$core$IFn$_invoke$arity$2 = G__10438__2;
  return G__10438;
}();
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, null);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__7260__auto__ = coll == null;
    if (or__7260__auto__) {
      return or__7260__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = cljs.core.not(a.ns);
      if (and__7248__auto__) {
        return b.ns;
      } else {
        return and__7248__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__10449 = a.ns;
            var G__10450 = b.ns;
            return goog.array.defaultCompare(G__10449, G__10450);
          }();
          if (0 === nsc) {
            var G__10451 = a.name;
            var G__10452 = b.name;
            return goog.array.defaultCompare(G__10451, G__10452);
          } else {
            return nsc;
          }
        }
      } else {
        var G__10453 = a.name;
        var G__10454 = b.name;
        return goog.array.defaultCompare(G__10453, G__10454);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__10456 = null;
  var G__10456__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__10456__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__10456 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10456__2.call(this, self__, coll);
      case 3:
        return G__10456__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10456.cljs$core$IFn$_invoke$arity$2 = G__10456__2;
  G__10456.cljs$core$IFn$_invoke$arity$3 = G__10456__3;
  return G__10456;
}();
cljs.core.Keyword.prototype.apply = function(self__, args10455) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10455)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__7700__auto__ = self__._hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Doesn't support namespace: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
  }
};
cljs.core.ident_QMARK_ = function cljs$core$ident_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
cljs.core.simple_ident_QMARK_ = function cljs$core$simple_ident_QMARK_(x) {
  return cljs.core.ident_QMARK_(x) && cljs.core.namespace(x) == null;
};
cljs.core.qualified_ident_QMARK_ = function cljs$core$qualified_ident_QMARK_(x) {
  var and__7248__auto__ = cljs.core.ident_QMARK_(x);
  if (and__7248__auto__) {
    var and__7248__auto____$1 = cljs.core.namespace(x);
    if (cljs.core.truth_(and__7248__auto____$1)) {
      return true;
    } else {
      return and__7248__auto____$1;
    }
  } else {
    return and__7248__auto__;
  }
};
cljs.core.simple_symbol_QMARK_ = function cljs$core$simple_symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol && cljs.core.namespace(x) == null;
};
cljs.core.qualified_symbol_QMARK_ = function cljs$core$qualified_symbol_QMARK_(x) {
  var and__7248__auto__ = x instanceof cljs.core.Symbol;
  if (and__7248__auto__) {
    var and__7248__auto____$1 = cljs.core.namespace(x);
    if (cljs.core.truth_(and__7248__auto____$1)) {
      return true;
    } else {
      return and__7248__auto____$1;
    }
  } else {
    return and__7248__auto__;
  }
};
cljs.core.simple_keyword_QMARK_ = function cljs$core$simple_keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword && cljs.core.namespace(x) == null;
};
cljs.core.qualified_keyword_QMARK_ = function cljs$core$qualified_keyword_QMARK_(x) {
  var and__7248__auto__ = x instanceof cljs.core.Keyword;
  if (and__7248__auto__) {
    var and__7248__auto____$1 = cljs.core.namespace(x);
    if (cljs.core.truth_(and__7248__auto____$1)) {
      return true;
    } else {
      return and__7248__auto____$1;
    }
  } else {
    return and__7248__auto__;
  }
};
cljs.core.keyword = function cljs$core$keyword(var_args) {
  var args10459 = [];
  var len__8373__auto___10462 = arguments.length;
  var i__8374__auto___10463 = 0;
  while (true) {
    if (i__8374__auto___10463 < len__8373__auto___10462) {
      args10459.push(arguments[i__8374__auto___10463]);
      var G__10464 = i__8374__auto___10463 + 1;
      i__8374__auto___10463 = G__10464;
      continue;
    } else {
    }
    break;
  }
  var G__10461 = args10459.length;
  switch(G__10461) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10459.length)].join(""));
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var ns__$1 = ns instanceof cljs.core.Keyword ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(ns) : cljs.core.name.call(null, ns) : ns instanceof cljs.core.Symbol ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(ns) : cljs.core.name.call(null, ns) : ns;
  var name__$1 = name instanceof cljs.core.Keyword ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name) : name instanceof cljs.core.Symbol ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name) : name;
  return new cljs.core.Keyword(ns__$1, name__$1, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns__$1) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1("/")].join("") : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__$1)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.indexOf = function() {
  var G__10466 = null;
  var G__10466__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10466__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10466 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10466__1.call(this, x);
      case 2:
        return G__10466__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10466.cljs$core$IFn$_invoke$arity$1 = G__10466__1;
  G__10466.cljs$core$IFn$_invoke$arity$2 = G__10466__2;
  return G__10466;
}();
cljs.core.LazySeq.prototype.lastIndexOf = function() {
  var G__10467 = null;
  var G__10467__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10467__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10467 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10467__1.call(this, x);
      case 2:
        return G__10467__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10467.cljs$core$IFn$_invoke$arity$1 = G__10467__1;
  G__10467.cljs$core$IFn$_invoke$arity$2 = G__10467__2;
  return G__10467;
}();
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.not(self__.fn);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__10468 = ls.sval();
        ls = G__10468;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk(var_args) {
  var args10469 = [];
  var len__8373__auto___10472 = arguments.length;
  var i__8374__auto___10473 = 0;
  while (true) {
    if (i__8374__auto___10473 < len__8373__auto___10472) {
      args10469.push(arguments[i__8374__auto___10473]);
      var G__10474 = i__8374__auto___10473 + 1;
      i__8374__auto___10473 = G__10474;
      continue;
    } else {
    }
    break;
  }
  var G__10471 = args10469.length;
  switch(G__10471) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10469.length)].join(""));
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.indexOf = function() {
  var G__10476 = null;
  var G__10476__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10476__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10476 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10476__1.call(this, x);
      case 2:
        return G__10476__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10476.cljs$core$IFn$_invoke$arity$1 = G__10476__1;
  G__10476.cljs$core$IFn$_invoke$arity$2 = G__10476__2;
  return G__10476;
}();
cljs.core.ChunkedCons.prototype.lastIndexOf = function() {
  var G__10477 = null;
  var G__10477__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10477__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10477 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10477__1.call(this, x);
      case 2:
        return G__10477__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10477.cljs$core$IFn$_invoke$arity$1 = G__10477__1;
  G__10477.cljs$core$IFn$_invoke$arity$2 = G__10477__2;
  return G__10477;
}();
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__10480 = cljs.core.next(s__$1);
      s__$1 = G__10480;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_10481 = 0;
  var xs_10482 = cljs.core.seq(coll);
  while (true) {
    if (xs_10482) {
      ret[i_10481] = cljs.core.to_array(cljs.core.first(xs_10482));
      var G__10483 = i_10481 + 1;
      var G__10484 = cljs.core.next(xs_10482);
      i_10481 = G__10483;
      xs_10482 = G__10484;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array(var_args) {
  var args10485 = [];
  var len__8373__auto___10488 = arguments.length;
  var i__8374__auto___10489 = 0;
  while (true) {
    if (i__8374__auto___10489 < len__8373__auto___10488) {
      args10485.push(arguments[i__8374__auto___10489]);
      var G__10490 = i__8374__auto___10489 + 1;
      i__8374__auto___10489 = G__10490;
      continue;
    } else {
    }
    break;
  }
  var G__10487 = args10485.length;
  switch(G__10487) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10485.length)].join(""));
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__10492 = i + 1;
        var G__10493 = cljs.core.next(s__$1);
        i = G__10492;
        s__$1 = G__10493;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__8183__auto___10494 = size;
    var i_10495 = 0;
    while (true) {
      if (i_10495 < n__8183__auto___10494) {
        a[i_10495] = init_val_or_seq;
        var G__10496 = i_10495 + 1;
        i_10495 = G__10496;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array(var_args) {
  var args10497 = [];
  var len__8373__auto___10500 = arguments.length;
  var i__8374__auto___10501 = 0;
  while (true) {
    if (i__8374__auto___10501 < len__8373__auto___10500) {
      args10497.push(arguments[i__8374__auto___10501]);
      var G__10502 = i__8374__auto___10501 + 1;
      i__8374__auto___10501 = G__10502;
      continue;
    } else {
    }
    break;
  }
  var G__10499 = args10497.length;
  switch(G__10499) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10497.length)].join(""));
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__10504 = i + 1;
        var G__10505 = cljs.core.next(s__$1);
        i = G__10504;
        s__$1 = G__10505;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__8183__auto___10506 = size;
    var i_10507 = 0;
    while (true) {
      if (i_10507 < n__8183__auto___10506) {
        a[i_10507] = init_val_or_seq;
        var G__10508 = i_10507 + 1;
        i_10507 = G__10508;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array(var_args) {
  var args10509 = [];
  var len__8373__auto___10512 = arguments.length;
  var i__8374__auto___10513 = 0;
  while (true) {
    if (i__8374__auto___10513 < len__8373__auto___10512) {
      args10509.push(arguments[i__8374__auto___10513]);
      var G__10514 = i__8374__auto___10513 + 1;
      i__8374__auto___10513 = G__10514;
      continue;
    } else {
    }
    break;
  }
  var G__10511 = args10509.length;
  switch(G__10511) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10509.length)].join(""));
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__10516 = i + 1;
        var G__10517 = cljs.core.next(s__$1);
        i = G__10516;
        s__$1 = G__10517;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__8183__auto___10518 = size;
    var i_10519 = 0;
    while (true) {
      if (i_10519 < n__8183__auto___10518) {
        a[i_10519] = init_val_or_seq;
        var G__10520 = i_10519 + 1;
        i_10519 = G__10520;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array(var_args) {
  var args10521 = [];
  var len__8373__auto___10524 = arguments.length;
  var i__8374__auto___10525 = 0;
  while (true) {
    if (i__8374__auto___10525 < len__8373__auto___10524) {
      args10521.push(arguments[i__8374__auto___10525]);
      var G__10526 = i__8374__auto___10525 + 1;
      i__8374__auto___10525 = G__10526;
      continue;
    } else {
    }
    break;
  }
  var G__10523 = args10521.length;
  switch(G__10523) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10521.length)].join(""));
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__10528 = i + 1;
        var G__10529 = cljs.core.next(s__$1);
        i = G__10528;
        s__$1 = G__10529;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__8183__auto___10530 = size;
    var i_10531 = 0;
    while (true) {
      if (i_10531 < n__8183__auto___10530) {
        a[i_10531] = init_val_or_seq;
        var G__10532 = i_10531 + 1;
        i_10531 = G__10532;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(n, coll) {
  if (cljs.core.counted_QMARK_(coll)) {
    return cljs.core.count(coll);
  } else {
    var i = 0;
    var s = cljs.core.seq(coll);
    while (true) {
      if (!(s == null) && i < n) {
        var G__10533 = i + 1;
        var G__10534 = cljs.core.next(s);
        i = G__10533;
        s = G__10534;
        continue;
      } else {
        return i;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), function() {
        var G__10536 = cljs.core.next(arglist);
        return cljs.core.spread.cljs$core$IFn$_invoke$arity$1 ? cljs.core.spread.cljs$core$IFn$_invoke$arity$1(G__10536) : cljs.core.spread.call(null, G__10536);
      }());
    }
  }
};
cljs.core.concat = function cljs$core$concat(var_args) {
  var args10537 = [];
  var len__8373__auto___10549 = arguments.length;
  var i__8374__auto___10550 = 0;
  while (true) {
    if (i__8374__auto___10550 < len__8373__auto___10549) {
      args10537.push(arguments[i__8374__auto___10550]);
      var G__10551 = i__8374__auto___10550 + 1;
      i__8374__auto___10550 = G__10551;
      continue;
    } else {
    }
    break;
  }
  var G__10542 = args10537.length;
  switch(G__10542) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10537.slice(2), 0, null);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq10538) {
  var G__10539 = cljs.core.first(seq10538);
  var seq10538__$1 = cljs.core.next(seq10538);
  var G__10540 = cljs.core.first(seq10538__$1);
  var seq10538__$2 = cljs.core.next(seq10538__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__10539, G__10540, seq10538__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_(var_args) {
  var args10553 = [];
  var len__8373__auto___10561 = arguments.length;
  var i__8374__auto___10562 = 0;
  while (true) {
    if (i__8374__auto___10562 < len__8373__auto___10561) {
      args10553.push(arguments[i__8374__auto___10562]);
      var G__10563 = i__8374__auto___10562 + 1;
      i__8374__auto___10562 = G__10563;
      continue;
    } else {
    }
    break;
  }
  var G__10560 = args10553.length;
  switch(G__10560) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10553.slice(4), 0, null);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8392__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq10554) {
  var G__10555 = cljs.core.first(seq10554);
  var seq10554__$1 = cljs.core.next(seq10554);
  var G__10556 = cljs.core.first(seq10554__$1);
  var seq10554__$2 = cljs.core.next(seq10554__$1);
  var G__10557 = cljs.core.first(seq10554__$2);
  var seq10554__$3 = cljs.core.next(seq10554__$2);
  var G__10558 = cljs.core.first(seq10554__$3);
  var seq10554__$4 = cljs.core.next(seq10554__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__10555, G__10556, G__10557, G__10558, seq10554__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_(var_args) {
  var args10565 = [];
  var len__8373__auto___10571 = arguments.length;
  var i__8374__auto___10572 = 0;
  while (true) {
    if (i__8374__auto___10572 < len__8373__auto___10571) {
      args10565.push(arguments[i__8374__auto___10572]);
      var G__10573 = i__8374__auto___10572 + 1;
      i__8374__auto___10572 = G__10573;
      continue;
    } else {
    }
    break;
  }
  var G__10570 = args10565.length;
  switch(G__10570) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10565.slice(2), 0, null);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(tcoll) {
  return tcoll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__10575 = ntcoll;
      var G__10576 = cljs.core.first(vals);
      var G__10577 = cljs.core.next(vals);
      tcoll = G__10575;
      val = G__10576;
      vals = G__10577;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq10566) {
  var G__10567 = cljs.core.first(seq10566);
  var seq10566__$1 = cljs.core.next(seq10566);
  var G__10568 = cljs.core.first(seq10566__$1);
  var seq10566__$2 = cljs.core.next(seq10566__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10567, G__10568, seq10566__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_(var_args) {
  var args10578 = [];
  var len__8373__auto___10585 = arguments.length;
  var i__8374__auto___10586 = 0;
  while (true) {
    if (i__8374__auto___10586 < len__8373__auto___10585) {
      args10578.push(arguments[i__8374__auto___10586]);
      var G__10587 = i__8374__auto___10586 + 1;
      i__8374__auto___10586 = G__10587;
      continue;
    } else {
    }
    break;
  }
  var G__10584 = args10578.length;
  switch(G__10584) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10578.slice(3), 0, null);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__10589 = ntcoll;
      var G__10590 = cljs.core.first(kvs);
      var G__10591 = cljs.core.second(kvs);
      var G__10592 = cljs.core.nnext(kvs);
      tcoll = G__10589;
      key = G__10590;
      val = G__10591;
      kvs = G__10592;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq10579) {
  var G__10580 = cljs.core.first(seq10579);
  var seq10579__$1 = cljs.core.next(seq10579);
  var G__10581 = cljs.core.first(seq10579__$1);
  var seq10579__$2 = cljs.core.next(seq10579__$1);
  var G__10582 = cljs.core.first(seq10579__$2);
  var seq10579__$3 = cljs.core.next(seq10579__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10580, G__10581, G__10582, seq10579__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_(var_args) {
  var args10593 = [];
  var len__8373__auto___10599 = arguments.length;
  var i__8374__auto___10600 = 0;
  while (true) {
    if (i__8374__auto___10600 < len__8373__auto___10599) {
      args10593.push(arguments[i__8374__auto___10600]);
      var G__10601 = i__8374__auto___10600 + 1;
      i__8374__auto___10600 = G__10601;
      continue;
    } else {
    }
    break;
  }
  var G__10598 = args10593.length;
  switch(G__10598) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10593.slice(2), 0, null);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__10603 = ntcoll;
      var G__10604 = cljs.core.first(ks);
      var G__10605 = cljs.core.next(ks);
      tcoll = G__10603;
      key = G__10604;
      ks = G__10605;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq10594) {
  var G__10595 = cljs.core.first(seq10594);
  var seq10594__$1 = cljs.core.next(seq10594);
  var G__10596 = cljs.core.first(seq10594__$1);
  var seq10594__$2 = cljs.core.next(seq10594__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10595, G__10596, seq10594__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_(var_args) {
  var args10606 = [];
  var len__8373__auto___10612 = arguments.length;
  var i__8374__auto___10613 = 0;
  while (true) {
    if (i__8374__auto___10613 < len__8373__auto___10612) {
      args10606.push(arguments[i__8374__auto___10613]);
      var G__10614 = i__8374__auto___10613 + 1;
      i__8374__auto___10613 = G__10614;
      continue;
    } else {
    }
    break;
  }
  var G__10611 = args10606.length;
  switch(G__10611) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10606.slice(2), 0, null);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__10616 = ntcoll;
      var G__10617 = cljs.core.first(vals);
      var G__10618 = cljs.core.next(vals);
      tcoll = G__10616;
      val = G__10617;
      vals = G__10618;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq10607) {
  var G__10608 = cljs.core.first(seq10607);
  var seq10607__$1 = cljs.core.next(seq10607);
  var G__10609 = cljs.core.first(seq10607__$1);
  var seq10607__$2 = cljs.core.next(seq10607__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10608, G__10609, seq10607__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a8227 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a8227);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a8227) : f.call(null, a8227);
      }
    } else {
      var b8228 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a8227, b8228);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a8227, b8228) : f.call(null, a8227, b8228);
        }
      } else {
        var c8229 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a8227, b8228, c8229);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a8227, b8228, c8229) : f.call(null, a8227, b8228, c8229);
          }
        } else {
          var d8230 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a8227, b8228, c8229, d8230);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a8227, b8228, c8229, d8230) : f.call(null, a8227, b8228, c8229, d8230);
            }
          } else {
            var e8231 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a8227, b8228, c8229, d8230, e8231);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a8227, b8228, c8229, d8230, e8231) : f.call(null, a8227, b8228, c8229, d8230, e8231);
              }
            } else {
              var f8232 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a8227, b8228, c8229, d8230, e8231, f8232);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a8227, b8228, c8229, d8230, e8231, f8232) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232);
                }
              } else {
                var g8233 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a8227, b8228, c8229, d8230, e8231, f8232, g8233);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a8227, b8228, c8229, d8230, e8231, f8232, g8233) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233);
                  }
                } else {
                  var h8234 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234);
                    }
                  } else {
                    var i8235 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235);
                      }
                    } else {
                      var j8236 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236);
                        }
                      } else {
                        var k8237 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237);
                          }
                        } else {
                          var l8238 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238);
                            }
                          } else {
                            var m8239 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239);
                              }
                            } else {
                              var n8240 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240);
                                }
                              } else {
                                var o8241 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241);
                                  }
                                } else {
                                  var p8242 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242);
                                    }
                                  } else {
                                    var q8243 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243);
                                      }
                                    } else {
                                      var r8244 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244);
                                        }
                                      } else {
                                        var s8245 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244, s8245);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244, s8245) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244, s8245);
                                          }
                                        } else {
                                          var t8246 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244, s8245, t8246);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244, s8245, t8246) : f.call(null, a8227, b8228, c8229, d8230, e8231, f8232, g8233, h8234, i8235, j8236, k8237, l8238, m8239, n8240, o8241, p8242, q8243, r8244, s8245, t8246);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply(var_args) {
  var args10619 = [];
  var len__8373__auto___10628 = arguments.length;
  var i__8374__auto___10629 = 0;
  while (true) {
    if (i__8374__auto___10629 < len__8373__auto___10628) {
      args10619.push(arguments[i__8374__auto___10629]);
      var G__10630 = i__8374__auto___10629 + 1;
      i__8374__auto___10629 = G__10630;
      continue;
    } else {
    }
    break;
  }
  var G__10627 = args10619.length;
  switch(G__10627) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10619.slice(5), 0, null);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__8392__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, args);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, arglist);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, arglist);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, arglist);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, arglist);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq10620) {
  var G__10621 = cljs.core.first(seq10620);
  var seq10620__$1 = cljs.core.next(seq10620);
  var G__10622 = cljs.core.first(seq10620__$1);
  var seq10620__$2 = cljs.core.next(seq10620__$1);
  var G__10623 = cljs.core.first(seq10620__$2);
  var seq10620__$3 = cljs.core.next(seq10620__$2);
  var G__10624 = cljs.core.first(seq10620__$3);
  var seq10620__$4 = cljs.core.next(seq10620__$3);
  var G__10625 = cljs.core.first(seq10620__$4);
  var seq10620__$5 = cljs.core.next(seq10620__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__10621, G__10622, G__10623, G__10624, G__10625, seq10620__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta(var_args) {
  var args10632 = [];
  var len__8373__auto___10657 = arguments.length;
  var i__8374__auto___10658 = 0;
  while (true) {
    if (i__8374__auto___10658 < len__8373__auto___10657) {
      args10632.push(arguments[i__8374__auto___10658]);
      var G__10659 = i__8374__auto___10658 + 1;
      i__8374__auto___10658 = G__10659;
      continue;
    } else {
    }
    break;
  }
  var G__10641 = args10632.length;
  switch(G__10641) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10632.slice(6), 0, null);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__8392__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__10642 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10642) : f.call(null, G__10642);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__10643 = cljs.core.meta(obj);
    var G__10644 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10643, G__10644) : f.call(null, G__10643, G__10644);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__10645 = cljs.core.meta(obj);
    var G__10646 = a;
    var G__10647 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10645, G__10646, G__10647) : f.call(null, G__10645, G__10646, G__10647);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__10648 = cljs.core.meta(obj);
    var G__10649 = a;
    var G__10650 = b;
    var G__10651 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__10648, G__10649, G__10650, G__10651) : f.call(null, G__10648, G__10649, G__10650, G__10651);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__10652 = cljs.core.meta(obj);
    var G__10653 = a;
    var G__10654 = b;
    var G__10655 = c;
    var G__10656 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__10652, G__10653, G__10654, G__10655, G__10656) : f.call(null, G__10652, G__10653, G__10654, G__10655, G__10656);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq10633) {
  var G__10634 = cljs.core.first(seq10633);
  var seq10633__$1 = cljs.core.next(seq10633);
  var G__10635 = cljs.core.first(seq10633__$1);
  var seq10633__$2 = cljs.core.next(seq10633__$1);
  var G__10636 = cljs.core.first(seq10633__$2);
  var seq10633__$3 = cljs.core.next(seq10633__$2);
  var G__10637 = cljs.core.first(seq10633__$3);
  var seq10633__$4 = cljs.core.next(seq10633__$3);
  var G__10638 = cljs.core.first(seq10633__$4);
  var seq10633__$5 = cljs.core.next(seq10633__$4);
  var G__10639 = cljs.core.first(seq10633__$5);
  var seq10633__$6 = cljs.core.next(seq10633__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__10634, G__10635, G__10636, G__10637, G__10638, G__10639, seq10633__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_(var_args) {
  var args10661 = [];
  var len__8373__auto___10667 = arguments.length;
  var i__8374__auto___10668 = 0;
  while (true) {
    if (i__8374__auto___10668 < len__8373__auto___10667) {
      args10661.push(arguments[i__8374__auto___10668]);
      var G__10669 = i__8374__auto___10668 + 1;
      i__8374__auto___10668 = G__10669;
      continue;
    } else {
    }
    break;
  }
  var G__10666 = args10661.length;
  switch(G__10666) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10661.slice(2), 0, null);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq10662) {
  var G__10663 = cljs.core.first(seq10662);
  var seq10662__$1 = cljs.core.next(seq10662);
  var G__10664 = cljs.core.first(seq10662__$1);
  var seq10662__$2 = cljs.core.next(seq10662__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__10663, G__10664, seq10662__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t_cljs$core10674 !== "undefined") {
  } else {
    cljs.core.t_cljs$core10674 = function(meta10675) {
      this.meta10675 = meta10675;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t_cljs$core10674.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10676, meta10675__$1) {
      var self__ = this;
      var _10676__$1 = this;
      return new cljs.core.t_cljs$core10674(meta10675__$1);
    };
    cljs.core.t_cljs$core10674.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10676) {
      var self__ = this;
      var _10676__$1 = this;
      return self__.meta10675;
    };
    cljs.core.t_cljs$core10674.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t_cljs$core10674.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t_cljs$core10674.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t_cljs$core10674.getBasis = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta10675", "meta10675", -285927061, null)], null);
    };
    cljs.core.t_cljs$core10674.cljs$lang$type = true;
    cljs.core.t_cljs$core10674.cljs$lang$ctorStr = "cljs.core/t_cljs$core10674";
    cljs.core.t_cljs$core10674.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write(writer__7872__auto__, "cljs.core/t_cljs$core10674");
    };
    cljs.core.__GT_t_cljs$core10674 = function cljs$core$nil_iter_$___GT_t_cljs$core10674(meta10675) {
      return new cljs.core.t_cljs$core10674(meta10675);
    };
  }
  return new cljs.core.t_cljs$core10674(cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (!this$.hasNext()) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot create iterator from "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = !(lt.stepper == null);
      if (and__7248__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__7248__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__10677 = lt;
        var G__10678 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__10677, G__10678) : self__.xform.call(null, G__10677, G__10678);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (!iter.hasNext()) {
        return false;
      } else {
        var G__10679 = cljs.core.next(iters__$1);
        iters__$1 = G__10679;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__8183__auto___10680 = self__.iters.length;
  var i_10681 = 0;
  while (true) {
    if (i_10681 < n__8183__auto___10680) {
      self__.nexts[i_10681] = self__.iters[i_10681].next();
      var G__10682 = i_10681 + 1;
      i_10681 = G__10682;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = !(lt.stepper == null);
      if (and__7248__auto__) {
        return this$.hasNext();
      } else {
        return and__7248__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper(var_args) {
  var args10683 = [];
  var len__8373__auto___10686 = arguments.length;
  var i__8374__auto___10687 = 0;
  while (true) {
    if (i__8374__auto___10687 < len__8373__auto___10686) {
      args10683.push(arguments[i__8374__auto___10687]);
      var G__10688 = i__8374__auto___10687 + 1;
      i__8374__auto___10687 = G__10688;
      continue;
    } else {
    }
    break;
  }
  var G__10685 = args10683.length;
  switch(G__10685) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10683.length)].join(""));
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31850700;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.indexOf = function() {
  var G__10690 = null;
  var G__10690__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10690__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10690 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10690__1.call(this, x);
      case 2:
        return G__10690__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10690.cljs$core$IFn$_invoke$arity$1 = G__10690__1;
  G__10690.cljs$core$IFn$_invoke$arity$2 = G__10690__2;
  return G__10690;
}();
cljs.core.LazyTransformer.prototype.lastIndexOf = function() {
  var G__10691 = null;
  var G__10691__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10691__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10691 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10691__1.call(this, x);
      case 2:
        return G__10691__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10691.cljs$core$IFn$_invoke$arity$1 = G__10691__1;
  G__10691.cljs$core$IFn$_invoke$arity$2 = G__10691__2;
  return G__10691;
}();
cljs.core.LazyTransformer.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.meta;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1.cljs$core$ISeqable$_seq$arity$1(null));
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__10692_10696 = cljs.core.seq(colls);
  var chunk__10693_10697 = null;
  var count__10694_10698 = 0;
  var i__10695_10699 = 0;
  while (true) {
    if (i__10695_10699 < count__10694_10698) {
      var coll_10700 = chunk__10693_10697.cljs$core$IIndexed$_nth$arity$2(null, i__10695_10699);
      iters.push(cljs.core.iter(coll_10700));
      var G__10701 = seq__10692_10696;
      var G__10702 = chunk__10693_10697;
      var G__10703 = count__10694_10698;
      var G__10704 = i__10695_10699 + 1;
      seq__10692_10696 = G__10701;
      chunk__10693_10697 = G__10702;
      count__10694_10698 = G__10703;
      i__10695_10699 = G__10704;
      continue;
    } else {
      var temp__4657__auto___10705 = cljs.core.seq(seq__10692_10696);
      if (temp__4657__auto___10705) {
        var seq__10692_10706__$1 = temp__4657__auto___10705;
        if (cljs.core.chunked_seq_QMARK_(seq__10692_10706__$1)) {
          var c__8079__auto___10707 = cljs.core.chunk_first(seq__10692_10706__$1);
          var G__10708 = cljs.core.chunk_rest(seq__10692_10706__$1);
          var G__10709 = c__8079__auto___10707;
          var G__10710 = cljs.core.count(c__8079__auto___10707);
          var G__10711 = 0;
          seq__10692_10696 = G__10708;
          chunk__10693_10697 = G__10709;
          count__10694_10698 = G__10710;
          i__10695_10699 = G__10711;
          continue;
        } else {
          var coll_10712 = cljs.core.first(seq__10692_10706__$1);
          iters.push(cljs.core.iter(coll_10712));
          var G__10713 = cljs.core.next(seq__10692_10706__$1);
          var G__10714 = null;
          var G__10715 = 0;
          var G__10716 = 0;
          seq__10692_10696 = G__10713;
          chunk__10693_10697 = G__10714;
          count__10694_10698 = G__10715;
          i__10695_10699 = G__10716;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence(var_args) {
  var args10717 = [];
  var len__8373__auto___10723 = arguments.length;
  var i__8374__auto___10724 = 0;
  while (true) {
    if (i__8374__auto___10724 < len__8373__auto___10723) {
      args10717.push(arguments[i__8374__auto___10724]);
      var G__10725 = i__8374__auto___10724 + 1;
      i__8374__auto___10724 = G__10725;
      continue;
    } else {
    }
    break;
  }
  var G__10722 = args10717.length;
  switch(G__10722) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10717.slice(2), 0, null);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__7260__auto__ = cljs.core.seq(coll);
    if (or__7260__auto__) {
      return or__7260__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq10718) {
  var G__10719 = cljs.core.first(seq10718);
  var seq10718__$1 = cljs.core.next(seq10718);
  var G__10720 = cljs.core.first(seq10718__$1);
  var seq10718__$2 = cljs.core.next(seq10718__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__10719, G__10720, seq10718__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__10728 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10728) : pred.call(null, G__10728);
      }())) {
        var G__10729 = pred;
        var G__10730 = cljs.core.next(coll);
        pred = G__10729;
        coll = G__10730;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__7260__auto__ = function() {
        var G__10734 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10734) : pred.call(null, G__10734);
      }();
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        var G__10735 = pred;
        var G__10736 = cljs.core.next(coll);
        pred = G__10735;
        coll = G__10736;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Argument must be an integer: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__10737 = null;
    var G__10737__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__10737__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__10737__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__10737__3 = function() {
      var G__10738__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__10738 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__10739__i = 0, G__10739__a = new Array(arguments.length - 2);
          while (G__10739__i < G__10739__a.length) {
            G__10739__a[G__10739__i] = arguments[G__10739__i + 2];
            ++G__10739__i;
          }
          zs = new cljs.core.IndexedSeq(G__10739__a, 0);
        }
        return G__10738__delegate.call(this, x, y, zs);
      };
      G__10738.cljs$lang$maxFixedArity = 2;
      G__10738.cljs$lang$applyTo = function(arglist__10740) {
        var x = cljs.core.first(arglist__10740);
        arglist__10740 = cljs.core.next(arglist__10740);
        var y = cljs.core.first(arglist__10740);
        var zs = cljs.core.rest(arglist__10740);
        return G__10738__delegate(x, y, zs);
      };
      G__10738.cljs$core$IFn$_invoke$arity$variadic = G__10738__delegate;
      return G__10738;
    }();
    G__10737 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__10737__0.call(this);
        case 1:
          return G__10737__1.call(this, x);
        case 2:
          return G__10737__2.call(this, x, y);
        default:
          var G__10741 = null;
          if (arguments.length > 2) {
            var G__10742__i = 0, G__10742__a = new Array(arguments.length - 2);
            while (G__10742__i < G__10742__a.length) {
              G__10742__a[G__10742__i] = arguments[G__10742__i + 2];
              ++G__10742__i;
            }
            G__10741 = new cljs.core.IndexedSeq(G__10742__a, 0);
          }
          return G__10737__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__10741);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10737.cljs$lang$maxFixedArity = 2;
    G__10737.cljs$lang$applyTo = G__10737__3.cljs$lang$applyTo;
    G__10737.cljs$core$IFn$_invoke$arity$0 = G__10737__0;
    G__10737.cljs$core$IFn$_invoke$arity$1 = G__10737__1;
    G__10737.cljs$core$IFn$_invoke$arity$2 = G__10737__2;
    G__10737.cljs$core$IFn$_invoke$arity$variadic = G__10737__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__10737;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__10743__delegate = function(args) {
      return x;
    };
    var G__10743 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__10744__i = 0, G__10744__a = new Array(arguments.length - 0);
        while (G__10744__i < G__10744__a.length) {
          G__10744__a[G__10744__i] = arguments[G__10744__i + 0];
          ++G__10744__i;
        }
        args = new cljs.core.IndexedSeq(G__10744__a, 0);
      }
      return G__10743__delegate.call(this, args);
    };
    G__10743.cljs$lang$maxFixedArity = 0;
    G__10743.cljs$lang$applyTo = function(arglist__10745) {
      var args = cljs.core.seq(arglist__10745);
      return G__10743__delegate(args);
    };
    G__10743.cljs$core$IFn$_invoke$arity$variadic = G__10743__delegate;
    return G__10743;
  }();
};
cljs.core.comp = function cljs$core$comp(var_args) {
  var args10746 = [];
  var len__8373__auto___10768 = arguments.length;
  var i__8374__auto___10769 = 0;
  while (true) {
    if (i__8374__auto___10769 < len__8373__auto___10768) {
      args10746.push(arguments[i__8374__auto___10769]);
      var G__10770 = i__8374__auto___10769 + 1;
      i__8374__auto___10769 = G__10770;
      continue;
    } else {
    }
    break;
  }
  var G__10752 = args10746.length;
  switch(G__10752) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10746.slice(3), 0, null);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__10772 = null;
    var G__10772__0 = function() {
      var G__10753 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10753) : f.call(null, G__10753);
    };
    var G__10772__1 = function(x) {
      var G__10754 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10754) : f.call(null, G__10754);
    };
    var G__10772__2 = function(x, y) {
      var G__10755 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10755) : f.call(null, G__10755);
    };
    var G__10772__3 = function(x, y, z) {
      var G__10756 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10756) : f.call(null, G__10756);
    };
    var G__10772__4 = function() {
      var G__10773__delegate = function(x, y, z, args) {
        var G__10757 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10757) : f.call(null, G__10757);
      };
      var G__10773 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10774__i = 0, G__10774__a = new Array(arguments.length - 3);
          while (G__10774__i < G__10774__a.length) {
            G__10774__a[G__10774__i] = arguments[G__10774__i + 3];
            ++G__10774__i;
          }
          args = new cljs.core.IndexedSeq(G__10774__a, 0);
        }
        return G__10773__delegate.call(this, x, y, z, args);
      };
      G__10773.cljs$lang$maxFixedArity = 3;
      G__10773.cljs$lang$applyTo = function(arglist__10775) {
        var x = cljs.core.first(arglist__10775);
        arglist__10775 = cljs.core.next(arglist__10775);
        var y = cljs.core.first(arglist__10775);
        arglist__10775 = cljs.core.next(arglist__10775);
        var z = cljs.core.first(arglist__10775);
        var args = cljs.core.rest(arglist__10775);
        return G__10773__delegate(x, y, z, args);
      };
      G__10773.cljs$core$IFn$_invoke$arity$variadic = G__10773__delegate;
      return G__10773;
    }();
    G__10772 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10772__0.call(this);
        case 1:
          return G__10772__1.call(this, x);
        case 2:
          return G__10772__2.call(this, x, y);
        case 3:
          return G__10772__3.call(this, x, y, z);
        default:
          var G__10776 = null;
          if (arguments.length > 3) {
            var G__10777__i = 0, G__10777__a = new Array(arguments.length - 3);
            while (G__10777__i < G__10777__a.length) {
              G__10777__a[G__10777__i] = arguments[G__10777__i + 3];
              ++G__10777__i;
            }
            G__10776 = new cljs.core.IndexedSeq(G__10777__a, 0);
          }
          return G__10772__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10776);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10772.cljs$lang$maxFixedArity = 3;
    G__10772.cljs$lang$applyTo = G__10772__4.cljs$lang$applyTo;
    G__10772.cljs$core$IFn$_invoke$arity$0 = G__10772__0;
    G__10772.cljs$core$IFn$_invoke$arity$1 = G__10772__1;
    G__10772.cljs$core$IFn$_invoke$arity$2 = G__10772__2;
    G__10772.cljs$core$IFn$_invoke$arity$3 = G__10772__3;
    G__10772.cljs$core$IFn$_invoke$arity$variadic = G__10772__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10772;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__10778 = null;
    var G__10778__0 = function() {
      var G__10758 = function() {
        var G__10759 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10759) : g.call(null, G__10759);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10758) : f.call(null, G__10758);
    };
    var G__10778__1 = function(x) {
      var G__10760 = function() {
        var G__10761 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10761) : g.call(null, G__10761);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10760) : f.call(null, G__10760);
    };
    var G__10778__2 = function(x, y) {
      var G__10762 = function() {
        var G__10763 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10763) : g.call(null, G__10763);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10762) : f.call(null, G__10762);
    };
    var G__10778__3 = function(x, y, z) {
      var G__10764 = function() {
        var G__10765 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10765) : g.call(null, G__10765);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10764) : f.call(null, G__10764);
    };
    var G__10778__4 = function() {
      var G__10779__delegate = function(x, y, z, args) {
        var G__10766 = function() {
          var G__10767 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10767) : g.call(null, G__10767);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10766) : f.call(null, G__10766);
      };
      var G__10779 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10780__i = 0, G__10780__a = new Array(arguments.length - 3);
          while (G__10780__i < G__10780__a.length) {
            G__10780__a[G__10780__i] = arguments[G__10780__i + 3];
            ++G__10780__i;
          }
          args = new cljs.core.IndexedSeq(G__10780__a, 0);
        }
        return G__10779__delegate.call(this, x, y, z, args);
      };
      G__10779.cljs$lang$maxFixedArity = 3;
      G__10779.cljs$lang$applyTo = function(arglist__10781) {
        var x = cljs.core.first(arglist__10781);
        arglist__10781 = cljs.core.next(arglist__10781);
        var y = cljs.core.first(arglist__10781);
        arglist__10781 = cljs.core.next(arglist__10781);
        var z = cljs.core.first(arglist__10781);
        var args = cljs.core.rest(arglist__10781);
        return G__10779__delegate(x, y, z, args);
      };
      G__10779.cljs$core$IFn$_invoke$arity$variadic = G__10779__delegate;
      return G__10779;
    }();
    G__10778 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10778__0.call(this);
        case 1:
          return G__10778__1.call(this, x);
        case 2:
          return G__10778__2.call(this, x, y);
        case 3:
          return G__10778__3.call(this, x, y, z);
        default:
          var G__10782 = null;
          if (arguments.length > 3) {
            var G__10783__i = 0, G__10783__a = new Array(arguments.length - 3);
            while (G__10783__i < G__10783__a.length) {
              G__10783__a[G__10783__i] = arguments[G__10783__i + 3];
              ++G__10783__i;
            }
            G__10782 = new cljs.core.IndexedSeq(G__10783__a, 0);
          }
          return G__10778__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10782);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10778.cljs$lang$maxFixedArity = 3;
    G__10778.cljs$lang$applyTo = G__10778__4.cljs$lang$applyTo;
    G__10778.cljs$core$IFn$_invoke$arity$0 = G__10778__0;
    G__10778.cljs$core$IFn$_invoke$arity$1 = G__10778__1;
    G__10778.cljs$core$IFn$_invoke$arity$2 = G__10778__2;
    G__10778.cljs$core$IFn$_invoke$arity$3 = G__10778__3;
    G__10778.cljs$core$IFn$_invoke$arity$variadic = G__10778__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10778;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__10784__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__10785 = cljs.core.first(fs__$2).call(null, ret);
            var G__10786 = cljs.core.next(fs__$2);
            ret = G__10785;
            fs__$2 = G__10786;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__10784 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__10787__i = 0, G__10787__a = new Array(arguments.length - 0);
          while (G__10787__i < G__10787__a.length) {
            G__10787__a[G__10787__i] = arguments[G__10787__i + 0];
            ++G__10787__i;
          }
          args = new cljs.core.IndexedSeq(G__10787__a, 0);
        }
        return G__10784__delegate.call(this, args);
      };
      G__10784.cljs$lang$maxFixedArity = 0;
      G__10784.cljs$lang$applyTo = function(arglist__10788) {
        var args = cljs.core.seq(arglist__10788);
        return G__10784__delegate(args);
      };
      G__10784.cljs$core$IFn$_invoke$arity$variadic = G__10784__delegate;
      return G__10784;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq10747) {
  var G__10748 = cljs.core.first(seq10747);
  var seq10747__$1 = cljs.core.next(seq10747);
  var G__10749 = cljs.core.first(seq10747__$1);
  var seq10747__$2 = cljs.core.next(seq10747__$1);
  var G__10750 = cljs.core.first(seq10747__$2);
  var seq10747__$3 = cljs.core.next(seq10747__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__10748, G__10749, G__10750, seq10747__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial(var_args) {
  var args10789 = [];
  var len__8373__auto___10797 = arguments.length;
  var i__8374__auto___10798 = 0;
  while (true) {
    if (i__8374__auto___10798 < len__8373__auto___10797) {
      args10789.push(arguments[i__8374__auto___10798]);
      var G__10799 = i__8374__auto___10798 + 1;
      i__8374__auto___10798 = G__10799;
      continue;
    } else {
    }
    break;
  }
  var G__10796 = args10789.length;
  switch(G__10796) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10789.slice(4), 0, null);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8392__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__10801 = null;
    var G__10801__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__10801__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__10801__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__10801__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__10801__4 = function() {
      var G__10802__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__10802 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10803__i = 0, G__10803__a = new Array(arguments.length - 3);
          while (G__10803__i < G__10803__a.length) {
            G__10803__a[G__10803__i] = arguments[G__10803__i + 3];
            ++G__10803__i;
          }
          args = new cljs.core.IndexedSeq(G__10803__a, 0);
        }
        return G__10802__delegate.call(this, x, y, z, args);
      };
      G__10802.cljs$lang$maxFixedArity = 3;
      G__10802.cljs$lang$applyTo = function(arglist__10804) {
        var x = cljs.core.first(arglist__10804);
        arglist__10804 = cljs.core.next(arglist__10804);
        var y = cljs.core.first(arglist__10804);
        arglist__10804 = cljs.core.next(arglist__10804);
        var z = cljs.core.first(arglist__10804);
        var args = cljs.core.rest(arglist__10804);
        return G__10802__delegate(x, y, z, args);
      };
      G__10802.cljs$core$IFn$_invoke$arity$variadic = G__10802__delegate;
      return G__10802;
    }();
    G__10801 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10801__0.call(this);
        case 1:
          return G__10801__1.call(this, x);
        case 2:
          return G__10801__2.call(this, x, y);
        case 3:
          return G__10801__3.call(this, x, y, z);
        default:
          var G__10805 = null;
          if (arguments.length > 3) {
            var G__10806__i = 0, G__10806__a = new Array(arguments.length - 3);
            while (G__10806__i < G__10806__a.length) {
              G__10806__a[G__10806__i] = arguments[G__10806__i + 3];
              ++G__10806__i;
            }
            G__10805 = new cljs.core.IndexedSeq(G__10806__a, 0);
          }
          return G__10801__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10805);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10801.cljs$lang$maxFixedArity = 3;
    G__10801.cljs$lang$applyTo = G__10801__4.cljs$lang$applyTo;
    G__10801.cljs$core$IFn$_invoke$arity$0 = G__10801__0;
    G__10801.cljs$core$IFn$_invoke$arity$1 = G__10801__1;
    G__10801.cljs$core$IFn$_invoke$arity$2 = G__10801__2;
    G__10801.cljs$core$IFn$_invoke$arity$3 = G__10801__3;
    G__10801.cljs$core$IFn$_invoke$arity$variadic = G__10801__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10801;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__10807 = null;
    var G__10807__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__10807__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__10807__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__10807__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__10807__4 = function() {
      var G__10808__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__10808 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10809__i = 0, G__10809__a = new Array(arguments.length - 3);
          while (G__10809__i < G__10809__a.length) {
            G__10809__a[G__10809__i] = arguments[G__10809__i + 3];
            ++G__10809__i;
          }
          args = new cljs.core.IndexedSeq(G__10809__a, 0);
        }
        return G__10808__delegate.call(this, x, y, z, args);
      };
      G__10808.cljs$lang$maxFixedArity = 3;
      G__10808.cljs$lang$applyTo = function(arglist__10810) {
        var x = cljs.core.first(arglist__10810);
        arglist__10810 = cljs.core.next(arglist__10810);
        var y = cljs.core.first(arglist__10810);
        arglist__10810 = cljs.core.next(arglist__10810);
        var z = cljs.core.first(arglist__10810);
        var args = cljs.core.rest(arglist__10810);
        return G__10808__delegate(x, y, z, args);
      };
      G__10808.cljs$core$IFn$_invoke$arity$variadic = G__10808__delegate;
      return G__10808;
    }();
    G__10807 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10807__0.call(this);
        case 1:
          return G__10807__1.call(this, x);
        case 2:
          return G__10807__2.call(this, x, y);
        case 3:
          return G__10807__3.call(this, x, y, z);
        default:
          var G__10811 = null;
          if (arguments.length > 3) {
            var G__10812__i = 0, G__10812__a = new Array(arguments.length - 3);
            while (G__10812__i < G__10812__a.length) {
              G__10812__a[G__10812__i] = arguments[G__10812__i + 3];
              ++G__10812__i;
            }
            G__10811 = new cljs.core.IndexedSeq(G__10812__a, 0);
          }
          return G__10807__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10811);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10807.cljs$lang$maxFixedArity = 3;
    G__10807.cljs$lang$applyTo = G__10807__4.cljs$lang$applyTo;
    G__10807.cljs$core$IFn$_invoke$arity$0 = G__10807__0;
    G__10807.cljs$core$IFn$_invoke$arity$1 = G__10807__1;
    G__10807.cljs$core$IFn$_invoke$arity$2 = G__10807__2;
    G__10807.cljs$core$IFn$_invoke$arity$3 = G__10807__3;
    G__10807.cljs$core$IFn$_invoke$arity$variadic = G__10807__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10807;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__10813 = null;
    var G__10813__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__10813__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__10813__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__10813__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__10813__4 = function() {
      var G__10814__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__10814 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10815__i = 0, G__10815__a = new Array(arguments.length - 3);
          while (G__10815__i < G__10815__a.length) {
            G__10815__a[G__10815__i] = arguments[G__10815__i + 3];
            ++G__10815__i;
          }
          args = new cljs.core.IndexedSeq(G__10815__a, 0);
        }
        return G__10814__delegate.call(this, x, y, z, args);
      };
      G__10814.cljs$lang$maxFixedArity = 3;
      G__10814.cljs$lang$applyTo = function(arglist__10816) {
        var x = cljs.core.first(arglist__10816);
        arglist__10816 = cljs.core.next(arglist__10816);
        var y = cljs.core.first(arglist__10816);
        arglist__10816 = cljs.core.next(arglist__10816);
        var z = cljs.core.first(arglist__10816);
        var args = cljs.core.rest(arglist__10816);
        return G__10814__delegate(x, y, z, args);
      };
      G__10814.cljs$core$IFn$_invoke$arity$variadic = G__10814__delegate;
      return G__10814;
    }();
    G__10813 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10813__0.call(this);
        case 1:
          return G__10813__1.call(this, x);
        case 2:
          return G__10813__2.call(this, x, y);
        case 3:
          return G__10813__3.call(this, x, y, z);
        default:
          var G__10817 = null;
          if (arguments.length > 3) {
            var G__10818__i = 0, G__10818__a = new Array(arguments.length - 3);
            while (G__10818__i < G__10818__a.length) {
              G__10818__a[G__10818__i] = arguments[G__10818__i + 3];
              ++G__10818__i;
            }
            G__10817 = new cljs.core.IndexedSeq(G__10818__a, 0);
          }
          return G__10813__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10817);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10813.cljs$lang$maxFixedArity = 3;
    G__10813.cljs$lang$applyTo = G__10813__4.cljs$lang$applyTo;
    G__10813.cljs$core$IFn$_invoke$arity$0 = G__10813__0;
    G__10813.cljs$core$IFn$_invoke$arity$1 = G__10813__1;
    G__10813.cljs$core$IFn$_invoke$arity$2 = G__10813__2;
    G__10813.cljs$core$IFn$_invoke$arity$3 = G__10813__3;
    G__10813.cljs$core$IFn$_invoke$arity$variadic = G__10813__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10813;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__10819__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__10819 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__10820__i = 0, G__10820__a = new Array(arguments.length - 0);
        while (G__10820__i < G__10820__a.length) {
          G__10820__a[G__10820__i] = arguments[G__10820__i + 0];
          ++G__10820__i;
        }
        args = new cljs.core.IndexedSeq(G__10820__a, 0);
      }
      return G__10819__delegate.call(this, args);
    };
    G__10819.cljs$lang$maxFixedArity = 0;
    G__10819.cljs$lang$applyTo = function(arglist__10821) {
      var args = cljs.core.seq(arglist__10821);
      return G__10819__delegate(args);
    };
    G__10819.cljs$core$IFn$_invoke$arity$variadic = G__10819__delegate;
    return G__10819;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq10790) {
  var G__10791 = cljs.core.first(seq10790);
  var seq10790__$1 = cljs.core.next(seq10790);
  var G__10792 = cljs.core.first(seq10790__$1);
  var seq10790__$2 = cljs.core.next(seq10790__$1);
  var G__10793 = cljs.core.first(seq10790__$2);
  var seq10790__$3 = cljs.core.next(seq10790__$2);
  var G__10794 = cljs.core.first(seq10790__$3);
  var seq10790__$4 = cljs.core.next(seq10790__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__10791, G__10792, G__10793, G__10794, seq10790__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil(var_args) {
  var args10822 = [];
  var len__8373__auto___10841 = arguments.length;
  var i__8374__auto___10842 = 0;
  while (true) {
    if (i__8374__auto___10842 < len__8373__auto___10841) {
      args10822.push(arguments[i__8374__auto___10842]);
      var G__10843 = i__8374__auto___10842 + 1;
      i__8374__auto___10842 = G__10843;
      continue;
    } else {
    }
    break;
  }
  var G__10824 = args10822.length;
  switch(G__10824) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10822.length)].join(""));
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__10845 = null;
    var G__10845__1 = function(a) {
      var G__10825 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10825) : f.call(null, G__10825);
    };
    var G__10845__2 = function(a, b) {
      var G__10826 = a == null ? x : a;
      var G__10827 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10826, G__10827) : f.call(null, G__10826, G__10827);
    };
    var G__10845__3 = function(a, b, c) {
      var G__10828 = a == null ? x : a;
      var G__10829 = b;
      var G__10830 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10828, G__10829, G__10830) : f.call(null, G__10828, G__10829, G__10830);
    };
    var G__10845__4 = function() {
      var G__10846__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__10846 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__10847__i = 0, G__10847__a = new Array(arguments.length - 3);
          while (G__10847__i < G__10847__a.length) {
            G__10847__a[G__10847__i] = arguments[G__10847__i + 3];
            ++G__10847__i;
          }
          ds = new cljs.core.IndexedSeq(G__10847__a, 0);
        }
        return G__10846__delegate.call(this, a, b, c, ds);
      };
      G__10846.cljs$lang$maxFixedArity = 3;
      G__10846.cljs$lang$applyTo = function(arglist__10848) {
        var a = cljs.core.first(arglist__10848);
        arglist__10848 = cljs.core.next(arglist__10848);
        var b = cljs.core.first(arglist__10848);
        arglist__10848 = cljs.core.next(arglist__10848);
        var c = cljs.core.first(arglist__10848);
        var ds = cljs.core.rest(arglist__10848);
        return G__10846__delegate(a, b, c, ds);
      };
      G__10846.cljs$core$IFn$_invoke$arity$variadic = G__10846__delegate;
      return G__10846;
    }();
    G__10845 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__10845__1.call(this, a);
        case 2:
          return G__10845__2.call(this, a, b);
        case 3:
          return G__10845__3.call(this, a, b, c);
        default:
          var G__10849 = null;
          if (arguments.length > 3) {
            var G__10850__i = 0, G__10850__a = new Array(arguments.length - 3);
            while (G__10850__i < G__10850__a.length) {
              G__10850__a[G__10850__i] = arguments[G__10850__i + 3];
              ++G__10850__i;
            }
            G__10849 = new cljs.core.IndexedSeq(G__10850__a, 0);
          }
          return G__10845__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__10849);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10845.cljs$lang$maxFixedArity = 3;
    G__10845.cljs$lang$applyTo = G__10845__4.cljs$lang$applyTo;
    G__10845.cljs$core$IFn$_invoke$arity$1 = G__10845__1;
    G__10845.cljs$core$IFn$_invoke$arity$2 = G__10845__2;
    G__10845.cljs$core$IFn$_invoke$arity$3 = G__10845__3;
    G__10845.cljs$core$IFn$_invoke$arity$variadic = G__10845__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10845;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__10851 = null;
    var G__10851__2 = function(a, b) {
      var G__10831 = a == null ? x : a;
      var G__10832 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10831, G__10832) : f.call(null, G__10831, G__10832);
    };
    var G__10851__3 = function(a, b, c) {
      var G__10833 = a == null ? x : a;
      var G__10834 = b == null ? y : b;
      var G__10835 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10833, G__10834, G__10835) : f.call(null, G__10833, G__10834, G__10835);
    };
    var G__10851__4 = function() {
      var G__10852__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__10852 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__10853__i = 0, G__10853__a = new Array(arguments.length - 3);
          while (G__10853__i < G__10853__a.length) {
            G__10853__a[G__10853__i] = arguments[G__10853__i + 3];
            ++G__10853__i;
          }
          ds = new cljs.core.IndexedSeq(G__10853__a, 0);
        }
        return G__10852__delegate.call(this, a, b, c, ds);
      };
      G__10852.cljs$lang$maxFixedArity = 3;
      G__10852.cljs$lang$applyTo = function(arglist__10854) {
        var a = cljs.core.first(arglist__10854);
        arglist__10854 = cljs.core.next(arglist__10854);
        var b = cljs.core.first(arglist__10854);
        arglist__10854 = cljs.core.next(arglist__10854);
        var c = cljs.core.first(arglist__10854);
        var ds = cljs.core.rest(arglist__10854);
        return G__10852__delegate(a, b, c, ds);
      };
      G__10852.cljs$core$IFn$_invoke$arity$variadic = G__10852__delegate;
      return G__10852;
    }();
    G__10851 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__10851__2.call(this, a, b);
        case 3:
          return G__10851__3.call(this, a, b, c);
        default:
          var G__10855 = null;
          if (arguments.length > 3) {
            var G__10856__i = 0, G__10856__a = new Array(arguments.length - 3);
            while (G__10856__i < G__10856__a.length) {
              G__10856__a[G__10856__i] = arguments[G__10856__i + 3];
              ++G__10856__i;
            }
            G__10855 = new cljs.core.IndexedSeq(G__10856__a, 0);
          }
          return G__10851__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__10855);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10851.cljs$lang$maxFixedArity = 3;
    G__10851.cljs$lang$applyTo = G__10851__4.cljs$lang$applyTo;
    G__10851.cljs$core$IFn$_invoke$arity$2 = G__10851__2;
    G__10851.cljs$core$IFn$_invoke$arity$3 = G__10851__3;
    G__10851.cljs$core$IFn$_invoke$arity$variadic = G__10851__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10851;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__10857 = null;
    var G__10857__2 = function(a, b) {
      var G__10836 = a == null ? x : a;
      var G__10837 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10836, G__10837) : f.call(null, G__10836, G__10837);
    };
    var G__10857__3 = function(a, b, c) {
      var G__10838 = a == null ? x : a;
      var G__10839 = b == null ? y : b;
      var G__10840 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10838, G__10839, G__10840) : f.call(null, G__10838, G__10839, G__10840);
    };
    var G__10857__4 = function() {
      var G__10858__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__10858 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__10859__i = 0, G__10859__a = new Array(arguments.length - 3);
          while (G__10859__i < G__10859__a.length) {
            G__10859__a[G__10859__i] = arguments[G__10859__i + 3];
            ++G__10859__i;
          }
          ds = new cljs.core.IndexedSeq(G__10859__a, 0);
        }
        return G__10858__delegate.call(this, a, b, c, ds);
      };
      G__10858.cljs$lang$maxFixedArity = 3;
      G__10858.cljs$lang$applyTo = function(arglist__10860) {
        var a = cljs.core.first(arglist__10860);
        arglist__10860 = cljs.core.next(arglist__10860);
        var b = cljs.core.first(arglist__10860);
        arglist__10860 = cljs.core.next(arglist__10860);
        var c = cljs.core.first(arglist__10860);
        var ds = cljs.core.rest(arglist__10860);
        return G__10858__delegate(a, b, c, ds);
      };
      G__10858.cljs$core$IFn$_invoke$arity$variadic = G__10858__delegate;
      return G__10858;
    }();
    G__10857 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__10857__2.call(this, a, b);
        case 3:
          return G__10857__3.call(this, a, b, c);
        default:
          var G__10861 = null;
          if (arguments.length > 3) {
            var G__10862__i = 0, G__10862__a = new Array(arguments.length - 3);
            while (G__10862__i < G__10862__a.length) {
              G__10862__a[G__10862__i] = arguments[G__10862__i + 3];
              ++G__10862__i;
            }
            G__10861 = new cljs.core.IndexedSeq(G__10862__a, 0);
          }
          return G__10857__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__10861);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10857.cljs$lang$maxFixedArity = 3;
    G__10857.cljs$lang$applyTo = G__10857__4.cljs$lang$applyTo;
    G__10857.cljs$core$IFn$_invoke$arity$2 = G__10857__2;
    G__10857.cljs$core$IFn$_invoke$arity$3 = G__10857__3;
    G__10857.cljs$core$IFn$_invoke$arity$variadic = G__10857__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10857;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed(var_args) {
  var args10863 = [];
  var len__8373__auto___10894 = arguments.length;
  var i__8374__auto___10895 = 0;
  while (true) {
    if (i__8374__auto___10895 < len__8373__auto___10894) {
      args10863.push(arguments[i__8374__auto___10895]);
      var G__10896 = i__8374__auto___10895 + 1;
      i__8374__auto___10895 = G__10896;
      continue;
    } else {
    }
    break;
  }
  var G__10865 = args10863.length;
  switch(G__10865) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10863.length)].join(""));
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__10898 = null;
        var G__10898__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10898__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10898__2 = function(result, input) {
          var G__10866 = result;
          var G__10867 = function() {
            var G__10868 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__10869 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10868, G__10869) : f.call(null, G__10868, G__10869);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10866, G__10867) : rf.call(null, G__10866, G__10867);
        };
        G__10898 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10898__0.call(this);
            case 1:
              return G__10898__1.call(this, result);
            case 2:
              return G__10898__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__10898.cljs$core$IFn$_invoke$arity$0 = G__10898__0;
        G__10898.cljs$core$IFn$_invoke$arity$1 = G__10898__1;
        G__10898.cljs$core$IFn$_invoke$arity$2 = G__10898__2;
        return G__10898;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll__$1);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__8183__auto___10899 = size;
          var i_10900 = 0;
          while (true) {
            if (i_10900 < n__8183__auto___10899) {
              cljs.core.chunk_append(b, function() {
                var G__10890 = idx + i_10900;
                var G__10891 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_10900);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10890, G__10891) : f.call(null, G__10890, G__10891);
              }());
              var G__10901 = i_10900 + 1;
              i_10900 = G__10901;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__10892 = idx;
            var G__10893 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10892, G__10893) : f.call(null, G__10892, G__10893);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep(var_args) {
  var args10902 = [];
  var len__8373__auto___10907 = arguments.length;
  var i__8374__auto___10908 = 0;
  while (true) {
    if (i__8374__auto___10908 < len__8373__auto___10907) {
      args10902.push(arguments[i__8374__auto___10908]);
      var G__10909 = i__8374__auto___10908 + 1;
      i__8374__auto___10908 = G__10909;
      continue;
    } else {
    }
    break;
  }
  var G__10904 = args10902.length;
  switch(G__10904) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10902.length)].join(""));
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__10911 = null;
      var G__10911__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10911__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__10911__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__10911 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10911__0.call(this);
          case 1:
            return G__10911__1.call(this, result);
          case 2:
            return G__10911__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__10911.cljs$core$IFn$_invoke$arity$0 = G__10911__0;
      G__10911.cljs$core$IFn$_invoke$arity$1 = G__10911__1;
      G__10911.cljs$core$IFn$_invoke$arity$2 = G__10911__2;
      return G__10911;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__8183__auto___10912 = size;
        var i_10913 = 0;
        while (true) {
          if (i_10913 < n__8183__auto___10912) {
            var x_10914 = function() {
              var G__10905 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_10913);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10905) : f.call(null, G__10905);
            }();
            if (x_10914 == null) {
            } else {
              cljs.core.chunk_append(b, x_10914);
            }
            var G__10915 = i_10913 + 1;
            i_10913 = G__10915;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__10906 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10906) : f.call(null, G__10906);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__10916 = cljs.core.seq(self__.watches);
  var chunk__10917 = null;
  var count__10918 = 0;
  var i__10919 = 0;
  while (true) {
    if (i__10919 < count__10918) {
      var vec__10920 = chunk__10917.cljs$core$IIndexed$_nth$arity$2(null, i__10919);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10920, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10920, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__10926 = seq__10916;
      var G__10927 = chunk__10917;
      var G__10928 = count__10918;
      var G__10929 = i__10919 + 1;
      seq__10916 = G__10926;
      chunk__10917 = G__10927;
      count__10918 = G__10928;
      i__10919 = G__10929;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__10916);
      if (temp__4657__auto__) {
        var seq__10916__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10916__$1)) {
          var c__8079__auto__ = cljs.core.chunk_first(seq__10916__$1);
          var G__10930 = cljs.core.chunk_rest(seq__10916__$1);
          var G__10931 = c__8079__auto__;
          var G__10932 = cljs.core.count(c__8079__auto__);
          var G__10933 = 0;
          seq__10916 = G__10930;
          chunk__10917 = G__10931;
          count__10918 = G__10932;
          i__10919 = G__10933;
          continue;
        } else {
          var vec__10923 = cljs.core.first(seq__10916__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10923, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10923, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__10934 = cljs.core.next(seq__10916__$1);
          var G__10935 = null;
          var G__10936 = 0;
          var G__10937 = 0;
          seq__10916 = G__10934;
          chunk__10917 = G__10935;
          count__10918 = G__10936;
          i__10919 = G__10937;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom(var_args) {
  var args10938 = [];
  var len__8373__auto___10946 = arguments.length;
  var i__8374__auto___10947 = 0;
  while (true) {
    if (i__8374__auto___10947 < len__8373__auto___10946) {
      args10938.push(arguments[i__8374__auto___10947]);
      var G__10948 = i__8374__auto___10947 + 1;
      i__8374__auto___10947 = G__10948;
      continue;
    } else {
    }
    break;
  }
  var G__10942 = args10938.length;
  switch(G__10942) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10938.slice(1), 0, null);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8392__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__10943) {
  var map__10944 = p__10943;
  var map__10944__$1 = (!(map__10944 == null) ? map__10944.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10944.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__10944) : map__10944;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10944__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10944__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq10939) {
  var G__10940 = cljs.core.first(seq10939);
  var seq10939__$1 = cljs.core.next(seq10939);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__10940, seq10939__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error("Validator rejected reference state");
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_(var_args) {
  var args10950 = [];
  var len__8373__auto___10964 = arguments.length;
  var i__8374__auto___10965 = 0;
  while (true) {
    if (i__8374__auto___10965 < len__8373__auto___10964) {
      args10950.push(arguments[i__8374__auto___10965]);
      var G__10966 = i__8374__auto___10965 + 1;
      i__8374__auto___10965 = G__10966;
      continue;
    } else {
    }
    break;
  }
  var G__10957 = args10950.length;
  switch(G__10957) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args10950.slice(4), 0, null);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8392__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__10958 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10958) : f.call(null, G__10958);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__10959 = a.state;
      var G__10960 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10959, G__10960) : f.call(null, G__10959, G__10960);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__10961 = a.state;
      var G__10962 = x;
      var G__10963 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10961, G__10962, G__10963) : f.call(null, G__10961, G__10962, G__10963);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq10951) {
  var G__10952 = cljs.core.first(seq10951);
  var seq10951__$1 = cljs.core.next(seq10951);
  var G__10953 = cljs.core.first(seq10951__$1);
  var seq10951__$2 = cljs.core.next(seq10951__$1);
  var G__10954 = cljs.core.first(seq10951__$2);
  var seq10951__$3 = cljs.core.next(seq10951__$2);
  var G__10955 = cljs.core.first(seq10951__$3);
  var seq10951__$4 = cljs.core.next(seq10951__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10952, G__10953, G__10954, G__10955, seq10951__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed(var_args) {
  var args10968 = [];
  var len__8373__auto___10999 = arguments.length;
  var i__8374__auto___11000 = 0;
  while (true) {
    if (i__8374__auto___11000 < len__8373__auto___10999) {
      args10968.push(arguments[i__8374__auto___11000]);
      var G__11001 = i__8374__auto___11000 + 1;
      i__8374__auto___11000 = G__11001;
      continue;
    } else {
    }
    break;
  }
  var G__10970 = args10968.length;
  switch(G__10970) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10968.length)].join(""));
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__11003 = null;
        var G__11003__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11003__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11003__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__11003 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11003__0.call(this);
            case 1:
              return G__11003__1.call(this, result);
            case 2:
              return G__11003__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11003.cljs$core$IFn$_invoke$arity$0 = G__11003__0;
        G__11003.cljs$core$IFn$_invoke$arity$1 = G__11003__1;
        G__11003.cljs$core$IFn$_invoke$arity$2 = G__11003__2;
        return G__11003;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll__$1);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__8183__auto___11004 = size;
          var i_11005 = 0;
          while (true) {
            if (i_11005 < n__8183__auto___11004) {
              var x_11006 = function() {
                var G__10995 = idx + i_11005;
                var G__10996 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11005);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10995, G__10996) : f.call(null, G__10995, G__10996);
              }();
              if (x_11006 == null) {
              } else {
                cljs.core.chunk_append(b, x_11006);
              }
              var G__11007 = i_11005 + 1;
              i_11005 = G__11007;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__10997 = idx;
            var G__10998 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10997, G__10998) : f.call(null, G__10997, G__10998);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred(var_args) {
  var args11014 = [];
  var len__8373__auto___11021 = arguments.length;
  var i__8374__auto___11022 = 0;
  while (true) {
    if (i__8374__auto___11022 < len__8373__auto___11021) {
      args11014.push(arguments[i__8374__auto___11022]);
      var G__11023 = i__8374__auto___11022 + 1;
      i__8374__auto___11022 = G__11023;
      continue;
    } else {
    }
    break;
  }
  var G__11020 = args11014.length;
  switch(G__11020) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args11014.slice(3), 0, null);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__7248__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__7248__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__7248__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__7248__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__7248__auto__)) {
          var and__7248__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__7248__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__7248__auto____$1;
          }
        } else {
          return and__7248__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__11025__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__7248__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__7248__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__7248__auto__;
          }
        }());
      };
      var G__11025 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11026__i = 0, G__11026__a = new Array(arguments.length - 3);
          while (G__11026__i < G__11026__a.length) {
            G__11026__a[G__11026__i] = arguments[G__11026__i + 3];
            ++G__11026__i;
          }
          args = new cljs.core.IndexedSeq(G__11026__a, 0);
        }
        return G__11025__delegate.call(this, x, y, z, args);
      };
      G__11025.cljs$lang$maxFixedArity = 3;
      G__11025.cljs$lang$applyTo = function(arglist__11027) {
        var x = cljs.core.first(arglist__11027);
        arglist__11027 = cljs.core.next(arglist__11027);
        var y = cljs.core.first(arglist__11027);
        arglist__11027 = cljs.core.next(arglist__11027);
        var z = cljs.core.first(arglist__11027);
        var args = cljs.core.rest(arglist__11027);
        return G__11025__delegate(x, y, z, args);
      };
      G__11025.cljs$core$IFn$_invoke$arity$variadic = G__11025__delegate;
      return G__11025;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__11028 = null;
          if (arguments.length > 3) {
            var G__11029__i = 0, G__11029__a = new Array(arguments.length - 3);
            while (G__11029__i < G__11029__a.length) {
              G__11029__a[G__11029__i] = arguments[G__11029__i + 3];
              ++G__11029__i;
            }
            G__11028 = new cljs.core.IndexedSeq(G__11029__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11028);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__7248__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7248__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__7248__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__7248__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7248__auto__)) {
          var and__7248__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__7248__auto____$1)) {
            var and__7248__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__7248__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__7248__auto____$2;
            }
          } else {
            return and__7248__auto____$1;
          }
        } else {
          return and__7248__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__7248__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7248__auto__)) {
          var and__7248__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__7248__auto____$1)) {
            var and__7248__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__7248__auto____$2)) {
              var and__7248__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__7248__auto____$3)) {
                var and__7248__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__7248__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__7248__auto____$4;
                }
              } else {
                return and__7248__auto____$3;
              }
            } else {
              return and__7248__auto____$2;
            }
          } else {
            return and__7248__auto____$1;
          }
        } else {
          return and__7248__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__11030__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__7248__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__7248__auto__)) {
            return cljs.core.every_QMARK_(function(and__7248__auto__) {
              return function(p1__11008_SHARP_) {
                var and__7248__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__11008_SHARP_) : p1.call(null, p1__11008_SHARP_);
                if (cljs.core.truth_(and__7248__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__11008_SHARP_) : p2.call(null, p1__11008_SHARP_);
                } else {
                  return and__7248__auto____$1;
                }
              };
            }(and__7248__auto__), args);
          } else {
            return and__7248__auto__;
          }
        }());
      };
      var G__11030 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11031__i = 0, G__11031__a = new Array(arguments.length - 3);
          while (G__11031__i < G__11031__a.length) {
            G__11031__a[G__11031__i] = arguments[G__11031__i + 3];
            ++G__11031__i;
          }
          args = new cljs.core.IndexedSeq(G__11031__a, 0);
        }
        return G__11030__delegate.call(this, x, y, z, args);
      };
      G__11030.cljs$lang$maxFixedArity = 3;
      G__11030.cljs$lang$applyTo = function(arglist__11032) {
        var x = cljs.core.first(arglist__11032);
        arglist__11032 = cljs.core.next(arglist__11032);
        var y = cljs.core.first(arglist__11032);
        arglist__11032 = cljs.core.next(arglist__11032);
        var z = cljs.core.first(arglist__11032);
        var args = cljs.core.rest(arglist__11032);
        return G__11030__delegate(x, y, z, args);
      };
      G__11030.cljs$core$IFn$_invoke$arity$variadic = G__11030__delegate;
      return G__11030;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__11033 = null;
          if (arguments.length > 3) {
            var G__11034__i = 0, G__11034__a = new Array(arguments.length - 3);
            while (G__11034__i < G__11034__a.length) {
              G__11034__a[G__11034__i] = arguments[G__11034__i + 3];
              ++G__11034__i;
            }
            G__11033 = new cljs.core.IndexedSeq(G__11034__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11033);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__7248__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7248__auto__)) {
          var and__7248__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__7248__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__7248__auto____$1;
          }
        } else {
          return and__7248__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__7248__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7248__auto__)) {
          var and__7248__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__7248__auto____$1)) {
            var and__7248__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__7248__auto____$2)) {
              var and__7248__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__7248__auto____$3)) {
                var and__7248__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__7248__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__7248__auto____$4;
                }
              } else {
                return and__7248__auto____$3;
              }
            } else {
              return and__7248__auto____$2;
            }
          } else {
            return and__7248__auto____$1;
          }
        } else {
          return and__7248__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__7248__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7248__auto__)) {
          var and__7248__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__7248__auto____$1)) {
            var and__7248__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__7248__auto____$2)) {
              var and__7248__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__7248__auto____$3)) {
                var and__7248__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__7248__auto____$4)) {
                  var and__7248__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__7248__auto____$5)) {
                    var and__7248__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__7248__auto____$6)) {
                      var and__7248__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__7248__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__7248__auto____$7;
                      }
                    } else {
                      return and__7248__auto____$6;
                    }
                  } else {
                    return and__7248__auto____$5;
                  }
                } else {
                  return and__7248__auto____$4;
                }
              } else {
                return and__7248__auto____$3;
              }
            } else {
              return and__7248__auto____$2;
            }
          } else {
            return and__7248__auto____$1;
          }
        } else {
          return and__7248__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__11035__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__7248__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__7248__auto__)) {
            return cljs.core.every_QMARK_(function(and__7248__auto__) {
              return function(p1__11009_SHARP_) {
                var and__7248__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__11009_SHARP_) : p1.call(null, p1__11009_SHARP_);
                if (cljs.core.truth_(and__7248__auto____$1)) {
                  var and__7248__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__11009_SHARP_) : p2.call(null, p1__11009_SHARP_);
                  if (cljs.core.truth_(and__7248__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__11009_SHARP_) : p3.call(null, p1__11009_SHARP_);
                  } else {
                    return and__7248__auto____$2;
                  }
                } else {
                  return and__7248__auto____$1;
                }
              };
            }(and__7248__auto__), args);
          } else {
            return and__7248__auto__;
          }
        }());
      };
      var G__11035 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11036__i = 0, G__11036__a = new Array(arguments.length - 3);
          while (G__11036__i < G__11036__a.length) {
            G__11036__a[G__11036__i] = arguments[G__11036__i + 3];
            ++G__11036__i;
          }
          args = new cljs.core.IndexedSeq(G__11036__a, 0);
        }
        return G__11035__delegate.call(this, x, y, z, args);
      };
      G__11035.cljs$lang$maxFixedArity = 3;
      G__11035.cljs$lang$applyTo = function(arglist__11037) {
        var x = cljs.core.first(arglist__11037);
        arglist__11037 = cljs.core.next(arglist__11037);
        var y = cljs.core.first(arglist__11037);
        arglist__11037 = cljs.core.next(arglist__11037);
        var z = cljs.core.first(arglist__11037);
        var args = cljs.core.rest(arglist__11037);
        return G__11035__delegate(x, y, z, args);
      };
      G__11035.cljs$core$IFn$_invoke$arity$variadic = G__11035__delegate;
      return G__11035;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__11038 = null;
          if (arguments.length > 3) {
            var G__11039__i = 0, G__11039__a = new Array(arguments.length - 3);
            while (G__11039__i < G__11039__a.length) {
              G__11039__a[G__11039__i] = arguments[G__11039__i + 3];
              ++G__11039__i;
            }
            G__11038 = new cljs.core.IndexedSeq(G__11039__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11038);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__11010_SHARP_) {
            return p1__11010_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11010_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11010_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__11011_SHARP_) {
            var and__7248__auto__ = p1__11011_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11011_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11011_SHARP_.call(null, x);
            if (cljs.core.truth_(and__7248__auto__)) {
              return p1__11011_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11011_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__11011_SHARP_.call(null, y);
            } else {
              return and__7248__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__11012_SHARP_) {
            var and__7248__auto__ = p1__11012_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11012_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11012_SHARP_.call(null, x);
            if (cljs.core.truth_(and__7248__auto__)) {
              var and__7248__auto____$1 = p1__11012_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11012_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__11012_SHARP_.call(null, y);
              if (cljs.core.truth_(and__7248__auto____$1)) {
                return p1__11012_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11012_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__11012_SHARP_.call(null, z);
              } else {
                return and__7248__auto____$1;
              }
            } else {
              return and__7248__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__11040__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__7248__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__7248__auto__)) {
              return cljs.core.every_QMARK_(function(and__7248__auto__, ps__$1) {
                return function(p1__11013_SHARP_) {
                  return cljs.core.every_QMARK_(p1__11013_SHARP_, args);
                };
              }(and__7248__auto__, ps__$1), ps__$1);
            } else {
              return and__7248__auto__;
            }
          }());
        };
        var G__11040 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__11041__i = 0, G__11041__a = new Array(arguments.length - 3);
            while (G__11041__i < G__11041__a.length) {
              G__11041__a[G__11041__i] = arguments[G__11041__i + 3];
              ++G__11041__i;
            }
            args = new cljs.core.IndexedSeq(G__11041__a, 0);
          }
          return G__11040__delegate.call(this, x, y, z, args);
        };
        G__11040.cljs$lang$maxFixedArity = 3;
        G__11040.cljs$lang$applyTo = function(arglist__11042) {
          var x = cljs.core.first(arglist__11042);
          arglist__11042 = cljs.core.next(arglist__11042);
          var y = cljs.core.first(arglist__11042);
          arglist__11042 = cljs.core.next(arglist__11042);
          var z = cljs.core.first(arglist__11042);
          var args = cljs.core.rest(arglist__11042);
          return G__11040__delegate(x, y, z, args);
        };
        G__11040.cljs$core$IFn$_invoke$arity$variadic = G__11040__delegate;
        return G__11040;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__11043 = null;
            if (arguments.length > 3) {
              var G__11044__i = 0, G__11044__a = new Array(arguments.length - 3);
              while (G__11044__i < G__11044__a.length) {
                G__11044__a[G__11044__i] = arguments[G__11044__i + 3];
                ++G__11044__i;
              }
              G__11043 = new cljs.core.IndexedSeq(G__11044__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11043);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq11015) {
  var G__11016 = cljs.core.first(seq11015);
  var seq11015__$1 = cljs.core.next(seq11015);
  var G__11017 = cljs.core.first(seq11015__$1);
  var seq11015__$2 = cljs.core.next(seq11015__$1);
  var G__11018 = cljs.core.first(seq11015__$2);
  var seq11015__$3 = cljs.core.next(seq11015__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__11016, G__11017, G__11018, seq11015__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn(var_args) {
  var args11051 = [];
  var len__8373__auto___11058 = arguments.length;
  var i__8374__auto___11059 = 0;
  while (true) {
    if (i__8374__auto___11059 < len__8373__auto___11058) {
      args11051.push(arguments[i__8374__auto___11059]);
      var G__11060 = i__8374__auto___11059 + 1;
      i__8374__auto___11059 = G__11060;
      continue;
    } else {
    }
    break;
  }
  var G__11057 = args11051.length;
  switch(G__11057) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args11051.slice(3), 0, null);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__7260__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__7260__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        var or__7260__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__7260__auto____$1)) {
          return or__7260__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__11062__delegate = function(x, y, z, args) {
        var or__7260__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__11062 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11063__i = 0, G__11063__a = new Array(arguments.length - 3);
          while (G__11063__i < G__11063__a.length) {
            G__11063__a[G__11063__i] = arguments[G__11063__i + 3];
            ++G__11063__i;
          }
          args = new cljs.core.IndexedSeq(G__11063__a, 0);
        }
        return G__11062__delegate.call(this, x, y, z, args);
      };
      G__11062.cljs$lang$maxFixedArity = 3;
      G__11062.cljs$lang$applyTo = function(arglist__11064) {
        var x = cljs.core.first(arglist__11064);
        arglist__11064 = cljs.core.next(arglist__11064);
        var y = cljs.core.first(arglist__11064);
        arglist__11064 = cljs.core.next(arglist__11064);
        var z = cljs.core.first(arglist__11064);
        var args = cljs.core.rest(arglist__11064);
        return G__11062__delegate(x, y, z, args);
      };
      G__11062.cljs$core$IFn$_invoke$arity$variadic = G__11062__delegate;
      return G__11062;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__11065 = null;
          if (arguments.length > 3) {
            var G__11066__i = 0, G__11066__a = new Array(arguments.length - 3);
            while (G__11066__i < G__11066__a.length) {
              G__11066__a[G__11066__i] = arguments[G__11066__i + 3];
              ++G__11066__i;
            }
            G__11065 = new cljs.core.IndexedSeq(G__11066__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11065);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__7260__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__7260__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        var or__7260__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__7260__auto____$1)) {
          return or__7260__auto____$1;
        } else {
          var or__7260__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__7260__auto____$2)) {
            return or__7260__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__7260__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        var or__7260__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__7260__auto____$1)) {
          return or__7260__auto____$1;
        } else {
          var or__7260__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__7260__auto____$2)) {
            return or__7260__auto____$2;
          } else {
            var or__7260__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__7260__auto____$3)) {
              return or__7260__auto____$3;
            } else {
              var or__7260__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__7260__auto____$4)) {
                return or__7260__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__11067__delegate = function(x, y, z, args) {
        var or__7260__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return cljs.core.some(function(or__7260__auto__) {
            return function(p1__11045_SHARP_) {
              var or__7260__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__11045_SHARP_) : p1.call(null, p1__11045_SHARP_);
              if (cljs.core.truth_(or__7260__auto____$1)) {
                return or__7260__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__11045_SHARP_) : p2.call(null, p1__11045_SHARP_);
              }
            };
          }(or__7260__auto__), args);
        }
      };
      var G__11067 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11068__i = 0, G__11068__a = new Array(arguments.length - 3);
          while (G__11068__i < G__11068__a.length) {
            G__11068__a[G__11068__i] = arguments[G__11068__i + 3];
            ++G__11068__i;
          }
          args = new cljs.core.IndexedSeq(G__11068__a, 0);
        }
        return G__11067__delegate.call(this, x, y, z, args);
      };
      G__11067.cljs$lang$maxFixedArity = 3;
      G__11067.cljs$lang$applyTo = function(arglist__11069) {
        var x = cljs.core.first(arglist__11069);
        arglist__11069 = cljs.core.next(arglist__11069);
        var y = cljs.core.first(arglist__11069);
        arglist__11069 = cljs.core.next(arglist__11069);
        var z = cljs.core.first(arglist__11069);
        var args = cljs.core.rest(arglist__11069);
        return G__11067__delegate(x, y, z, args);
      };
      G__11067.cljs$core$IFn$_invoke$arity$variadic = G__11067__delegate;
      return G__11067;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__11070 = null;
          if (arguments.length > 3) {
            var G__11071__i = 0, G__11071__a = new Array(arguments.length - 3);
            while (G__11071__i < G__11071__a.length) {
              G__11071__a[G__11071__i] = arguments[G__11071__i + 3];
              ++G__11071__i;
            }
            G__11070 = new cljs.core.IndexedSeq(G__11071__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11070);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__7260__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        var or__7260__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__7260__auto____$1)) {
          return or__7260__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__7260__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        var or__7260__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__7260__auto____$1)) {
          return or__7260__auto____$1;
        } else {
          var or__7260__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__7260__auto____$2)) {
            return or__7260__auto____$2;
          } else {
            var or__7260__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__7260__auto____$3)) {
              return or__7260__auto____$3;
            } else {
              var or__7260__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__7260__auto____$4)) {
                return or__7260__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__7260__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        var or__7260__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__7260__auto____$1)) {
          return or__7260__auto____$1;
        } else {
          var or__7260__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__7260__auto____$2)) {
            return or__7260__auto____$2;
          } else {
            var or__7260__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__7260__auto____$3)) {
              return or__7260__auto____$3;
            } else {
              var or__7260__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__7260__auto____$4)) {
                return or__7260__auto____$4;
              } else {
                var or__7260__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__7260__auto____$5)) {
                  return or__7260__auto____$5;
                } else {
                  var or__7260__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__7260__auto____$6)) {
                    return or__7260__auto____$6;
                  } else {
                    var or__7260__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__7260__auto____$7)) {
                      return or__7260__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__11072__delegate = function(x, y, z, args) {
        var or__7260__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return cljs.core.some(function(or__7260__auto__) {
            return function(p1__11046_SHARP_) {
              var or__7260__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__11046_SHARP_) : p1.call(null, p1__11046_SHARP_);
              if (cljs.core.truth_(or__7260__auto____$1)) {
                return or__7260__auto____$1;
              } else {
                var or__7260__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__11046_SHARP_) : p2.call(null, p1__11046_SHARP_);
                if (cljs.core.truth_(or__7260__auto____$2)) {
                  return or__7260__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__11046_SHARP_) : p3.call(null, p1__11046_SHARP_);
                }
              }
            };
          }(or__7260__auto__), args);
        }
      };
      var G__11072 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11073__i = 0, G__11073__a = new Array(arguments.length - 3);
          while (G__11073__i < G__11073__a.length) {
            G__11073__a[G__11073__i] = arguments[G__11073__i + 3];
            ++G__11073__i;
          }
          args = new cljs.core.IndexedSeq(G__11073__a, 0);
        }
        return G__11072__delegate.call(this, x, y, z, args);
      };
      G__11072.cljs$lang$maxFixedArity = 3;
      G__11072.cljs$lang$applyTo = function(arglist__11074) {
        var x = cljs.core.first(arglist__11074);
        arglist__11074 = cljs.core.next(arglist__11074);
        var y = cljs.core.first(arglist__11074);
        arglist__11074 = cljs.core.next(arglist__11074);
        var z = cljs.core.first(arglist__11074);
        var args = cljs.core.rest(arglist__11074);
        return G__11072__delegate(x, y, z, args);
      };
      G__11072.cljs$core$IFn$_invoke$arity$variadic = G__11072__delegate;
      return G__11072;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__11075 = null;
          if (arguments.length > 3) {
            var G__11076__i = 0, G__11076__a = new Array(arguments.length - 3);
            while (G__11076__i < G__11076__a.length) {
              G__11076__a[G__11076__i] = arguments[G__11076__i + 3];
              ++G__11076__i;
            }
            G__11075 = new cljs.core.IndexedSeq(G__11076__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11075);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__11047_SHARP_) {
            return p1__11047_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11047_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11047_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__11048_SHARP_) {
            var or__7260__auto__ = p1__11048_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11048_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11048_SHARP_.call(null, x);
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              return p1__11048_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11048_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__11048_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__11049_SHARP_) {
            var or__7260__auto__ = p1__11049_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11049_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11049_SHARP_.call(null, x);
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              var or__7260__auto____$1 = p1__11049_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11049_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__11049_SHARP_.call(null, y);
              if (cljs.core.truth_(or__7260__auto____$1)) {
                return or__7260__auto____$1;
              } else {
                return p1__11049_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11049_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__11049_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__11077__delegate = function(x, y, z, args) {
          var or__7260__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__7260__auto__)) {
            return or__7260__auto__;
          } else {
            return cljs.core.some(function(or__7260__auto__, ps__$1) {
              return function(p1__11050_SHARP_) {
                return cljs.core.some(p1__11050_SHARP_, args);
              };
            }(or__7260__auto__, ps__$1), ps__$1);
          }
        };
        var G__11077 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__11078__i = 0, G__11078__a = new Array(arguments.length - 3);
            while (G__11078__i < G__11078__a.length) {
              G__11078__a[G__11078__i] = arguments[G__11078__i + 3];
              ++G__11078__i;
            }
            args = new cljs.core.IndexedSeq(G__11078__a, 0);
          }
          return G__11077__delegate.call(this, x, y, z, args);
        };
        G__11077.cljs$lang$maxFixedArity = 3;
        G__11077.cljs$lang$applyTo = function(arglist__11079) {
          var x = cljs.core.first(arglist__11079);
          arglist__11079 = cljs.core.next(arglist__11079);
          var y = cljs.core.first(arglist__11079);
          arglist__11079 = cljs.core.next(arglist__11079);
          var z = cljs.core.first(arglist__11079);
          var args = cljs.core.rest(arglist__11079);
          return G__11077__delegate(x, y, z, args);
        };
        G__11077.cljs$core$IFn$_invoke$arity$variadic = G__11077__delegate;
        return G__11077;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__11080 = null;
            if (arguments.length > 3) {
              var G__11081__i = 0, G__11081__a = new Array(arguments.length - 3);
              while (G__11081__i < G__11081__a.length) {
                G__11081__a[G__11081__i] = arguments[G__11081__i + 3];
                ++G__11081__i;
              }
              G__11080 = new cljs.core.IndexedSeq(G__11081__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11080);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq11052) {
  var G__11053 = cljs.core.first(seq11052);
  var seq11052__$1 = cljs.core.next(seq11052);
  var G__11054 = cljs.core.first(seq11052__$1);
  var seq11052__$2 = cljs.core.next(seq11052__$1);
  var G__11055 = cljs.core.first(seq11052__$2);
  var seq11052__$3 = cljs.core.next(seq11052__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__11053, G__11054, G__11055, seq11052__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map(var_args) {
  var args11083 = [];
  var len__8373__auto___11103 = arguments.length;
  var i__8374__auto___11104 = 0;
  while (true) {
    if (i__8374__auto___11104 < len__8373__auto___11103) {
      args11083.push(arguments[i__8374__auto___11104]);
      var G__11105 = i__8374__auto___11104 + 1;
      i__8374__auto___11104 = G__11105;
      continue;
    } else {
    }
    break;
  }
  var G__11090 = args11083.length;
  switch(G__11090) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args11083.slice(4), 0, null);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8392__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__11107 = null;
      var G__11107__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__11107__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__11107__2 = function(result, input) {
        var G__11091 = result;
        var G__11092 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__11091, G__11092) : rf.call(null, G__11091, G__11092);
      };
      var G__11107__3 = function() {
        var G__11108__delegate = function(result, input, inputs) {
          var G__11093 = result;
          var G__11094 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__11093, G__11094) : rf.call(null, G__11093, G__11094);
        };
        var G__11108 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__11109__i = 0, G__11109__a = new Array(arguments.length - 2);
            while (G__11109__i < G__11109__a.length) {
              G__11109__a[G__11109__i] = arguments[G__11109__i + 2];
              ++G__11109__i;
            }
            inputs = new cljs.core.IndexedSeq(G__11109__a, 0);
          }
          return G__11108__delegate.call(this, result, input, inputs);
        };
        G__11108.cljs$lang$maxFixedArity = 2;
        G__11108.cljs$lang$applyTo = function(arglist__11110) {
          var result = cljs.core.first(arglist__11110);
          arglist__11110 = cljs.core.next(arglist__11110);
          var input = cljs.core.first(arglist__11110);
          var inputs = cljs.core.rest(arglist__11110);
          return G__11108__delegate(result, input, inputs);
        };
        G__11108.cljs$core$IFn$_invoke$arity$variadic = G__11108__delegate;
        return G__11108;
      }();
      G__11107 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__11107__0.call(this);
          case 1:
            return G__11107__1.call(this, result);
          case 2:
            return G__11107__2.call(this, result, input);
          default:
            var G__11111 = null;
            if (arguments.length > 2) {
              var G__11112__i = 0, G__11112__a = new Array(arguments.length - 2);
              while (G__11112__i < G__11112__a.length) {
                G__11112__a[G__11112__i] = arguments[G__11112__i + 2];
                ++G__11112__i;
              }
              G__11111 = new cljs.core.IndexedSeq(G__11112__a, 0);
            }
            return G__11107__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__11111);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__11107.cljs$lang$maxFixedArity = 2;
      G__11107.cljs$lang$applyTo = G__11107__3.cljs$lang$applyTo;
      G__11107.cljs$core$IFn$_invoke$arity$0 = G__11107__0;
      G__11107.cljs$core$IFn$_invoke$arity$1 = G__11107__1;
      G__11107.cljs$core$IFn$_invoke$arity$2 = G__11107__2;
      G__11107.cljs$core$IFn$_invoke$arity$variadic = G__11107__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__11107;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__8183__auto___11113 = size;
        var i_11114 = 0;
        while (true) {
          if (i_11114 < n__8183__auto___11113) {
            cljs.core.chunk_append(b, function() {
              var G__11095 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11114);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11095) : f.call(null, G__11095);
            }());
            var G__11115 = i_11114 + 1;
            i_11114 = G__11115;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__11096 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11096) : f.call(null, G__11096);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__11097 = cljs.core.first(s1);
        var G__11098 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11097, G__11098) : f.call(null, G__11097, G__11098);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__11099 = cljs.core.first(s1);
        var G__11100 = cljs.core.first(s2);
        var G__11101 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11099, G__11100, G__11101) : f.call(null, G__11099, G__11100, G__11101);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__11082_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__11082_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq11084) {
  var G__11085 = cljs.core.first(seq11084);
  var seq11084__$1 = cljs.core.next(seq11084);
  var G__11086 = cljs.core.first(seq11084__$1);
  var seq11084__$2 = cljs.core.next(seq11084__$1);
  var G__11087 = cljs.core.first(seq11084__$2);
  var seq11084__$3 = cljs.core.next(seq11084__$2);
  var G__11088 = cljs.core.first(seq11084__$3);
  var seq11084__$4 = cljs.core.next(seq11084__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__11085, G__11086, G__11087, G__11088, seq11084__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take(var_args) {
  var args11116 = [];
  var len__8373__auto___11119 = arguments.length;
  var i__8374__auto___11120 = 0;
  while (true) {
    if (i__8374__auto___11120 < len__8373__auto___11119) {
      args11116.push(arguments[i__8374__auto___11120]);
      var G__11121 = i__8374__auto___11120 + 1;
      i__8374__auto___11120 = G__11121;
      continue;
    } else {
    }
    break;
  }
  var G__11118 = args11116.length;
  switch(G__11118) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11116.length)].join(""));
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__11123 = null;
        var G__11123__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11123__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11123__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__11123 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11123__0.call(this);
            case 1:
              return G__11123__1.call(this, result);
            case 2:
              return G__11123__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11123.cljs$core$IFn$_invoke$arity$0 = G__11123__0;
        G__11123.cljs$core$IFn$_invoke$arity$1 = G__11123__1;
        G__11123.cljs$core$IFn$_invoke$arity$2 = G__11123__2;
        return G__11123;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4657__auto__ = cljs.core.seq(coll);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop(var_args) {
  var args11124 = [];
  var len__8373__auto___11127 = arguments.length;
  var i__8374__auto___11128 = 0;
  while (true) {
    if (i__8374__auto___11128 < len__8373__auto___11127) {
      args11124.push(arguments[i__8374__auto___11128]);
      var G__11129 = i__8374__auto___11128 + 1;
      i__8374__auto___11128 = G__11129;
      continue;
    } else {
    }
    break;
  }
  var G__11126 = args11124.length;
  switch(G__11126) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11124.length)].join(""));
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__11131 = null;
        var G__11131__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11131__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11131__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__11131 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11131__0.call(this);
            case 1:
              return G__11131__1.call(this, result);
            case 2:
              return G__11131__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11131.cljs$core$IFn$_invoke$arity$0 = G__11131__0;
        G__11131.cljs$core$IFn$_invoke$arity$1 = G__11131__1;
        G__11131.cljs$core$IFn$_invoke$arity$2 = G__11131__2;
        return G__11131;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__11132 = n__$1 - 1;
        var G__11133 = cljs.core.rest(s);
        n__$1 = G__11132;
        coll__$1 = G__11133;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last(var_args) {
  var args11134 = [];
  var len__8373__auto___11137 = arguments.length;
  var i__8374__auto___11138 = 0;
  while (true) {
    if (i__8374__auto___11138 < len__8373__auto___11137) {
      args11134.push(arguments[i__8374__auto___11138]);
      var G__11139 = i__8374__auto___11138 + 1;
      i__8374__auto___11138 = G__11139;
      continue;
    } else {
    }
    break;
  }
  var G__11136 = args11134.length;
  switch(G__11136) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11134.length)].join(""));
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__11141 = cljs.core.next(s);
      var G__11142 = cljs.core.next(lead);
      s = G__11141;
      lead = G__11142;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while(var_args) {
  var args11143 = [];
  var len__8373__auto___11148 = arguments.length;
  var i__8374__auto___11149 = 0;
  while (true) {
    if (i__8374__auto___11149 < len__8373__auto___11148) {
      args11143.push(arguments[i__8374__auto___11149]);
      var G__11150 = i__8374__auto___11149 + 1;
      i__8374__auto___11149 = G__11150;
      continue;
    } else {
    }
    break;
  }
  var G__11145 = args11143.length;
  switch(G__11145) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11143.length)].join(""));
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__11152 = null;
        var G__11152__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11152__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11152__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__7248__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__7248__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__7248__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__11152 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11152__0.call(this);
            case 1:
              return G__11152__1.call(this, result);
            case 2:
              return G__11152__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11152.cljs$core$IFn$_invoke$arity$0 = G__11152__0;
        G__11152.cljs$core$IFn$_invoke$arity$1 = G__11152__1;
        G__11152.cljs$core$IFn$_invoke$arity$2 = G__11152__2;
        return G__11152;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__7248__auto__ = s;
        if (and__7248__auto__) {
          var G__11147 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__11147) : pred__$1.call(null, G__11147);
        } else {
          return and__7248__auto__;
        }
      }())) {
        var G__11153 = pred__$1;
        var G__11154 = cljs.core.rest(s);
        pred__$1 = G__11153;
        coll__$1 = G__11154;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs.core.cycle.cljs$core$IFn$_invoke$arity$1 ? cljs.core.cycle.cljs$core$IFn$_invoke$arity$1(s) : cljs.core.cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat(var_args) {
  var args11155 = [];
  var len__8373__auto___11158 = arguments.length;
  var i__8374__auto___11159 = 0;
  while (true) {
    if (i__8374__auto___11159 < len__8373__auto___11158) {
      args11155.push(arguments[i__8374__auto___11159]);
      var G__11160 = i__8374__auto___11159 + 1;
      i__8374__auto___11159 = G__11160;
      continue;
    } else {
    }
    break;
  }
  var G__11157 = args11155.length;
  switch(G__11157) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11155.length)].join(""));
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly(var_args) {
  var args11162 = [];
  var len__8373__auto___11165 = arguments.length;
  var i__8374__auto___11166 = 0;
  while (true) {
    if (i__8374__auto___11166 < len__8373__auto___11165) {
      args11162.push(arguments[i__8374__auto___11166]);
      var G__11167 = i__8374__auto___11166 + 1;
      i__8374__auto___11166 = G__11167;
      continue;
    } else {
    }
    break;
  }
  var G__11164 = args11162.length;
  switch(G__11164) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11162.length)].join(""));
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    var G__11171 = f;
    var G__11172 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.iterate.cljs$core$IFn$_invoke$arity$2 ? cljs.core.iterate.cljs$core$IFn$_invoke$arity$2(G__11171, G__11172) : cljs.core.iterate.call(null, G__11171, G__11172);
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave(var_args) {
  var args11173 = [];
  var len__8373__auto___11179 = arguments.length;
  var i__8374__auto___11180 = 0;
  while (true) {
    if (i__8374__auto___11180 < len__8373__auto___11179) {
      args11173.push(arguments[i__8374__auto___11180]);
      var G__11181 = i__8374__auto___11180 + 1;
      i__8374__auto___11180 = G__11181;
      continue;
    } else {
    }
    break;
  }
  var G__11178 = args11173.length;
  switch(G__11178) {
    case 0:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args11173.slice(2), 0, null);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8392__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.List.EMPTY;
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$1 = function(c1) {
  return new cljs.core.LazySeq(null, function() {
    return c1;
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq11174) {
  var G__11175 = cljs.core.first(seq11174);
  var seq11174__$1 = cljs.core.next(seq11174);
  var G__11176 = cljs.core.first(seq11174__$1);
  var seq11174__$2 = cljs.core.next(seq11174__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__11175, G__11176, seq11174__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose(var_args) {
  var args11183 = [];
  var len__8373__auto___11186 = arguments.length;
  var i__8374__auto___11187 = 0;
  while (true) {
    if (i__8374__auto___11187 < len__8373__auto___11186) {
      args11183.push(arguments[i__8374__auto___11187]);
      var G__11188 = i__8374__auto___11187 + 1;
      i__8374__auto___11187 = G__11188;
      continue;
    } else {
    }
    break;
  }
  var G__11185 = args11183.length;
  switch(G__11185) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11183.length)].join(""));
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__11190 = null;
        var G__11190__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11190__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11190__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__11190 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11190__0.call(this);
            case 1:
              return G__11190__1.call(this, result);
            case 2:
              return G__11190__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11190.cljs$core$IFn$_invoke$arity$0 = G__11190__0;
        G__11190.cljs$core$IFn$_invoke$arity$1 = G__11190__1;
        G__11190.cljs$core$IFn$_invoke$arity$2 = G__11190__2;
        return G__11190;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4655__auto__ = cljs.core.seq(coll);
      if (temp__4655__auto__) {
        var coll__$1 = temp__4655__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat(var_args) {
  var args11199 = [];
  var len__8373__auto___11204 = arguments.length;
  var i__8374__auto___11205 = 0;
  while (true) {
    if (i__8374__auto___11205 < len__8373__auto___11204) {
      args11199.push(arguments[i__8374__auto___11205]);
      var G__11206 = i__8374__auto___11205 + 1;
      i__8374__auto___11205 = G__11206;
      continue;
    } else {
    }
    break;
  }
  var G__11203 = args11199.length;
  switch(G__11203) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args11199.slice(1), 0, null);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8392__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq11200) {
  var G__11201 = cljs.core.first(seq11200);
  var seq11200__$1 = cljs.core.next(seq11200);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__11201, seq11200__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter(var_args) {
  var args11208 = [];
  var len__8373__auto___11212 = arguments.length;
  var i__8374__auto___11213 = 0;
  while (true) {
    if (i__8374__auto___11213 < len__8373__auto___11212) {
      args11208.push(arguments[i__8374__auto___11213]);
      var G__11214 = i__8374__auto___11213 + 1;
      i__8374__auto___11213 = G__11214;
      continue;
    } else {
    }
    break;
  }
  var G__11210 = args11208.length;
  switch(G__11210) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11208.length)].join(""));
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__11216 = null;
      var G__11216__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__11216__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__11216__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__11216 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__11216__0.call(this);
          case 1:
            return G__11216__1.call(this, result);
          case 2:
            return G__11216__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__11216.cljs$core$IFn$_invoke$arity$0 = G__11216__0;
      G__11216.cljs$core$IFn$_invoke$arity$1 = G__11216__1;
      G__11216.cljs$core$IFn$_invoke$arity$2 = G__11216__2;
      return G__11216;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__8183__auto___11217 = size;
        var i_11218 = 0;
        while (true) {
          if (i_11218 < n__8183__auto___11217) {
            if (cljs.core.truth_(function() {
              var G__11211 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11218);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__11211) : pred.call(null, G__11211);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11218));
            } else {
            }
            var G__11219 = i_11218 + 1;
            i_11218 = G__11219;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove(var_args) {
  var args11220 = [];
  var len__8373__auto___11223 = arguments.length;
  var i__8374__auto___11224 = 0;
  while (true) {
    if (i__8374__auto___11224 < len__8373__auto___11223) {
      args11220.push(arguments[i__8374__auto___11224]);
      var G__11225 = i__8374__auto___11224 + 1;
      i__8374__auto___11224 = G__11225;
      continue;
    } else {
    }
    break;
  }
  var G__11222 = args11220.length;
  switch(G__11222) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11220.length)].join(""));
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__11227_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__11227_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into(var_args) {
  var args11228 = [];
  var len__8373__auto___11233 = arguments.length;
  var i__8374__auto___11234 = 0;
  while (true) {
    if (i__8374__auto___11234 < len__8373__auto___11233) {
      args11228.push(arguments[i__8374__auto___11234]);
      var G__11235 = i__8374__auto___11234 + 1;
      i__8374__auto___11234 = G__11235;
      continue;
    } else {
    }
    break;
  }
  var G__11230 = args11228.length;
  switch(G__11230) {
    case 0:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11228.length)].join(""));
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.into.cljs$core$IFn$_invoke$arity$1 = function(to) {
  return to;
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv(var_args) {
  var args11237 = [];
  var len__8373__auto___11245 = arguments.length;
  var i__8374__auto___11246 = 0;
  while (true) {
    if (i__8374__auto___11246 < len__8373__auto___11245) {
      args11237.push(arguments[i__8374__auto___11246]);
      var G__11247 = i__8374__auto___11246 + 1;
      i__8374__auto___11246 = G__11247;
      continue;
    } else {
    }
    break;
  }
  var G__11244 = args11237.length;
  switch(G__11244) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args11237.slice(4), 0, null);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8392__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq11238) {
  var G__11239 = cljs.core.first(seq11238);
  var seq11238__$1 = cljs.core.next(seq11238);
  var G__11240 = cljs.core.first(seq11238__$1);
  var seq11238__$2 = cljs.core.next(seq11238__$1);
  var G__11241 = cljs.core.first(seq11238__$2);
  var seq11238__$3 = cljs.core.next(seq11238__$2);
  var G__11242 = cljs.core.first(seq11238__$3);
  var seq11238__$4 = cljs.core.next(seq11238__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__11239, G__11240, G__11241, G__11242, seq11238__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition(var_args) {
  var args11249 = [];
  var len__8373__auto___11252 = arguments.length;
  var i__8374__auto___11253 = 0;
  while (true) {
    if (i__8374__auto___11253 < len__8373__auto___11252) {
      args11249.push(arguments[i__8374__auto___11253]);
      var G__11254 = i__8374__auto___11253 + 1;
      i__8374__auto___11253 = G__11254;
      continue;
    } else {
    }
    break;
  }
  var G__11251 = args11249.length;
  switch(G__11251) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11249.length)].join(""));
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        var x__8102__auto__ = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad));
        return cljs.core._conj(cljs.core.List.EMPTY, x__8102__auto__);
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in(var_args) {
  var args11256 = [];
  var len__8373__auto___11259 = arguments.length;
  var i__8374__auto___11260 = 0;
  while (true) {
    if (i__8374__auto___11260 < len__8373__auto___11259) {
      args11256.push(arguments[i__8374__auto___11260]);
      var G__11261 = i__8374__auto___11260 + 1;
      i__8374__auto___11260 = G__11261;
      continue;
    } else {
    }
    break;
  }
  var G__11258 = args11256.length;
  switch(G__11258) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11256.length)].join(""));
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.get, m, ks);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (!(ks__$1 == null)) {
      var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
      if (sentinel === m__$2) {
        return not_found;
      } else {
        var G__11263 = sentinel;
        var G__11264 = m__$2;
        var G__11265 = cljs.core.next(ks__$1);
        sentinel = G__11263;
        m__$1 = G__11264;
        ks__$1 = G__11265;
        continue;
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__11266, v) {
  var vec__11273 = p__11266;
  var seq__11274 = cljs.core.seq(vec__11273);
  var first__11275 = cljs.core.first(seq__11274);
  var seq__11274__$1 = cljs.core.next(seq__11274);
  var k = first__11275;
  var ks = seq__11274__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11276 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__11277 = ks;
      var G__11278 = v;
      return cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3 ? cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3(G__11276, G__11277, G__11278) : cljs.core.assoc_in.call(null, G__11276, G__11277, G__11278);
    }());
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in(var_args) {
  var args11279 = [];
  var len__8373__auto___11319 = arguments.length;
  var i__8374__auto___11320 = 0;
  while (true) {
    if (i__8374__auto___11320 < len__8373__auto___11319) {
      args11279.push(arguments[i__8374__auto___11320]);
      var G__11321 = i__8374__auto___11320 + 1;
      i__8374__auto___11320 = G__11321;
      continue;
    } else {
    }
    break;
  }
  var G__11288 = args11279.length;
  switch(G__11288) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args11279.slice(6), 0, null);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__8392__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__11289, f) {
  var vec__11290 = p__11289;
  var seq__11291 = cljs.core.seq(vec__11290);
  var first__11292 = cljs.core.first(seq__11291);
  var seq__11291__$1 = cljs.core.next(seq__11291);
  var k = first__11292;
  var ks = seq__11291__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11293 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11293) : f.call(null, G__11293);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__11294, f, a) {
  var vec__11295 = p__11294;
  var seq__11296 = cljs.core.seq(vec__11295);
  var first__11297 = cljs.core.first(seq__11296);
  var seq__11296__$1 = cljs.core.next(seq__11296);
  var k = first__11297;
  var ks = seq__11296__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11298 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__11299 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11298, G__11299) : f.call(null, G__11298, G__11299);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__11300, f, a, b) {
  var vec__11301 = p__11300;
  var seq__11302 = cljs.core.seq(vec__11301);
  var first__11303 = cljs.core.first(seq__11302);
  var seq__11302__$1 = cljs.core.next(seq__11302);
  var k = first__11303;
  var ks = seq__11302__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11304 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__11305 = a;
      var G__11306 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11304, G__11305, G__11306) : f.call(null, G__11304, G__11305, G__11306);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__11307, f, a, b, c) {
  var vec__11308 = p__11307;
  var seq__11309 = cljs.core.seq(vec__11308);
  var first__11310 = cljs.core.first(seq__11309);
  var seq__11309__$1 = cljs.core.next(seq__11309);
  var k = first__11310;
  var ks = seq__11309__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11311 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__11312 = a;
      var G__11313 = b;
      var G__11314 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__11311, G__11312, G__11313, G__11314) : f.call(null, G__11311, G__11312, G__11313, G__11314);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__11315, f, a, b, c, args) {
  var vec__11316 = p__11315;
  var seq__11317 = cljs.core.seq(vec__11316);
  var first__11318 = cljs.core.first(seq__11317);
  var seq__11317__$1 = cljs.core.next(seq__11317);
  var k = first__11318;
  var ks = seq__11317__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq11280) {
  var G__11281 = cljs.core.first(seq11280);
  var seq11280__$1 = cljs.core.next(seq11280);
  var G__11282 = cljs.core.first(seq11280__$1);
  var seq11280__$2 = cljs.core.next(seq11280__$1);
  var G__11283 = cljs.core.first(seq11280__$2);
  var seq11280__$3 = cljs.core.next(seq11280__$2);
  var G__11284 = cljs.core.first(seq11280__$3);
  var seq11280__$4 = cljs.core.next(seq11280__$3);
  var G__11285 = cljs.core.first(seq11280__$4);
  var seq11280__$5 = cljs.core.next(seq11280__$4);
  var G__11286 = cljs.core.first(seq11280__$5);
  var seq11280__$6 = cljs.core.next(seq11280__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__11281, G__11282, G__11283, G__11284, G__11285, G__11286, seq11280__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update(var_args) {
  var args11323 = [];
  var len__8373__auto___11343 = arguments.length;
  var i__8374__auto___11344 = 0;
  while (true) {
    if (i__8374__auto___11344 < len__8373__auto___11343) {
      args11323.push(arguments[i__8374__auto___11344]);
      var G__11345 = i__8374__auto___11344 + 1;
      i__8374__auto___11344 = G__11345;
      continue;
    } else {
    }
    break;
  }
  var G__11332 = args11323.length;
  switch(G__11332) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args11323.slice(6), 0, null);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__8392__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__11333 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11333) : f.call(null, G__11333);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__11334 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__11335 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11334, G__11335) : f.call(null, G__11334, G__11335);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__11336 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__11337 = x;
    var G__11338 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11336, G__11337, G__11338) : f.call(null, G__11336, G__11337, G__11338);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__11339 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__11340 = x;
    var G__11341 = y;
    var G__11342 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__11339, G__11340, G__11341, G__11342) : f.call(null, G__11339, G__11340, G__11341, G__11342);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq11324) {
  var G__11325 = cljs.core.first(seq11324);
  var seq11324__$1 = cljs.core.next(seq11324);
  var G__11326 = cljs.core.first(seq11324__$1);
  var seq11324__$2 = cljs.core.next(seq11324__$1);
  var G__11327 = cljs.core.first(seq11324__$2);
  var seq11324__$3 = cljs.core.next(seq11324__$2);
  var G__11328 = cljs.core.first(seq11324__$3);
  var seq11324__$4 = cljs.core.next(seq11324__$3);
  var G__11329 = cljs.core.first(seq11324__$4);
  var seq11324__$5 = cljs.core.next(seq11324__$4);
  var G__11330 = cljs.core.first(seq11324__$5);
  var seq11324__$6 = cljs.core.next(seq11324__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__11325, G__11326, G__11327, G__11328, G__11329, G__11330, seq11324__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__11347 = ll - 5;
      var G__11348 = r;
      ll = G__11347;
      ret = G__11348;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = function() {
        var G__11353 = pv;
        var G__11354 = level - 5;
        var G__11355 = child;
        var G__11356 = tailnode;
        return cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4(G__11353, G__11354, G__11355, G__11356) : cljs.core.push_tail.call(null, G__11353, G__11354, G__11355, G__11356);
      }();
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No item "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(i), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" in vector of length "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__11357 = cljs.core.pv_aget(node, 0);
      var G__11358 = level - 5;
      node = G__11357;
      level = G__11358;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__11359 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__11360 = level - 5;
        node = G__11359;
        level = G__11360;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, function() {
      var G__11366 = pv;
      var G__11367 = level - 5;
      var G__11368 = cljs.core.pv_aget(node, subidx);
      var G__11369 = i;
      var G__11370 = val;
      return cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5 ? cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5(G__11366, G__11367, G__11368, G__11369, G__11370) : cljs.core.do_assoc.call(null, G__11366, G__11367, G__11368, G__11369, G__11370);
    }());
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = function() {
      var G__11374 = pv;
      var G__11375 = level - 5;
      var G__11376 = cljs.core.pv_aget(node, subidx);
      return cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3(G__11374, G__11375, G__11376) : cljs.core.pop_tail.call(null, G__11374, G__11375, G__11376);
    }();
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1, k)], null);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.indexOf = function() {
  var G__11387 = null;
  var G__11387__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11387__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11387 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11387__1.call(this, x);
      case 2:
        return G__11387__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11387.cljs$core$IFn$_invoke$arity$1 = G__11387__1;
  G__11387.cljs$core$IFn$_invoke$arity$2 = G__11387__2;
  return G__11387;
}();
cljs.core.PersistentVector.prototype.lastIndexOf = function() {
  var G__11388 = null;
  var G__11388__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11388__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11388 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11388__1.call(this, x);
      case 2:
        return G__11388__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11388.cljs$core$IFn$_invoke$arity$1 = G__11388__1;
  G__11388.cljs$core$IFn$_invoke$arity$2 = G__11388__2;
  return G__11388;
}();
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__11378 = init__$2;
              var G__11379 = j + i;
              var G__11380 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11378, G__11379, G__11380) : f.call(null, G__11378, G__11379, G__11380);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__11389 = j + 1;
              var G__11390 = init__$3;
              j = G__11389;
              init__$2 = G__11390;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11391 = i + len;
        var G__11392 = init__$2;
        i = G__11391;
        init__$1 = G__11392;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return coll__$1.cljs$core$ICollection$_conj$arity$2(null, val);
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds  [0,"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt), cljs.core.str.cljs$core$IFn$_invoke$arity$1("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = coll__$1.cljs$core$IIterable$_iterator$arity$1(null);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (me_iter.hasNext()) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__11381 = init__$2;
              var G__11382 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11381, G__11382) : f.call(null, G__11381, G__11382);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__11393 = j + 1;
              var G__11394 = init__$3;
              j = G__11393;
              init__$2 = G__11394;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11395 = i + len;
        var G__11396 = init__$2;
        i = G__11395;
        init__$1 = G__11396;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IVector$_assoc_n$arity$3(null, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0, null);
    } else {
      var G__11383 = coll__$1;
      var G__11384 = cljs.core.first_array_for_longvec(coll__$1);
      var G__11385 = 0;
      var G__11386 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11383, G__11384, G__11385, G__11386) : cljs.core.chunked_seq.call(null, G__11383, G__11384, G__11385, G__11386);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__8183__auto___11397 = len;
    var i_11398 = 0;
    while (true) {
      if (i_11398 < n__8183__auto___11397) {
        new_tail[i_11398] = self__.tail[i_11398];
        var G__11399 = i_11398 + 1;
        i_11398 = G__11399;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__11400 = null;
  var G__11400__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__11400__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__11400 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11400__2.call(this, self__, k);
      case 3:
        return G__11400__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11400.cljs$core$IFn$_invoke$arity$2 = G__11400__2;
  G__11400.cljs$core$IFn$_invoke$arity$3 = G__11400__3;
  return G__11400;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args11377) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11377)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__11401 = i + 1;
        var G__11402 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__11401;
        out = G__11402;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11404 = arguments.length;
  var i__8374__auto___11405 = 0;
  while (true) {
    if (i__8374__auto___11405 < len__8373__auto___11404) {
      args__8380__auto__.push(arguments[i__8374__auto___11405]);
      var G__11406 = i__8374__auto___11405 + 1;
      i__8374__auto___11405 = G__11406;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq11403) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11403));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.indexOf = function() {
  var G__11429 = null;
  var G__11429__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11429__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11429 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11429__1.call(this, x);
      case 2:
        return G__11429__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11429.cljs$core$IFn$_invoke$arity$1 = G__11429__1;
  G__11429.cljs$core$IFn$_invoke$arity$2 = G__11429__2;
  return G__11429;
}();
cljs.core.ChunkedSeq.prototype.lastIndexOf = function() {
  var G__11430 = null;
  var G__11430__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11430__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11430 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11430__1.call(this, x);
      case 2:
        return G__11430__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11430.cljs$core$IFn$_invoke$arity$1 = G__11430__1;
  G__11430.cljs$core$IFn$_invoke$arity$2 = G__11430__2;
  return G__11430;
}();
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__11407 = self__.vec;
      var G__11408 = self__.node;
      var G__11409 = self__.i;
      var G__11410 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11407, G__11408, G__11409, G__11410) : cljs.core.chunked_seq.call(null, G__11407, G__11408, G__11409, G__11410);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return coll__$1.cljs$core$IChunkedNext$_chunked_next$arity$1(null);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11411 = self__.vec;
    var G__11412 = self__.i + self__.off;
    var G__11413 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__11411, G__11412, G__11413) : cljs.core.subvec.call(null, G__11411, G__11412, G__11413);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__11414 = self__.vec;
    var G__11415 = self__.i + self__.off;
    var G__11416 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__11414, G__11415, G__11416) : cljs.core.subvec.call(null, G__11414, G__11415, G__11416);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__11417 = self__.vec;
      var G__11418 = self__.node;
      var G__11419 = self__.i;
      var G__11420 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11417, G__11418, G__11419, G__11420) : cljs.core.chunked_seq.call(null, G__11417, G__11418, G__11419, G__11420);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return coll__$1.cljs$core$IChunkedSeq$_chunked_rest$arity$1(null);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__11421 = self__.vec;
    var G__11422 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__11423 = end;
    var G__11424 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11421, G__11422, G__11423, G__11424) : cljs.core.chunked_seq.call(null, G__11421, G__11422, G__11423, G__11424);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__11425 = self__.vec;
    var G__11426 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__11427 = end;
    var G__11428 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11425, G__11426, G__11427, G__11428) : cljs.core.chunked_seq.call(null, G__11425, G__11426, G__11427, G__11428);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq(var_args) {
  var args11431 = [];
  var len__8373__auto___11434 = arguments.length;
  var i__8374__auto___11435 = 0;
  while (true) {
    if (i__8374__auto___11435 < len__8373__auto___11434) {
      args11431.push(arguments[i__8374__auto___11435]);
      var G__11436 = i__8374__auto___11435 + 1;
      i__8374__auto___11435 = G__11436;
      continue;
    } else {
    }
    break;
  }
  var G__11433 = args11431.length;
  switch(G__11433) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11431.length)].join(""));
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IFind$_find$arity$2 = function(coll, key) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1, key)], null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.indexOf = function() {
  var G__11458 = null;
  var G__11458__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11458__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__11458 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__11458__1.call(this, x);
      case 2:
        return G__11458__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11458.cljs$core$IFn$_invoke$arity$1 = G__11458__1;
  G__11458.cljs$core$IFn$_invoke$arity$2 = G__11458__2;
  return G__11458;
}();
cljs.core.Subvec.prototype.lastIndexOf = function() {
  var G__11459 = null;
  var G__11459__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11459__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__11459 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__11459__1.call(this, x);
      case 2:
        return G__11459__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11459.cljs$core$IFn$_invoke$arity$1 = G__11459__1;
  G__11459.cljs$core$IFn$_invoke$arity$2 = G__11459__2;
  return G__11459;
}();
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__11439 = init__$1;
        var G__11440 = j;
        var G__11441 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11439, G__11440, G__11441) : f.call(null, G__11439, G__11440, G__11441);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11460 = i + 1;
        var G__11461 = j + 1;
        var G__11462 = init__$2;
        i = G__11460;
        j = G__11461;
        init__$1 = G__11462;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  if (n < 0 || self__.end + 1 <= v_pos) {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds [0,"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll__$1.cljs$core$ICounted$_count$arity$1(null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("]")].join(""));
  } else {
    var G__11442 = self__.meta;
    var G__11443 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
    var G__11444 = self__.start;
    var G__11445 = function() {
      var x__7596__auto__ = self__.end;
      var y__7597__auto__ = v_pos + 1;
      return x__7596__auto__ > y__7597__auto__ ? x__7596__auto__ : y__7597__auto__;
    }();
    var G__11446 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__11442, G__11443, G__11444, G__11445, G__11446) : cljs.core.build_subvec.call(null, G__11442, G__11443, G__11444, G__11445, G__11446);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ranged_iterator(self__.v, self__.start, self__.end);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__11447 = self__.meta;
    var G__11448 = self__.v;
    var G__11449 = self__.start;
    var G__11450 = self__.end - 1;
    var G__11451 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__11447, G__11448, G__11449, G__11450, G__11451) : cljs.core.build_subvec.call(null, G__11447, G__11448, G__11449, G__11450, G__11451);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return coll__$1.cljs$core$IVector$_assoc_n$arity$3(null, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__11453 = self__.meta;
  var G__11454 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__11455 = self__.start;
  var G__11456 = self__.end + 1;
  var G__11457 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__11453, G__11454, G__11455, G__11456, G__11457) : cljs.core.build_subvec.call(null, G__11453, G__11454, G__11455, G__11456, G__11457);
};
cljs.core.Subvec.prototype.call = function() {
  var G__11463 = null;
  var G__11463__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__11463__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__11463 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11463__2.call(this, self__, k);
      case 3:
        return G__11463__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11463.cljs$core$IFn$_invoke$arity$2 = G__11463__2;
  G__11463.cljs$core$IFn$_invoke$arity$3 = G__11463__3;
  return G__11463;
}();
cljs.core.Subvec.prototype.apply = function(self__, args11438) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11438)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__11464 = meta;
      var G__11465 = v.v;
      var G__11466 = v.start + start;
      var G__11467 = v.start + end;
      var G__11468 = __hash;
      meta = G__11464;
      v = G__11465;
      start = G__11466;
      end = G__11467;
      __hash = G__11468;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec(var_args) {
  var args11469 = [];
  var len__8373__auto___11472 = arguments.length;
  var i__8374__auto___11473 = 0;
  while (true) {
    if (i__8374__auto___11473 < len__8373__auto___11472) {
      args11469.push(arguments[i__8374__auto___11473]);
      var G__11474 = i__8374__auto___11473 + 1;
      i__8374__auto___11473 = G__11474;
      continue;
    } else {
    }
    break;
  }
  var G__11471 = args11469.length;
  switch(G__11471) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11469.length)].join(""));
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      var G__11484 = tv;
      var G__11485 = level - 5;
      var G__11486 = child;
      var G__11487 = tail_node;
      return cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4(G__11484, G__11485, G__11486, G__11487) : cljs.core.tv_push_tail.call(null, G__11484, G__11485, G__11486, G__11487);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = function() {
      var G__11491 = tv;
      var G__11492 = level - 5;
      var G__11493 = cljs.core.pv_aget(node__$1, subidx);
      return cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3(G__11491, G__11492, G__11493) : cljs.core.tv_pop_tail.call(null, G__11491, G__11492, G__11493);
    }();
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__11494 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__11495 = level - 5;
        node = G__11494;
        level = G__11495;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return tcoll__$1.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(null, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return tcoll__$1.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, val);
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds for TransientVector of length"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__11499 = null;
  var G__11499__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11499__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11499 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11499__2.call(this, self__, k);
      case 3:
        return G__11499__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11499.cljs$core$IFn$_invoke$arity$2 = G__11499__2;
  G__11499.cljs$core$IFn$_invoke$arity$3 = G__11499__3;
  return G__11499;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args11496) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11496)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__7260__auto__ = !(self__.fseq == null) && cljs.core.seq(self__.fseq);
  if (or__7260__auto__) {
    return or__7260__auto__;
  } else {
    var and__7248__auto__ = !(self__.riter == null);
    if (and__7248__auto__) {
      return self__.riter.hasNext();
    } else {
      return and__7248__auto__;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.fseq == null)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (!(self__.riter == null) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "riter", "riter", -237834262, null)], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.indexOf = function() {
  var G__11500 = null;
  var G__11500__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11500__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11500 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11500__1.call(this, x);
      case 2:
        return G__11500__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11500.cljs$core$IFn$_invoke$arity$1 = G__11500__1;
  G__11500.cljs$core$IFn$_invoke$arity$2 = G__11500__2;
  return G__11500;
}();
cljs.core.PersistentQueueSeq.prototype.lastIndexOf = function() {
  var G__11501 = null;
  var G__11501__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11501__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11501 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11501__1.call(this, x);
      case 2:
        return G__11501__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11501.cljs$core$IFn$_invoke$arity$1 = G__11501__1;
  G__11501.cljs$core$IFn$_invoke$arity$2 = G__11501__2;
  return G__11501;
}();
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4655__auto__ = cljs.core.next(self__.front);
  if (temp__4655__auto__) {
    var f1 = temp__4655__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return coll__$1.cljs$core$IEmptyableCollection$_empty$arity$1(null);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.indexOf = function() {
  var G__11502 = null;
  var G__11502__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11502__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11502 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11502__1.call(this, x);
      case 2:
        return G__11502__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11502.cljs$core$IFn$_invoke$arity$1 = G__11502__1;
  G__11502.cljs$core$IFn$_invoke$arity$2 = G__11502__2;
  return G__11502;
}();
cljs.core.PersistentQueue.prototype.lastIndexOf = function() {
  var G__11503 = null;
  var G__11503__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count.cljs$core$IFn$_invoke$arity$1 ? self__.count.cljs$core$IFn$_invoke$arity$1(coll) : self__.count.call(null, coll));
  };
  var G__11503__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11503 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11503__1.call(this, x);
      case 2:
        return G__11503__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11503.cljs$core$IFn$_invoke$arity$1 = G__11503__1;
  G__11503.cljs$core$IFn$_invoke$arity$2 = G__11503__2;
  return G__11503;
}();
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4655__auto__ = cljs.core.next(self__.front);
    if (temp__4655__auto__) {
      var f1 = temp__4655__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__7260__auto__ = self__.front;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__7260__auto__ = self__.rear;
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__11504 = i + incr;
        i = G__11504;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__11505 = i + 1;
      var G__11506 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__11505;
      out = G__11506;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_11511 = 0;
  while (true) {
    if (i_11511 < l) {
      var k_11512 = ks[i_11511];
      new_obj[k_11512] = obj[k_11512];
      var G__11513 = i_11511 + 1;
      i_11511 = G__11513;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ObjMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1, k)], null);
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__11516 = init__$1;
        var G__11517 = k;
        var G__11518 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11516, G__11517, G__11518) : f.call(null, G__11516, G__11517, G__11518);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11519 = cljs.core.rest(keys__$1);
        var G__11520 = init__$2;
        keys__$1 = G__11519;
        init__$1 = G__11520;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__11514_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11514_SHARP_, self__.strobj[p1__11514_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__11521 = null;
  var G__11521__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11521__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11521 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11521__2.call(this, self__, k);
      case 3:
        return G__11521__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11521.cljs$core$IFn$_invoke$arity$2 = G__11521__2;
  G__11521.cljs$core$IFn$_invoke$arity$3 = G__11521__3;
  return G__11521;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args11515) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11515)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__7260__auto__ = self__.i < self__.base_count;
  if (or__7260__auto__) {
    return or__7260__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k)], null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "record", "record", 861424668, null), new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, 
  "ext-map-iter", "ext-map-iter", -1215982757, null)], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__11524 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11524, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11524, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__11527 = i + 2;
        i = G__11527;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__11528 = i + 2;
        i = G__11528;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__11529 = i + 2;
        i = G__11529;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__11530 = i + 2;
        i = G__11530;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__11531 = i + 2;
        i = G__11531;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_11532 = 0;
  while (true) {
    if (i_11532 < l) {
      narr[i_11532] = arr[i_11532];
      var G__11533 = i_11532 + 1;
      i_11532 = G__11533;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.indexOf = function() {
  var G__11534 = null;
  var G__11534__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11534__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11534 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11534__1.call(this, x);
      case 2:
        return G__11534__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11534.cljs$core$IFn$_invoke$arity$1 = G__11534__1;
  G__11534.cljs$core$IFn$_invoke$arity$2 = G__11534__2;
  return G__11534;
}();
cljs.core.PersistentArrayMapSeq.prototype.lastIndexOf = function() {
  var G__11535 = null;
  var G__11535__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11535__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11535 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11535__1.call(this, x);
      case 2:
        return G__11535__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11535.cljs$core$IFn$_invoke$arity$1 = G__11535__1;
  G__11535.cljs$core$IFn$_invoke$arity$2 = G__11535__2;
  return G__11535;
}();
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1, k)], null);
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11537 = cljs.core.seq(coll);
  var chunk__11538 = null;
  var count__11539 = 0;
  var i__11540 = 0;
  while (true) {
    if (i__11540 < count__11539) {
      var vec__11541 = chunk__11538.cljs$core$IIndexed$_nth$arity$2(null, i__11540);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11541, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11541, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__11554 = seq__11537;
      var G__11555 = chunk__11538;
      var G__11556 = count__11539;
      var G__11557 = i__11540 + 1;
      seq__11537 = G__11554;
      chunk__11538 = G__11555;
      count__11539 = G__11556;
      i__11540 = G__11557;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11537);
      if (temp__4657__auto__) {
        var seq__11537__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11537__$1)) {
          var c__8079__auto__ = cljs.core.chunk_first(seq__11537__$1);
          var G__11558 = cljs.core.chunk_rest(seq__11537__$1);
          var G__11559 = c__8079__auto__;
          var G__11560 = cljs.core.count(c__8079__auto__);
          var G__11561 = 0;
          seq__11537 = G__11558;
          chunk__11538 = G__11559;
          count__11539 = G__11560;
          i__11540 = G__11561;
          continue;
        } else {
          var vec__11544 = cljs.core.first(seq__11537__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11544, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11544, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__11562 = cljs.core.next(seq__11537__$1);
          var G__11563 = null;
          var G__11564 = 0;
          var G__11565 = 0;
          seq__11537 = G__11562;
          chunk__11538 = G__11563;
          count__11539 = G__11564;
          i__11540 = G__11565;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__11547 = init__$1;
        var G__11548 = self__.arr[i];
        var G__11549 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11547, G__11548, G__11549) : f.call(null, G__11547, G__11548, G__11549);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11566 = i + 2;
        var G__11567 = init__$2;
        i = G__11566;
        init__$1 = G__11567;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || cljs.core.PROTOCOL_SENTINEL === other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__11568 = i + 2;
              i = G__11568;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return coll__$1.cljs$core$IEmptyableCollection$_empty$arity$1(null);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__11569 = s + 2;
            var G__11570 = d;
            s = G__11569;
            d = G__11570;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__11571 = s + 2;
            var G__11572 = d + 2;
            s = G__11571;
            d = G__11572;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__11553 = cljs.core.aclone(self__.arr);
        G__11553[idx + 1] = v;
        return G__11553;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__11573 = ret.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__11574 = cljs.core.next(es);
          ret = G__11573;
          es = G__11574;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__11575 = null;
  var G__11575__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11575__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11575 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11575__2.call(this, self__, k);
      case 3:
        return G__11575__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11575.cljs$core$IFn$_invoke$arity$2 = G__11575__2;
  G__11575.cljs$core$IFn$_invoke$arity$3 = G__11575__3;
  return G__11575;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args11536) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11536)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_11576 = 0;
    while (true) {
      if (i_11576 < arr__$1.length) {
        var k_11577 = arr__$1[i_11576];
        var v_11578 = arr__$1[i_11576 + 1];
        var idx_11579 = cljs.core.array_index_of(ret, k_11577);
        if (idx_11579 === -1) {
          ret.push(k_11577);
          ret.push(v_11578);
        } else {
        }
        var G__11580 = i_11576 + 2;
        i_11576 = G__11580;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var cnt = arr__$2.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
};
cljs.core.PersistentArrayMap.createWithCheck = function(arr) {
  var ret = [];
  var i_11582 = 0;
  while (true) {
    if (i_11582 < arr.length) {
      var k_11583 = arr[i_11582];
      var v_11584 = arr[i_11582 + 1];
      var idx_11585 = cljs.core.array_index_of(ret, k_11583);
      if (idx_11585 === -1) {
        var G__11581_11586 = ret;
        G__11581_11586.push(k_11583);
        G__11581_11586.push(v_11584);
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(k_11583)].join(""));
      }
      var G__11587 = i_11582 + 2;
      i_11582 = G__11587;
      continue;
    } else {
    }
    break;
  }
  var cnt = arr.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr, null);
};
cljs.core.PersistentArrayMap.createAsIfByAssoc = function(arr) {
  var ret = [];
  var i_11589 = 0;
  while (true) {
    if (i_11589 < arr.length) {
      var k_11590 = arr[i_11589];
      var v_11591 = arr[i_11589 + 1];
      var idx_11592 = cljs.core.array_index_of(ret, k_11590);
      if (idx_11592 === -1) {
        var G__11588_11593 = ret;
        G__11588_11593.push(k_11590);
        G__11588_11593.push(v_11591);
      } else {
        ret[idx_11592 + 1] = v_11591;
      }
      var G__11594 = i_11589 + 2;
      i_11589 = G__11594;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.PersistentArrayMap(null, ret.length / 2, ret, null);
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4655__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          var G__11597 = cljs.core.next(es);
          var G__11598 = tcoll__$2.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__11597;
          tcoll__$2 = G__11598;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__11596_11599 = self__.arr;
      G__11596_11599.pop();
      G__11596_11599.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__11600 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__11601 = i + 2;
      out = G__11600;
      i = G__11601;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set(var_args) {
  var args11602 = [];
  var len__8373__auto___11607 = arguments.length;
  var i__8374__auto___11608 = 0;
  while (true) {
    if (i__8374__auto___11608 < len__8373__auto___11607) {
      args11602.push(arguments[i__8374__auto___11608]);
      var G__11609 = i__8374__auto___11608 + 1;
      i__8374__auto___11608 = G__11609;
      continue;
    } else {
    }
    break;
  }
  var G__11604 = args11602.length;
  switch(G__11604) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11602.length)].join(""));
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__11605 = cljs.core.aclone(arr);
  G__11605[i] = a;
  return G__11605;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__11606 = cljs.core.aclone(arr);
  G__11606[i] = a;
  G__11606[j] = b;
  return G__11606;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set(var_args) {
  var args11611 = [];
  var len__8373__auto___11614 = arguments.length;
  var i__8374__auto___11615 = 0;
  while (true) {
    if (i__8374__auto___11615 < len__8373__auto___11614) {
      args11611.push(arguments[i__8374__auto___11615]);
      var G__11616 = i__8374__auto___11615 + 1;
      i__8374__auto___11615 = G__11616;
      continue;
    } else {
    }
    break;
  }
  var G__11613 = args11611.length;
  switch(G__11613) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11611.length)].join(""));
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__11621 = init__$1;
          var G__11622 = k;
          var G__11623 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11621, G__11622, G__11623) : f.call(null, G__11621, G__11622, G__11623);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11624 = i + 2;
        var G__11625 = init__$2;
        i = G__11624;
        init__$1 = G__11625;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = !(key == null) ? self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, node_or_val], null) : !(node_or_val == null) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__7260__auto__ = !(self__.next_entry == null);
  if (or__7260__auto__) {
    return or__7260__auto__;
  } else {
    var or__7260__auto____$1 = !(self__.next_iter == null);
    if (or__7260__auto____$1) {
      return or__7260__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (!(self__.next_entry == null)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (!(self__.next_iter == null)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_.val = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_11639 = 0;
        var j_11640 = 0;
        while (true) {
          if (i_11639 < 32) {
            if ((self__.bitmap >>> i_11639 & 1) === 0) {
              var G__11641 = i_11639 + 1;
              var G__11642 = j_11640;
              i_11639 = G__11641;
              j_11640 = G__11642;
              continue;
            } else {
              nodes[i_11639] = !(self__.arr[j_11640] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_11640]), self__.arr[j_11640], self__.arr[j_11640 + 1], added_leaf_QMARK_) : self__.arr[j_11640 + 1];
              var G__11643 = i_11639 + 1;
              var G__11644 = j_11640 + 2;
              i_11639 = G__11643;
              j_11640 = G__11644;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__11626 = edit__$1;
          var G__11627 = shift + 5;
          var G__11628 = key_or_nil;
          var G__11629 = val_or_node;
          var G__11630 = hash;
          var G__11631 = key;
          var G__11632 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__11626, G__11627, G__11628, G__11629, G__11630, G__11631, G__11632) : cljs.core.create_node.call(null, G__11626, G__11627, G__11628, G__11629, G__11630, G__11631, G__11632);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_11645 = 0;
      var j_11646 = 0;
      while (true) {
        if (i_11645 < 32) {
          if ((self__.bitmap >>> i_11645 & 1) === 0) {
            var G__11647 = i_11645 + 1;
            var G__11648 = j_11646;
            i_11645 = G__11647;
            j_11646 = G__11648;
            continue;
          } else {
            nodes[i_11645] = !(self__.arr[j_11646] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_11646]), self__.arr[j_11646], self__.arr[j_11646 + 1], added_leaf_QMARK_) : self__.arr[j_11646 + 1];
            var G__11649 = i_11645 + 1;
            var G__11650 = j_11646 + 2;
            i_11645 = G__11649;
            j_11646 = G__11650;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__11633 = shift + 5;
          var G__11634 = key_or_nil;
          var G__11635 = val_or_node;
          var G__11636 = hash;
          var G__11637 = key;
          var G__11638 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__11633, G__11634, G__11635, G__11636, G__11637, G__11638) : cljs.core.create_node.call(null, G__11633, G__11634, G__11635, G__11636, G__11637, G__11638);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__11651 = i + 1;
        var G__11652 = j + 2;
        var G__11653 = bitmap | 1 << i;
        i = G__11651;
        j = G__11652;
        bitmap = G__11653;
        continue;
      } else {
        var G__11654 = i + 1;
        var G__11655 = j;
        var G__11656 = bitmap;
        i = G__11654;
        j = G__11655;
        bitmap = G__11656;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(!(self__.next_iter == null) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (!(node == null)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__11657 = i + 1;
          var G__11658 = init__$2;
          i = G__11657;
          init__$1 = G__11658;
          continue;
        }
      } else {
        var G__11659 = i + 1;
        var G__11660 = init__$1;
        i = G__11659;
        init__$1 = G__11660;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__11661 = i + 2;
        i = G__11661;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_.val = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx + 1], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node(var_args) {
  var args11662 = [];
  var len__8373__auto___11665 = arguments.length;
  var i__8374__auto___11666 = 0;
  while (true) {
    if (i__8374__auto___11666 < len__8373__auto___11665) {
      args11662.push(arguments[i__8374__auto___11666]);
      var G__11667 = i__8374__auto___11666 + 1;
      i__8374__auto___11666 = G__11667;
      continue;
    } else {
    }
    break;
  }
  var G__11664 = args11662.length;
  switch(G__11664) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11662.length)].join(""));
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.indexOf = function() {
  var G__11675 = null;
  var G__11675__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11675__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11675 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11675__1.call(this, x);
      case 2:
        return G__11675__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11675.cljs$core$IFn$_invoke$arity$1 = G__11675__1;
  G__11675.cljs$core$IFn$_invoke$arity$2 = G__11675__2;
  return G__11675;
}();
cljs.core.NodeSeq.prototype.lastIndexOf = function() {
  var G__11676 = null;
  var G__11676__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11676__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11676 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11676__1.call(this, x);
      case 2:
        return G__11676__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11676.cljs$core$IFn$_invoke$arity$1 = G__11676__1;
  G__11676.cljs$core$IFn$_invoke$arity$2 = G__11676__2;
  return G__11676;
}();
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var ret = self__.s == null ? function() {
    var G__11669 = self__.nodes;
    var G__11670 = self__.i + 2;
    var G__11671 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__11669, G__11670, G__11671) : cljs.core.create_inode_seq.call(null, G__11669, G__11670, G__11671);
  }() : function() {
    var G__11672 = self__.nodes;
    var G__11673 = self__.i;
    var G__11674 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__11672, G__11673, G__11674) : cljs.core.create_inode_seq.call(null, G__11672, G__11673, G__11674);
  }();
  if (!(ret == null)) {
    return ret;
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq(var_args) {
  var args11677 = [];
  var len__8373__auto___11680 = arguments.length;
  var i__8374__auto___11681 = 0;
  while (true) {
    if (i__8374__auto___11681 < len__8373__auto___11680) {
      args11677.push(arguments[i__8374__auto___11681]);
      var G__11682 = i__8374__auto___11681 + 1;
      i__8374__auto___11681 = G__11682;
      continue;
    } else {
    }
    break;
  }
  var G__11679 = args11677.length;
  switch(G__11679) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11677.length)].join(""));
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4655__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4655__auto__)) {
            var node = temp__4655__auto__;
            var temp__4655__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4655__auto____$1)) {
              var node_seq = temp__4655__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__11684 = j + 2;
              j = G__11684;
              continue;
            }
          } else {
            var G__11685 = j + 2;
            j = G__11685;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.indexOf = function() {
  var G__11690 = null;
  var G__11690__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11690__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11690 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11690__1.call(this, x);
      case 2:
        return G__11690__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11690.cljs$core$IFn$_invoke$arity$1 = G__11690__1;
  G__11690.cljs$core$IFn$_invoke$arity$2 = G__11690__2;
  return G__11690;
}();
cljs.core.ArrayNodeSeq.prototype.lastIndexOf = function() {
  var G__11691 = null;
  var G__11691__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11691__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11691 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11691__1.call(this, x);
      case 2:
        return G__11691__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11691.cljs$core$IFn$_invoke$arity$1 = G__11691__1;
  G__11691.cljs$core$IFn$_invoke$arity$2 = G__11691__2;
  return G__11691;
}();
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var ret = function() {
    var G__11686 = null;
    var G__11687 = self__.nodes;
    var G__11688 = self__.i;
    var G__11689 = cljs.core.next(self__.s);
    return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__11686, G__11687, G__11688, G__11689) : cljs.core.create_array_node_seq.call(null, G__11686, G__11687, G__11688, G__11689);
  }();
  if (!(ret == null)) {
    return ret;
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq(var_args) {
  var args11692 = [];
  var len__8373__auto___11695 = arguments.length;
  var i__8374__auto___11696 = 0;
  while (true) {
    if (i__8374__auto___11696 < len__8373__auto___11695) {
      args11692.push(arguments[i__8374__auto___11696]);
      var G__11697 = i__8374__auto___11696 + 1;
      i__8374__auto___11696 = G__11697;
      continue;
    } else {
    }
    break;
  }
  var G__11694 = args11692.length;
  switch(G__11694) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11692.length)].join(""));
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4655__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4655__auto__)) {
          var nj = temp__4655__auto__;
          var temp__4655__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4655__auto____$1)) {
            var ns = temp__4655__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__11699 = j + 1;
            j = G__11699;
            continue;
          }
        } else {
          var G__11700 = j + 1;
          j = G__11700;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return !self__.seen || self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null);
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.has_nil_QMARK_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null);
  } else {
    return self__.root.inode_find(0, cljs.core.hash(k), k, null);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11702 = cljs.core.seq(coll);
  var chunk__11703 = null;
  var count__11704 = 0;
  var i__11705 = 0;
  while (true) {
    if (i__11705 < count__11704) {
      var vec__11706 = chunk__11703.cljs$core$IIndexed$_nth$arity$2(null, i__11705);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11706, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11706, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__11714 = seq__11702;
      var G__11715 = chunk__11703;
      var G__11716 = count__11704;
      var G__11717 = i__11705 + 1;
      seq__11702 = G__11714;
      chunk__11703 = G__11715;
      count__11704 = G__11716;
      i__11705 = G__11717;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11702);
      if (temp__4657__auto__) {
        var seq__11702__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11702__$1)) {
          var c__8079__auto__ = cljs.core.chunk_first(seq__11702__$1);
          var G__11718 = cljs.core.chunk_rest(seq__11702__$1);
          var G__11719 = c__8079__auto__;
          var G__11720 = cljs.core.count(c__8079__auto__);
          var G__11721 = 0;
          seq__11702 = G__11718;
          chunk__11703 = G__11719;
          count__11704 = G__11720;
          i__11705 = G__11721;
          continue;
        } else {
          var vec__11709 = cljs.core.first(seq__11702__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11709, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11709, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__11722 = cljs.core.next(seq__11702__$1);
          var G__11723 = null;
          var G__11724 = 0;
          var G__11725 = 0;
          seq__11702 = G__11722;
          chunk__11703 = G__11723;
          count__11704 = G__11724;
          i__11705 = G__11725;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter();
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__11726 = ret.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__11727 = cljs.core.next(es);
          ret = G__11726;
          es = G__11727;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__11728 = null;
  var G__11728__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11728__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11728 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11728__2.call(this, self__, k);
      case 3:
        return G__11728__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11728.cljs$core$IFn$_invoke$arity$2 = G__11728__2;
  G__11728.cljs$core$IFn$_invoke$arity$3 = G__11728__3;
  return G__11728;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args11701) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11701)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__11729 = i + 2;
      var G__11730 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__11729;
      ret = G__11730;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__11731 = i + 1;
      var G__11732 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__11731;
      out = G__11732;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.createWithCheck = function(arr) {
  var len = arr.length;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i_11733 = 0;
  while (true) {
    if (i_11733 < len) {
      cljs.core._assoc_BANG_(ret, arr[i_11733], arr[i_11733 + 1]);
      if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core._count(ret), i_11733 / 2 + 1)) {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(arr[i_11733])].join(""));
      } else {
        var G__11734 = i_11733 + 2;
        i_11733 = G__11734;
        continue;
      }
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(ret);
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4655__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          var G__11736 = cljs.core.next(es);
          var G__11737 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__11736;
          tcoll__$1 = G__11737;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (removed_leaf_QMARK_.val) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__11738 = ascending_QMARK_ ? t.left : t.right;
      var G__11739 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__11738;
      stack__$1 = G__11739;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.indexOf = function() {
  var G__11740 = null;
  var G__11740__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11740__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11740 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11740__1.call(this, x);
      case 2:
        return G__11740__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11740.cljs$core$IFn$_invoke$arity$1 = G__11740__1;
  G__11740.cljs$core$IFn$_invoke$arity$2 = G__11740__2;
  return G__11740;
}();
cljs.core.PersistentTreeMapSeq.prototype.lastIndexOf = function() {
  var G__11741 = null;
  var G__11741__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11741__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11741 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11741__1.call(this, x);
      case 2:
        return G__11741__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11741.cljs$core$IFn$_invoke$arity$1 = G__11741__1;
  G__11741.cljs$core$IFn$_invoke$arity$2 = G__11741__2;
  return G__11741;
}();
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? function() {
    var G__11751 = node.left;
    var G__11752 = f;
    var G__11753 = init;
    return cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__11751, G__11752, G__11753) : cljs.core.tree_map_kv_reduce.call(null, G__11751, G__11752, G__11753);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__11754 = init__$1;
      var G__11755 = node.key;
      var G__11756 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11754, G__11755, G__11756) : f.call(null, G__11754, G__11755, G__11756);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? function() {
        var G__11757 = node.right;
        var G__11758 = f;
        var G__11759 = init__$2;
        return cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__11757, G__11758, G__11759) : cljs.core.tree_map_kv_reduce.call(null, G__11757, G__11758, G__11759);
      }() : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BlackNode.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null);
};
cljs.core.BlackNode.prototype.lastIndexOf = function() {
  var G__11761 = null;
  var G__11761__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11761__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11761 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11761__1.call(this, x);
      case 2:
        return G__11761__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11761.cljs$core$IFn$_invoke$arity$1 = G__11761__1;
  G__11761.cljs$core$IFn$_invoke$arity$2 = G__11761__2;
  return G__11761;
}();
cljs.core.BlackNode.prototype.indexOf = function() {
  var G__11762 = null;
  var G__11762__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11762__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11762 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11762__1.call(this, x);
      case 2:
        return G__11762__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11762.cljs$core$IFn$_invoke$arity$1 = G__11762__1;
  G__11762.cljs$core$IFn$_invoke$arity$2 = G__11762__2;
  return G__11762;
}();
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  var x__8102__auto__ = self__.key;
  return cljs.core._conj(function() {
    var x__8102__auto____$1 = self__.val;
    return cljs.core._conj(cljs.core.List.EMPTY, x__8102__auto____$1);
  }(), x__8102__auto__);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__11763 = null;
  var G__11763__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11763__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11763 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11763__2.call(this, self__, k);
      case 3:
        return G__11763__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11763.cljs$core$IFn$_invoke$arity$2 = G__11763__2;
  G__11763.cljs$core$IFn$_invoke$arity$3 = G__11763__3;
  return G__11763;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args11760) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11760)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RedNode.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null);
};
cljs.core.RedNode.prototype.lastIndexOf = function() {
  var G__11765 = null;
  var G__11765__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11765__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11765 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11765__1.call(this, x);
      case 2:
        return G__11765__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11765.cljs$core$IFn$_invoke$arity$1 = G__11765__1;
  G__11765.cljs$core$IFn$_invoke$arity$2 = G__11765__2;
  return G__11765;
}();
cljs.core.RedNode.prototype.indexOf = function() {
  var G__11766 = null;
  var G__11766__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11766__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11766 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11766__1.call(this, x);
      case 2:
        return G__11766__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11766.cljs$core$IFn$_invoke$arity$1 = G__11766__1;
  G__11766.cljs$core$IFn$_invoke$arity$2 = G__11766__2;
  return G__11766;
}();
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  var x__8102__auto__ = self__.key;
  return cljs.core._conj(function() {
    var x__8102__auto____$1 = self__.val;
    return cljs.core._conj(cljs.core.List.EMPTY, x__8102__auto____$1);
  }(), x__8102__auto__);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__11767 = null;
  var G__11767__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11767__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11767 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11767__2.call(this, self__, k);
      case 3:
        return G__11767__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11767.cljs$core$IFn$_invoke$arity$2 = G__11767__2;
  G__11767.cljs$core$IFn$_invoke$arity$3 = G__11767__3;
  return G__11767;
}();
cljs.core.RedNode.prototype.apply = function(self__, args11764) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11764)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__11780 = k;
      var G__11781 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__11780, G__11781) : comp.call(null, G__11780, G__11781);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = function() {
          var G__11782 = comp;
          var G__11783 = tree.left;
          var G__11784 = k;
          var G__11785 = v;
          var G__11786 = found;
          return cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(G__11782, G__11783, G__11784, G__11785, G__11786) : cljs.core.tree_map_add.call(null, G__11782, G__11783, G__11784, G__11785, G__11786);
        }();
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = function() {
          var G__11787 = comp;
          var G__11788 = tree.right;
          var G__11789 = k;
          var G__11790 = v;
          var G__11791 = found;
          return cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(G__11787, G__11788, G__11789, G__11790, G__11791) : cljs.core.tree_map_add.call(null, G__11787, G__11788, G__11789, G__11790, G__11791);
        }();
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = function() {
            var G__11800 = left.right;
            var G__11801 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__11800, G__11801) : cljs.core.tree_map_append.call(null, G__11800, G__11801);
          }();
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, function() {
            var G__11802 = left.right;
            var G__11803 = right;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__11802, G__11803) : cljs.core.tree_map_append.call(null, G__11802, G__11803);
          }(), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, function() {
            var G__11804 = left;
            var G__11805 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__11804, G__11805) : cljs.core.tree_map_append.call(null, G__11804, G__11805);
          }(), right.right, null);
        } else {
          var app = function() {
            var G__11806 = left.right;
            var G__11807 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__11806, G__11807) : cljs.core.tree_map_append.call(null, G__11806, G__11807);
          }();
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__11818 = k;
      var G__11819 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__11818, G__11819) : comp.call(null, G__11818, G__11819);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = function() {
          var G__11820 = comp;
          var G__11821 = tree.left;
          var G__11822 = k;
          var G__11823 = found;
          return cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(G__11820, G__11821, G__11822, G__11823) : cljs.core.tree_map_remove.call(null, G__11820, G__11821, G__11822, G__11823);
        }();
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = function() {
          var G__11824 = comp;
          var G__11825 = tree.right;
          var G__11826 = k;
          var G__11827 = found;
          return cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(G__11824, G__11825, G__11826, G__11827) : cljs.core.tree_map_remove.call(null, G__11824, G__11825, G__11826, G__11827);
        }();
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, function() {
        var G__11836 = comp;
        var G__11837 = tree.left;
        var G__11838 = k;
        var G__11839 = v;
        return cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(G__11836, G__11837, G__11838, G__11839) : cljs.core.tree_map_replace.call(null, G__11836, G__11837, G__11838, G__11839);
      }(), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, function() {
        var G__11840 = comp;
        var G__11841 = tree.right;
        var G__11842 = k;
        var G__11843 = v;
        return cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(G__11840, G__11841, G__11842, G__11843) : cljs.core.tree_map_replace.call(null, G__11840, G__11841, G__11842, G__11843);
      }());
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.entry_at(k);
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11845 = cljs.core.seq(coll);
  var chunk__11846 = null;
  var count__11847 = 0;
  var i__11848 = 0;
  while (true) {
    if (i__11848 < count__11847) {
      var vec__11849 = chunk__11846.cljs$core$IIndexed$_nth$arity$2(null, i__11848);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11849, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11849, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__11859 = seq__11845;
      var G__11860 = chunk__11846;
      var G__11861 = count__11847;
      var G__11862 = i__11848 + 1;
      seq__11845 = G__11859;
      chunk__11846 = G__11860;
      count__11847 = G__11861;
      i__11848 = G__11862;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11845);
      if (temp__4657__auto__) {
        var seq__11845__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11845__$1)) {
          var c__8079__auto__ = cljs.core.chunk_first(seq__11845__$1);
          var G__11863 = cljs.core.chunk_rest(seq__11845__$1);
          var G__11864 = c__8079__auto__;
          var G__11865 = cljs.core.count(c__8079__auto__);
          var G__11866 = 0;
          seq__11845 = G__11863;
          chunk__11846 = G__11864;
          count__11847 = G__11865;
          i__11848 = G__11866;
          continue;
        } else {
          var vec__11852 = cljs.core.first(seq__11845__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11852, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11852, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__11867 = cljs.core.next(seq__11845__$1);
          var G__11868 = null;
          var G__11869 = 0;
          var G__11870 = 0;
          seq__11845 = G__11867;
          chunk__11846 = G__11868;
          count__11847 = G__11869;
          i__11848 = G__11870;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__11855 = k;
        var G__11856 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__11855, G__11856) : self__.comp.call(null, G__11855, G__11856);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__11871 = t.left;
          t = G__11871;
          continue;
        } else {
          var G__11872 = t.right;
          t = G__11872;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__11873 = ret.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__11874 = cljs.core.next(es);
          ret = G__11873;
          es = G__11874;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__11875 = null;
  var G__11875__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11875__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11875 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11875__2.call(this, self__, k);
      case 3:
        return G__11875__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11875.cljs$core$IFn$_invoke$arity$2 = G__11875__2;
  G__11875.cljs$core$IFn$_invoke$arity$3 = G__11875__3;
  return G__11875;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args11844) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11844)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__11857 = k;
          var G__11858 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__11857, G__11858) : self__.comp.call(null, G__11857, G__11858);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__11876 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__11877 = t.left;
              stack = G__11876;
              t = G__11877;
              continue;
            } else {
              var G__11878 = stack;
              var G__11879 = t.right;
              stack = G__11878;
              t = G__11879;
              continue;
            }
          } else {
            if (c > 0) {
              var G__11880 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__11881 = t.right;
              stack = G__11880;
              t = G__11881;
              continue;
            } else {
              var G__11882 = stack;
              var G__11883 = t.left;
              stack = G__11882;
              t = G__11883;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11885 = arguments.length;
  var i__8374__auto___11886 = 0;
  while (true) {
    if (i__8374__auto___11886 < len__8373__auto___11885) {
      args__8380__auto__.push(arguments[i__8374__auto___11886]);
      var G__11887 = i__8374__auto___11886 + 1;
      i__8374__auto___11886 = G__11887;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__11888 = cljs.core.nnext(in$);
      var G__11889 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__11888;
      out = G__11889;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq11884) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11884));
};
cljs.core.array_map = function cljs$core$array_map(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11891 = arguments.length;
  var i__8374__auto___11892 = 0;
  while (true) {
    if (i__8374__auto___11892 < len__8373__auto___11891) {
      args__8380__auto__.push(arguments[i__8374__auto___11892]);
      var G__11893 = i__8374__auto___11892 + 1;
      i__8374__auto___11892 = G__11893;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.createAsIfByAssoc(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq11890) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11890));
};
cljs.core.obj_map = function cljs$core$obj_map(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11897 = arguments.length;
  var i__8374__auto___11898 = 0;
  while (true) {
    if (i__8374__auto___11898 < len__8373__auto___11897) {
      args__8380__auto__.push(arguments[i__8374__auto___11898]);
      var G__11899 = i__8374__auto___11898 + 1;
      i__8374__auto___11898 = G__11899;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__11900 = cljs.core.nnext(kvs);
      kvs = G__11900;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq11894) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11894));
};
cljs.core.sorted_map = function cljs$core$sorted_map(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11902 = arguments.length;
  var i__8374__auto___11903 = 0;
  while (true) {
    if (i__8374__auto___11903 < len__8373__auto___11902) {
      args__8380__auto__.push(arguments[i__8374__auto___11903]);
      var G__11904 = i__8374__auto___11903 + 1;
      i__8374__auto___11903 = G__11904;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__11905 = cljs.core.nnext(in$);
      var G__11906 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__11905;
      out = G__11906;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq11901) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11901));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11909 = arguments.length;
  var i__8374__auto___11910 = 0;
  while (true) {
    if (i__8374__auto___11910 < len__8373__auto___11909) {
      args__8380__auto__.push(arguments[i__8374__auto___11910]);
      var G__11911 = i__8374__auto___11910 + 1;
      i__8374__auto___11910 = G__11911;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__11912 = cljs.core.nnext(in$);
      var G__11913 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__11912;
      out = G__11913;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq11907) {
  var G__11908 = cljs.core.first(seq11907);
  var seq11907__$1 = cljs.core.next(seq11907);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__11908, seq11907__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.indexOf = function() {
  var G__11916 = null;
  var G__11916__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11916__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11916 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11916__1.call(this, x);
      case 2:
        return G__11916__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11916.cljs$core$IFn$_invoke$arity$1 = G__11916__1;
  G__11916.cljs$core$IFn$_invoke$arity$2 = G__11916__2;
  return G__11916;
}();
cljs.core.KeySeq.prototype.lastIndexOf = function() {
  var G__11917 = null;
  var G__11917__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11917__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11917 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11917__1.call(this, x);
      case 2:
        return G__11917__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11917.cljs$core$IFn$_invoke$arity$1 = G__11917__1;
  G__11917.cljs$core$IFn$_invoke$arity$2 = G__11917__2;
  return G__11917;
}();
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4657__auto__ = cljs.core.seq(hash_map);
  if (temp__4657__auto__) {
    var mseq = temp__4657__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.indexOf = function() {
  var G__11920 = null;
  var G__11920__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11920__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11920 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11920__1.call(this, x);
      case 2:
        return G__11920__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11920.cljs$core$IFn$_invoke$arity$1 = G__11920__1;
  G__11920.cljs$core$IFn$_invoke$arity$2 = G__11920__2;
  return G__11920;
}();
cljs.core.ValSeq.prototype.lastIndexOf = function() {
  var G__11921 = null;
  var G__11921__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11921__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11921 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11921__1.call(this, x);
      case 2:
        return G__11921__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11921.cljs$core$IFn$_invoke$arity$1 = G__11921__1;
  G__11921.cljs$core$IFn$_invoke$arity$2 = G__11921__2;
  return G__11921;
}();
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4657__auto__ = cljs.core.seq(hash_map);
  if (temp__4657__auto__) {
    var mseq = temp__4657__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11925 = arguments.length;
  var i__8374__auto___11926 = 0;
  while (true) {
    if (i__8374__auto___11926 < len__8373__auto___11925) {
      args__8380__auto__.push(arguments[i__8374__auto___11926]);
      var G__11927 = i__8374__auto___11926 + 1;
      i__8374__auto___11926 = G__11927;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__11922_SHARP_, p2__11923_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__7260__auto__ = p1__11922_SHARP_;
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__11923_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq11924) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11924));
};
cljs.core.merge_with = function cljs$core$merge_with(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11932 = arguments.length;
  var i__8374__auto___11933 = 0;
  while (true) {
    if (i__8374__auto___11933 < len__8373__auto___11932) {
      args__8380__auto__.push(arguments[i__8374__auto___11933]);
      var G__11934 = i__8374__auto___11933 + 1;
      i__8374__auto___11933 = G__11934;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__11930 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__11931 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11930, G__11931) : f.call(null, G__11930, G__11931);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__7260__auto__ = m1;
          if (cljs.core.truth_(or__7260__auto__)) {
            return or__7260__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq11928) {
  var G__11929 = cljs.core.first(seq11928);
  var seq11928__$1 = cljs.core.next(seq11928);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__11929, seq11928__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__11935 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__11936 = cljs.core.next(keys);
      ret = G__11935;
      keys = G__11936;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().tail[0];
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11939 = cljs.core.seq(coll);
  var chunk__11940 = null;
  var count__11941 = 0;
  var i__11942 = 0;
  while (true) {
    if (i__11942 < count__11941) {
      var vec__11943 = chunk__11940.cljs$core$IIndexed$_nth$arity$2(null, i__11942);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11943, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11943, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__11949 = seq__11939;
      var G__11950 = chunk__11940;
      var G__11951 = count__11941;
      var G__11952 = i__11942 + 1;
      seq__11939 = G__11949;
      chunk__11940 = G__11950;
      count__11941 = G__11951;
      i__11942 = G__11952;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11939);
      if (temp__4657__auto__) {
        var seq__11939__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11939__$1)) {
          var c__8079__auto__ = cljs.core.chunk_first(seq__11939__$1);
          var G__11953 = cljs.core.chunk_rest(seq__11939__$1);
          var G__11954 = c__8079__auto__;
          var G__11955 = cljs.core.count(c__8079__auto__);
          var G__11956 = 0;
          seq__11939 = G__11953;
          chunk__11940 = G__11954;
          count__11941 = G__11955;
          i__11942 = G__11956;
          continue;
        } else {
          var vec__11946 = cljs.core.first(seq__11939__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11946, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11946, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__11957 = cljs.core.next(seq__11939__$1);
          var G__11958 = null;
          var G__11959 = 0;
          var G__11960 = 0;
          seq__11939 = G__11957;
          chunk__11940 = G__11958;
          count__11941 = G__11959;
          i__11942 = G__11960;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__11937_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__11937_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__11961 = null;
  var G__11961__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11961__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11961 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11961__2.call(this, self__, k);
      case 3:
        return G__11961__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11961.cljs$core$IFn$_invoke$arity$2 = G__11961__2;
  G__11961.cljs$core$IFn$_invoke$arity$3 = G__11961__3;
  return G__11961;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args11938) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11938)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__11962 = i + 1;
        var G__11963 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__11962;
        out = G__11963;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__11964 = i + 1;
        var G__11965 = cljs.core._conj_BANG_(out, items[i]);
        i = G__11964;
        out = G__11965;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.createWithCheck = function(items) {
  var len = items.length;
  var t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
  var n__8183__auto___11966 = len;
  var i_11967 = 0;
  while (true) {
    if (i_11967 < n__8183__auto___11966) {
      cljs.core._conj_BANG_(t, items[i_11967]);
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(t), i_11967 + 1)) {
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(items[i_11967])].join(""));
      }
      var G__11968 = i_11967 + 1;
      i_11967 = G__11968;
      continue;
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(t);
};
cljs.core.PersistentHashSet.createAsIfByAssoc = function(items) {
  var len = items.length;
  var t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
  var n__8183__auto___11969 = len;
  var i_11970 = 0;
  while (true) {
    if (i_11970 < n__8183__auto___11969) {
      cljs.core._conj_BANG_(t, items[i_11970]);
      var G__11971 = i_11970 + 1;
      i_11970 = G__11971;
      continue;
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(t);
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__11973 = null;
  var G__11973__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__11973__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__11973 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11973__2.call(this, self__, k);
      case 3:
        return G__11973__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11973.cljs$core$IFn$_invoke$arity$2 = G__11973__2;
  G__11973.cljs$core$IFn$_invoke$arity$3 = G__11973__3;
  return G__11973;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args11972) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11972)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11976 = cljs.core.seq(coll);
  var chunk__11977 = null;
  var count__11978 = 0;
  var i__11979 = 0;
  while (true) {
    if (i__11979 < count__11978) {
      var vec__11980 = chunk__11977.cljs$core$IIndexed$_nth$arity$2(null, i__11979);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11980, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11980, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__11986 = seq__11976;
      var G__11987 = chunk__11977;
      var G__11988 = count__11978;
      var G__11989 = i__11979 + 1;
      seq__11976 = G__11986;
      chunk__11977 = G__11987;
      count__11978 = G__11988;
      i__11979 = G__11989;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11976);
      if (temp__4657__auto__) {
        var seq__11976__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11976__$1)) {
          var c__8079__auto__ = cljs.core.chunk_first(seq__11976__$1);
          var G__11990 = cljs.core.chunk_rest(seq__11976__$1);
          var G__11991 = c__8079__auto__;
          var G__11992 = cljs.core.count(c__8079__auto__);
          var G__11993 = 0;
          seq__11976 = G__11990;
          chunk__11977 = G__11991;
          count__11978 = G__11992;
          i__11979 = G__11993;
          continue;
        } else {
          var vec__11983 = cljs.core.first(seq__11976__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11983, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11983, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__11994 = cljs.core.next(seq__11976__$1);
          var G__11995 = null;
          var G__11996 = 0;
          var G__11997 = 0;
          seq__11976 = G__11994;
          chunk__11977 = G__11995;
          count__11978 = G__11996;
          i__11979 = G__11997;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__11974_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__11974_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__11998 = null;
  var G__11998__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11998__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11998 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11998__2.call(this, self__, k);
      case 3:
        return G__11998__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11998.cljs$core$IFn$_invoke$arity$2 = G__11998__2;
  G__11998.cljs$core$IFn$_invoke$arity$3 = G__11998__3;
  return G__11998;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args11975) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11975)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__8177__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__8177__auto__.length) {
        var G__11999 = i + 1;
        var G__12000 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__11999;
        res = G__12000;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.PersistentHashSet.createAsIfByAssoc(in$.arr);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__12001 = cljs.core.next(in$__$1);
          var G__12002 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__12001;
          out = G__12002;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set(var_args) {
  var args12003 = [];
  var len__8373__auto___12007 = arguments.length;
  var i__8374__auto___12008 = 0;
  while (true) {
    if (i__8374__auto___12008 < len__8373__auto___12007) {
      args12003.push(arguments[i__8374__auto___12008]);
      var G__12009 = i__8374__auto___12008 + 1;
      i__8374__auto___12008 = G__12009;
      continue;
    } else {
    }
    break;
  }
  var G__12006 = args12003.length;
  switch(G__12006) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args12003.slice(0), 0, null);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__8392__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq12004) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12004));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12012 = arguments.length;
  var i__8374__auto___12013 = 0;
  while (true) {
    if (i__8374__auto___12013 < len__8373__auto___12012) {
      args__8380__auto__.push(arguments[i__8374__auto___12013]);
      var G__12014 = i__8374__auto___12013 + 1;
      i__8374__auto___12013 = G__12014;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq12011) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12011));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12017 = arguments.length;
  var i__8374__auto___12018 = 0;
  while (true) {
    if (i__8374__auto___12018 < len__8373__auto___12017) {
      args__8380__auto__.push(arguments[i__8374__auto___12018]);
      var G__12019 = i__8374__auto___12018 + 1;
      i__8374__auto___12018 = G__12019;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq12015) {
  var G__12016 = cljs.core.first(seq12015);
  var seq12015__$1 = cljs.core.next(seq12015);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__12016, seq12015__$1);
};
cljs.core.replace = function cljs$core$replace(var_args) {
  var args12022 = [];
  var len__8373__auto___12025 = arguments.length;
  var i__8374__auto___12026 = 0;
  while (true) {
    if (i__8374__auto___12026 < len__8373__auto___12025) {
      args12022.push(arguments[i__8374__auto___12026]);
      var G__12027 = i__8374__auto___12026 + 1;
      i__8374__auto___12026 = G__12027;
      continue;
    } else {
    }
    break;
  }
  var G__12024 = args12022.length;
  switch(G__12024) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12022.length)].join(""));
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__12020_SHARP_) {
    var temp__4655__auto__ = cljs.core.find(smap, p1__12020_SHARP_);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var e = temp__4655__auto__;
      return cljs.core.val(e);
    } else {
      return p1__12020_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4655__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__12021_SHARP_) {
      var temp__4655__auto__ = cljs.core.find(smap, p1__12021_SHARP_);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var e = temp__4655__auto__;
        return cljs.core.second(e);
      } else {
        return p1__12021_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct(var_args) {
  var args12029 = [];
  var len__8373__auto___12042 = arguments.length;
  var i__8374__auto___12043 = 0;
  while (true) {
    if (i__8374__auto___12043 < len__8373__auto___12042) {
      args12029.push(arguments[i__8374__auto___12043]);
      var G__12044 = i__8374__auto___12043 + 1;
      i__8374__auto___12043 = G__12044;
      continue;
    } else {
    }
    break;
  }
  var G__12031 = args12029.length;
  switch(G__12031) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12029.length)].join(""));
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__12046 = null;
        var G__12046__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12046__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__12046__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__12046 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12046__0.call(this);
            case 1:
              return G__12046__1.call(this, result);
            case 2:
              return G__12046__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12046.cljs$core$IFn$_invoke$arity$0 = G__12046__0;
        G__12046.cljs$core$IFn$_invoke$arity$1 = G__12046__1;
        G__12046.cljs$core$IFn$_invoke$arity$2 = G__12046__2;
        return G__12046;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__12038, seen__$1) {
        while (true) {
          var vec__12039 = p__12038;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12039, 0, null);
          var xs__$1 = vec__12039;
          var temp__4657__auto__ = cljs.core.seq(xs__$1);
          if (temp__4657__auto__) {
            var s = temp__4657__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__12047 = cljs.core.rest(s);
              var G__12048 = seen__$1;
              p__12038 = G__12047;
              seen__$1 = G__12048;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__12049 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__12050 = cljs.core.next(s__$1);
      ret = G__12049;
      s__$1 = G__12050;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Doesn't support name: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__12053 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__12054 = cljs.core.next(ks);
      var G__12055 = cljs.core.next(vs);
      map = G__12053;
      ks = G__12054;
      vs = G__12055;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key(var_args) {
  var args12058 = [];
  var len__8373__auto___12065 = arguments.length;
  var i__8374__auto___12066 = 0;
  while (true) {
    if (i__8374__auto___12066 < len__8373__auto___12065) {
      args12058.push(arguments[i__8374__auto___12066]);
      var G__12067 = i__8374__auto___12066 + 1;
      i__8374__auto___12066 = G__12067;
      continue;
    } else {
    }
    break;
  }
  var G__12064 = args12058.length;
  switch(G__12064) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args12058.slice(3), 0, null);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__12056_SHARP_, p2__12057_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__12056_SHARP_, p2__12057_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq12059) {
  var G__12060 = cljs.core.first(seq12059);
  var seq12059__$1 = cljs.core.next(seq12059);
  var G__12061 = cljs.core.first(seq12059__$1);
  var seq12059__$2 = cljs.core.next(seq12059__$1);
  var G__12062 = cljs.core.first(seq12059__$2);
  var seq12059__$3 = cljs.core.next(seq12059__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__12060, G__12061, G__12062, seq12059__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key(var_args) {
  var args12071 = [];
  var len__8373__auto___12078 = arguments.length;
  var i__8374__auto___12079 = 0;
  while (true) {
    if (i__8374__auto___12079 < len__8373__auto___12078) {
      args12071.push(arguments[i__8374__auto___12079]);
      var G__12080 = i__8374__auto___12079 + 1;
      i__8374__auto___12079 = G__12080;
      continue;
    } else {
    }
    break;
  }
  var G__12077 = args12071.length;
  switch(G__12077) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args12071.slice(3), 0, null);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__12069_SHARP_, p2__12070_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__12069_SHARP_, p2__12070_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq12072) {
  var G__12073 = cljs.core.first(seq12072);
  var seq12072__$1 = cljs.core.next(seq12072);
  var G__12074 = cljs.core.first(seq12072__$1);
  var seq12072__$2 = cljs.core.next(seq12072__$1);
  var G__12075 = cljs.core.first(seq12072__$2);
  var seq12072__$3 = cljs.core.next(seq12072__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__12073, G__12074, G__12075, seq12072__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all(var_args) {
  var args12082 = [];
  var len__8373__auto___12085 = arguments.length;
  var i__8374__auto___12086 = 0;
  while (true) {
    if (i__8374__auto___12086 < len__8373__auto___12085) {
      args12082.push(arguments[i__8374__auto___12086]);
      var G__12087 = i__8374__auto___12086 + 1;
      i__8374__auto___12086 = G__12087;
      continue;
    } else {
    }
    break;
  }
  var G__12084 = args12082.length;
  switch(G__12084) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12082.length)].join(""));
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__12089 = null;
        var G__12089__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12089__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__12089__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__12089 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12089__0.call(this);
            case 1:
              return G__12089__1.call(this, result);
            case 2:
              return G__12089__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12089.cljs$core$IFn$_invoke$arity$0 = G__12089__0;
        G__12089.cljs$core$IFn$_invoke$arity$1 = G__12089__1;
        G__12089.cljs$core$IFn$_invoke$arity$2 = G__12089__2;
        return G__12089;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while(var_args) {
  var args12090 = [];
  var len__8373__auto___12094 = arguments.length;
  var i__8374__auto___12095 = 0;
  while (true) {
    if (i__8374__auto___12095 < len__8373__auto___12094) {
      args12090.push(arguments[i__8374__auto___12095]);
      var G__12096 = i__8374__auto___12095 + 1;
      i__8374__auto___12095 = G__12096;
      continue;
    } else {
    }
    break;
  }
  var G__12092 = args12090.length;
  switch(G__12092) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12090.length)].join(""));
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__12098 = null;
      var G__12098__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__12098__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__12098__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__12098 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12098__0.call(this);
          case 1:
            return G__12098__1.call(this, result);
          case 2:
            return G__12098__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__12098.cljs$core$IFn$_invoke$arity$0 = G__12098__0;
      G__12098.cljs$core$IFn$_invoke$arity$1 = G__12098__1;
      G__12098.cljs$core$IFn$_invoke$arity$2 = G__12098__2;
      return G__12098;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.truth_(function() {
        var G__12093 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__12093) : pred.call(null, G__12093);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__12103 = function() {
      var G__12105 = cljs.core._entry_key(sc, e);
      var G__12106 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__12105, G__12106) : comp.call(null, G__12105, G__12106);
    }();
    var G__12104 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__12103, G__12104) : test.call(null, G__12103, G__12104);
  };
};
cljs.core.subseq = function cljs$core$subseq(var_args) {
  var args12107 = [];
  var len__8373__auto___12116 = arguments.length;
  var i__8374__auto___12117 = 0;
  while (true) {
    if (i__8374__auto___12117 < len__8373__auto___12116) {
      args12107.push(arguments[i__8374__auto___12117]);
      var G__12118 = i__8374__auto___12117 + 1;
      i__8374__auto___12117 = G__12118;
      continue;
    } else {
    }
    break;
  }
  var G__12109 = args12107.length;
  switch(G__12109) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12107.length)].join(""));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__12110 = temp__4657__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12110, 0, null);
      var s = vec__12110;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__12113 = temp__4657__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12113, 0, null);
    var s = vec__12113;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq(var_args) {
  var args12120 = [];
  var len__8373__auto___12129 = arguments.length;
  var i__8374__auto___12130 = 0;
  while (true) {
    if (i__8374__auto___12130 < len__8373__auto___12129) {
      args12120.push(arguments[i__8374__auto___12130]);
      var G__12131 = i__8374__auto___12130 + 1;
      i__8374__auto___12130 = G__12131;
      continue;
    } else {
    }
    break;
  }
  var G__12122 = args12120.length;
  switch(G__12122) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12120.length)].join(""));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__12123 = temp__4657__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12123, 0, null);
      var s = vec__12123;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__12126 = temp__4657__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12126, 0, null);
    var s = vec__12126;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.indexOf = function() {
  var G__12134 = null;
  var G__12134__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__12134__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__12134 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__12134__1.call(this, x);
      case 2:
        return G__12134__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12134.cljs$core$IFn$_invoke$arity$1 = G__12134__1;
  G__12134.cljs$core$IFn$_invoke$arity$2 = G__12134__2;
  return G__12134;
}();
cljs.core.Range.prototype.lastIndexOf = function() {
  var G__12135 = null;
  var G__12135__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__12135__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__12135 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__12135__1.call(this, x);
      case 2:
        return G__12135__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12135.cljs$core$IFn$_invoke$arity$1 = G__12135__1;
  G__12135.cljs$core$IFn$_invoke$arity$2 = G__12135__2;
  return G__12135;
}();
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < rng__$1.cljs$core$ICounted$_count$arity$1(null)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < rng__$1.cljs$core$ICounted$_count$arity$1(null)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(rng__$1.cljs$core$ISeqable$_seq$arity$1(null))) {
    return 0;
  } else {
    var G__12133 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__12133);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__12136 = i + self__.step;
        var G__12137 = ret__$1;
        i = G__12136;
        ret = G__12137;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (rng__$1.cljs$core$ISeqable$_seq$arity$1(null) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(rng__$1.cljs$core$ISeqable$_seq$arity$1(null) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.step < 0) {
      if (self__.start > self__.end) {
        return rng__$1;
      } else {
        return null;
      }
    } else {
      if (self__.start === self__.end) {
        return null;
      } else {
        return rng__$1;
      }
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.range = function cljs$core$range(var_args) {
  var args12138 = [];
  var len__8373__auto___12141 = arguments.length;
  var i__8374__auto___12142 = 0;
  while (true) {
    if (i__8374__auto___12142 < len__8373__auto___12141) {
      args12138.push(arguments[i__8374__auto___12142]);
      var G__12143 = i__8374__auto___12142 + 1;
      i__8374__auto___12142 = G__12143;
      continue;
    } else {
    }
    break;
  }
  var G__12140 = args12138.length;
  switch(G__12140) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12138.length)].join(""));
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth(var_args) {
  var args12145 = [];
  var len__8373__auto___12148 = arguments.length;
  var i__8374__auto___12149 = 0;
  while (true) {
    if (i__8374__auto___12149 < len__8373__auto___12148) {
      args12145.push(arguments[i__8374__auto___12149]);
      var G__12150 = i__8374__auto___12149 + 1;
      i__8374__auto___12149 = G__12150;
      continue;
    } else {
    }
    break;
  }
  var G__12147 = args12145.length;
  switch(G__12147) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12145.length)].join(""));
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__12152 = null;
        var G__12152__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12152__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__12152__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__12152 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12152__0.call(this);
            case 1:
              return G__12152__1.call(this, result);
            case 2:
              return G__12152__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12152.cljs$core$IFn$_invoke$arity$0 = G__12152__0;
        G__12152.cljs$core$IFn$_invoke$arity$1 = G__12152__1;
        G__12152.cljs$core$IFn$_invoke$arity$2 = G__12152__2;
        return G__12152;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by(var_args) {
  var args12154 = [];
  var len__8373__auto___12157 = arguments.length;
  var i__8374__auto___12158 = 0;
  while (true) {
    if (i__8374__auto___12158 < len__8373__auto___12157) {
      args12154.push(arguments[i__8374__auto___12158]);
      var G__12159 = i__8374__auto___12158 + 1;
      i__8374__auto___12158 = G__12159;
      continue;
    } else {
    }
    break;
  }
  var G__12156 = args12154.length;
  switch(G__12156) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12154.length)].join(""));
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__12161 = null;
        var G__12161__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12161__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__12161__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__12161 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12161__0.call(this);
            case 1:
              return G__12161__1.call(this, result);
            case 2:
              return G__12161__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12161.cljs$core$IFn$_invoke$arity$0 = G__12161__0;
        G__12161.cljs$core$IFn$_invoke$arity$1 = G__12161__1;
        G__12161.cljs$core$IFn$_invoke$arity$2 = G__12161__2;
        return G__12161;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4657__auto__) {
        return function(p1__12153_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__12153_SHARP_) : f.call(null, p1__12153_SHARP_));
        };
      }(fst, fv, s, temp__4657__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions(var_args) {
  var args12162 = [];
  var len__8373__auto___12167 = arguments.length;
  var i__8374__auto___12168 = 0;
  while (true) {
    if (i__8374__auto___12168 < len__8373__auto___12167) {
      args12162.push(arguments[i__8374__auto___12168]);
      var G__12169 = i__8374__auto___12168 + 1;
      i__8374__auto___12168 = G__12169;
      continue;
    } else {
    }
    break;
  }
  var G__12164 = args12162.length;
  switch(G__12164) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12162.length)].join(""));
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4655__auto__ = cljs.core.seq(coll);
    if (temp__4655__auto__) {
      var s = temp__4655__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      var x__8102__auto__ = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      return cljs.core._conj(cljs.core.List.EMPTY, x__8102__auto__);
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  if (cljs.core.reduced_QMARK_(init)) {
    var x__8102__auto__ = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init) : cljs.core.deref.call(null, init);
    return cljs.core._conj(cljs.core.List.EMPTY, x__8102__auto__);
  } else {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__12165 = init;
          var G__12166 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12165, G__12166) : f.call(null, G__12165, G__12166);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  }
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt(var_args) {
  var args12181 = [];
  var len__8373__auto___12188 = arguments.length;
  var i__8374__auto___12189 = 0;
  while (true) {
    if (i__8374__auto___12189 < len__8373__auto___12188) {
      args12181.push(arguments[i__8374__auto___12189]);
      var G__12190 = i__8374__auto___12189 + 1;
      i__8374__auto___12189 = G__12190;
      continue;
    } else {
    }
    break;
  }
  var G__12187 = args12181.length;
  switch(G__12187) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args12181.slice(3), 0, null);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8392__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__12192 = null;
    var G__12192__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__12192__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__12192__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__12192__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__12192__4 = function() {
      var G__12193__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__12193 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__12194__i = 0, G__12194__a = new Array(arguments.length - 3);
          while (G__12194__i < G__12194__a.length) {
            G__12194__a[G__12194__i] = arguments[G__12194__i + 3];
            ++G__12194__i;
          }
          args = new cljs.core.IndexedSeq(G__12194__a, 0);
        }
        return G__12193__delegate.call(this, x, y, z, args);
      };
      G__12193.cljs$lang$maxFixedArity = 3;
      G__12193.cljs$lang$applyTo = function(arglist__12195) {
        var x = cljs.core.first(arglist__12195);
        arglist__12195 = cljs.core.next(arglist__12195);
        var y = cljs.core.first(arglist__12195);
        arglist__12195 = cljs.core.next(arglist__12195);
        var z = cljs.core.first(arglist__12195);
        var args = cljs.core.rest(arglist__12195);
        return G__12193__delegate(x, y, z, args);
      };
      G__12193.cljs$core$IFn$_invoke$arity$variadic = G__12193__delegate;
      return G__12193;
    }();
    G__12192 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__12192__0.call(this);
        case 1:
          return G__12192__1.call(this, x);
        case 2:
          return G__12192__2.call(this, x, y);
        case 3:
          return G__12192__3.call(this, x, y, z);
        default:
          var G__12196 = null;
          if (arguments.length > 3) {
            var G__12197__i = 0, G__12197__a = new Array(arguments.length - 3);
            while (G__12197__i < G__12197__a.length) {
              G__12197__a[G__12197__i] = arguments[G__12197__i + 3];
              ++G__12197__i;
            }
            G__12196 = new cljs.core.IndexedSeq(G__12197__a, 0);
          }
          return G__12192__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__12196);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__12192.cljs$lang$maxFixedArity = 3;
    G__12192.cljs$lang$applyTo = G__12192__4.cljs$lang$applyTo;
    G__12192.cljs$core$IFn$_invoke$arity$0 = G__12192__0;
    G__12192.cljs$core$IFn$_invoke$arity$1 = G__12192__1;
    G__12192.cljs$core$IFn$_invoke$arity$2 = G__12192__2;
    G__12192.cljs$core$IFn$_invoke$arity$3 = G__12192__3;
    G__12192.cljs$core$IFn$_invoke$arity$variadic = G__12192__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__12192;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__12198 = null;
    var G__12198__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__12198__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__12198__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__12198__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__12198__4 = function() {
      var G__12199__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__12199 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__12200__i = 0, G__12200__a = new Array(arguments.length - 3);
          while (G__12200__i < G__12200__a.length) {
            G__12200__a[G__12200__i] = arguments[G__12200__i + 3];
            ++G__12200__i;
          }
          args = new cljs.core.IndexedSeq(G__12200__a, 0);
        }
        return G__12199__delegate.call(this, x, y, z, args);
      };
      G__12199.cljs$lang$maxFixedArity = 3;
      G__12199.cljs$lang$applyTo = function(arglist__12201) {
        var x = cljs.core.first(arglist__12201);
        arglist__12201 = cljs.core.next(arglist__12201);
        var y = cljs.core.first(arglist__12201);
        arglist__12201 = cljs.core.next(arglist__12201);
        var z = cljs.core.first(arglist__12201);
        var args = cljs.core.rest(arglist__12201);
        return G__12199__delegate(x, y, z, args);
      };
      G__12199.cljs$core$IFn$_invoke$arity$variadic = G__12199__delegate;
      return G__12199;
    }();
    G__12198 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__12198__0.call(this);
        case 1:
          return G__12198__1.call(this, x);
        case 2:
          return G__12198__2.call(this, x, y);
        case 3:
          return G__12198__3.call(this, x, y, z);
        default:
          var G__12202 = null;
          if (arguments.length > 3) {
            var G__12203__i = 0, G__12203__a = new Array(arguments.length - 3);
            while (G__12203__i < G__12203__a.length) {
              G__12203__a[G__12203__i] = arguments[G__12203__i + 3];
              ++G__12203__i;
            }
            G__12202 = new cljs.core.IndexedSeq(G__12203__a, 0);
          }
          return G__12198__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__12202);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__12198.cljs$lang$maxFixedArity = 3;
    G__12198.cljs$lang$applyTo = G__12198__4.cljs$lang$applyTo;
    G__12198.cljs$core$IFn$_invoke$arity$0 = G__12198__0;
    G__12198.cljs$core$IFn$_invoke$arity$1 = G__12198__1;
    G__12198.cljs$core$IFn$_invoke$arity$2 = G__12198__2;
    G__12198.cljs$core$IFn$_invoke$arity$3 = G__12198__3;
    G__12198.cljs$core$IFn$_invoke$arity$variadic = G__12198__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__12198;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__12204 = null;
    var G__12204__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__12204__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__12204__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__12204__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__12204__4 = function() {
      var G__12205__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__12205 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__12206__i = 0, G__12206__a = new Array(arguments.length - 3);
          while (G__12206__i < G__12206__a.length) {
            G__12206__a[G__12206__i] = arguments[G__12206__i + 3];
            ++G__12206__i;
          }
          args = new cljs.core.IndexedSeq(G__12206__a, 0);
        }
        return G__12205__delegate.call(this, x, y, z, args);
      };
      G__12205.cljs$lang$maxFixedArity = 3;
      G__12205.cljs$lang$applyTo = function(arglist__12207) {
        var x = cljs.core.first(arglist__12207);
        arglist__12207 = cljs.core.next(arglist__12207);
        var y = cljs.core.first(arglist__12207);
        arglist__12207 = cljs.core.next(arglist__12207);
        var z = cljs.core.first(arglist__12207);
        var args = cljs.core.rest(arglist__12207);
        return G__12205__delegate(x, y, z, args);
      };
      G__12205.cljs$core$IFn$_invoke$arity$variadic = G__12205__delegate;
      return G__12205;
    }();
    G__12204 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__12204__0.call(this);
        case 1:
          return G__12204__1.call(this, x);
        case 2:
          return G__12204__2.call(this, x, y);
        case 3:
          return G__12204__3.call(this, x, y, z);
        default:
          var G__12208 = null;
          if (arguments.length > 3) {
            var G__12209__i = 0, G__12209__a = new Array(arguments.length - 3);
            while (G__12209__i < G__12209__a.length) {
              G__12209__a[G__12209__i] = arguments[G__12209__i + 3];
              ++G__12209__i;
            }
            G__12208 = new cljs.core.IndexedSeq(G__12209__a, 0);
          }
          return G__12204__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__12208);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__12204.cljs$lang$maxFixedArity = 3;
    G__12204.cljs$lang$applyTo = G__12204__4.cljs$lang$applyTo;
    G__12204.cljs$core$IFn$_invoke$arity$0 = G__12204__0;
    G__12204.cljs$core$IFn$_invoke$arity$1 = G__12204__1;
    G__12204.cljs$core$IFn$_invoke$arity$2 = G__12204__2;
    G__12204.cljs$core$IFn$_invoke$arity$3 = G__12204__3;
    G__12204.cljs$core$IFn$_invoke$arity$variadic = G__12204__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__12204;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__12210 = null;
      var G__12210__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__12171_SHARP_, p2__12172_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12171_SHARP_, p2__12172_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__12172_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__12172_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__12210__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__12173_SHARP_, p2__12174_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12173_SHARP_, p2__12174_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__12174_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__12174_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__12210__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__12175_SHARP_, p2__12176_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12175_SHARP_, p2__12176_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__12176_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__12176_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__12210__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__12177_SHARP_, p2__12178_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12177_SHARP_, p2__12178_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__12178_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__12178_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__12210__4 = function() {
        var G__12211__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__12179_SHARP_, p2__12180_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12179_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__12180_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__12211 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__12212__i = 0, G__12212__a = new Array(arguments.length - 3);
            while (G__12212__i < G__12212__a.length) {
              G__12212__a[G__12212__i] = arguments[G__12212__i + 3];
              ++G__12212__i;
            }
            args = new cljs.core.IndexedSeq(G__12212__a, 0);
          }
          return G__12211__delegate.call(this, x, y, z, args);
        };
        G__12211.cljs$lang$maxFixedArity = 3;
        G__12211.cljs$lang$applyTo = function(arglist__12213) {
          var x = cljs.core.first(arglist__12213);
          arglist__12213 = cljs.core.next(arglist__12213);
          var y = cljs.core.first(arglist__12213);
          arglist__12213 = cljs.core.next(arglist__12213);
          var z = cljs.core.first(arglist__12213);
          var args = cljs.core.rest(arglist__12213);
          return G__12211__delegate(x, y, z, args);
        };
        G__12211.cljs$core$IFn$_invoke$arity$variadic = G__12211__delegate;
        return G__12211;
      }();
      G__12210 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12210__0.call(this);
          case 1:
            return G__12210__1.call(this, x);
          case 2:
            return G__12210__2.call(this, x, y);
          case 3:
            return G__12210__3.call(this, x, y, z);
          default:
            var G__12214 = null;
            if (arguments.length > 3) {
              var G__12215__i = 0, G__12215__a = new Array(arguments.length - 3);
              while (G__12215__i < G__12215__a.length) {
                G__12215__a[G__12215__i] = arguments[G__12215__i + 3];
                ++G__12215__i;
              }
              G__12214 = new cljs.core.IndexedSeq(G__12215__a, 0);
            }
            return G__12210__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__12214);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__12210.cljs$lang$maxFixedArity = 3;
      G__12210.cljs$lang$applyTo = G__12210__4.cljs$lang$applyTo;
      G__12210.cljs$core$IFn$_invoke$arity$0 = G__12210__0;
      G__12210.cljs$core$IFn$_invoke$arity$1 = G__12210__1;
      G__12210.cljs$core$IFn$_invoke$arity$2 = G__12210__2;
      G__12210.cljs$core$IFn$_invoke$arity$3 = G__12210__3;
      G__12210.cljs$core$IFn$_invoke$arity$variadic = G__12210__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12210;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq12182) {
  var G__12183 = cljs.core.first(seq12182);
  var seq12182__$1 = cljs.core.next(seq12182);
  var G__12184 = cljs.core.first(seq12182__$1);
  var seq12182__$2 = cljs.core.next(seq12182__$1);
  var G__12185 = cljs.core.first(seq12182__$2);
  var seq12182__$3 = cljs.core.next(seq12182__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__12183, G__12184, G__12185, seq12182__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun(var_args) {
  var args12216 = [];
  var len__8373__auto___12219 = arguments.length;
  var i__8374__auto___12220 = 0;
  while (true) {
    if (i__8374__auto___12220 < len__8373__auto___12219) {
      args12216.push(arguments[i__8374__auto___12220]);
      var G__12221 = i__8374__auto___12220 + 1;
      i__8374__auto___12220 = G__12221;
      continue;
    } else {
    }
    break;
  }
  var G__12218 = args12216.length;
  switch(G__12218) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12216.length)].join(""));
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__12223 = cljs.core.next(coll);
      coll = G__12223;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__12224 = n - 1;
      var G__12225 = cljs.core.next(coll);
      n = G__12224;
      coll = G__12225;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall(var_args) {
  var args12226 = [];
  var len__8373__auto___12229 = arguments.length;
  var i__8374__auto___12230 = 0;
  while (true) {
    if (i__8374__auto___12230 < len__8373__auto___12229) {
      args12226.push(arguments[i__8374__auto___12230]);
      var G__12231 = i__8374__auto___12230 + 1;
      i__8374__auto___12230 = G__12231;
      continue;
    } else {
    }
    break;
  }
  var G__12228 = args12226.length;
  switch(G__12228) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12226.length)].join(""));
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs.core.re_seq.cljs$core$IFn$_invoke$arity$2 ? cljs.core.re_seq.cljs$core$IFn$_invoke$arity$2(re, post_match) : cljs.core.re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__12236 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12236, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12236, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__7260__auto__ = flags;
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_12246 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__7260__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__12247_12253 = cljs.core.first(coll);
          var G__12248_12254 = writer;
          var G__12249_12255 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__12247_12253, G__12248_12254, G__12249_12255) : print_one.call(null, G__12247_12253, G__12248_12254, G__12249_12255);
        } else {
        }
        var coll_12256__$1 = cljs.core.next(coll);
        var n_12257 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_12256__$1 && (n_12257 == null || !(n_12257 === 0))) {
            cljs.core._write(writer, sep);
            var G__12250_12258 = cljs.core.first(coll_12256__$1);
            var G__12251_12259 = writer;
            var G__12252_12260 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__12250_12258, G__12251_12259, G__12252_12260) : print_one.call(null, G__12250_12258, G__12251_12259, G__12252_12260);
            var G__12261 = cljs.core.next(coll_12256__$1);
            var G__12262 = n_12257 - 1;
            coll_12256__$1 = G__12261;
            n_12257 = G__12262;
            continue;
          } else {
            if (cljs.core.seq(coll_12256__$1) && n_12257 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__7260__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__7260__auto__)) {
                  return or__7260__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_12246;
  }
};
cljs.core.write_all = function cljs$core$write_all(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12269 = arguments.length;
  var i__8374__auto___12270 = 0;
  while (true) {
    if (i__8374__auto___12270 < len__8373__auto___12269) {
      args__8380__auto__.push(arguments[i__8374__auto___12270]);
      var G__12271 = i__8374__auto___12270 + 1;
      i__8374__auto___12270 = G__12271;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__12265 = cljs.core.seq(ss);
  var chunk__12266 = null;
  var count__12267 = 0;
  var i__12268 = 0;
  while (true) {
    if (i__12268 < count__12267) {
      var s = chunk__12266.cljs$core$IIndexed$_nth$arity$2(null, i__12268);
      cljs.core._write(writer, s);
      var G__12272 = seq__12265;
      var G__12273 = chunk__12266;
      var G__12274 = count__12267;
      var G__12275 = i__12268 + 1;
      seq__12265 = G__12272;
      chunk__12266 = G__12273;
      count__12267 = G__12274;
      i__12268 = G__12275;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__12265);
      if (temp__4657__auto__) {
        var seq__12265__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__12265__$1)) {
          var c__8079__auto__ = cljs.core.chunk_first(seq__12265__$1);
          var G__12276 = cljs.core.chunk_rest(seq__12265__$1);
          var G__12277 = c__8079__auto__;
          var G__12278 = cljs.core.count(c__8079__auto__);
          var G__12279 = 0;
          seq__12265 = G__12276;
          chunk__12266 = G__12277;
          count__12267 = G__12278;
          i__12268 = G__12279;
          continue;
        } else {
          var s = cljs.core.first(seq__12265__$1);
          cljs.core._write(writer, s);
          var G__12280 = cljs.core.next(seq__12265__$1);
          var G__12281 = null;
          var G__12282 = 0;
          var G__12283 = 0;
          seq__12265 = G__12280;
          chunk__12266 = G__12281;
          count__12267 = G__12282;
          i__12268 = G__12283;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq12263) {
  var G__12264 = cljs.core.first(seq12263);
  var seq12263__$1 = cljs.core.next(seq12263);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__12264, seq12263__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj12285 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj12285;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1('"'), cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str.cljs$core$IFn$_invoke$arity$1('"')].join("");
};
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__7248__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)));
  if (and__7248__auto__) {
    var and__7248__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IMeta$ ? true : false : false;
    if (and__7248__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__7248__auto____$1;
    }
  } else {
    return and__7248__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      var G__12300_12308 = cljs.core.meta(obj);
      var G__12301_12309 = writer;
      var G__12302_12310 = opts;
      cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__12300_12308, G__12301_12309, G__12302_12310) : cljs.core.pr_writer.call(null, G__12300_12308, G__12301_12309, G__12302_12310);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
        return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
      } else {
        if (obj === true || obj === false || typeof obj === "number") {
          return cljs.core._write(writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(""));
        } else {
          if (cljs.core.object_QMARK_(obj)) {
            cljs.core._write(writer, "#js ");
            var G__12304 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
            }, cljs.core.js_keys(obj));
            var G__12305 = cljs.core.pr_writer;
            var G__12306 = writer;
            var G__12307 = opts;
            return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__12304, G__12305, G__12306, G__12307) : cljs.core.print_map.call(null, G__12304, G__12305, G__12306, G__12307);
          } else {
            if (cljs.core.array_QMARK_(obj)) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
            } else {
              if (goog.isString(obj)) {
                if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                  return cljs.core._write(writer, cljs.core.quote_string(obj));
                } else {
                  return cljs.core._write(writer, obj);
                }
              } else {
                if (goog.isFunction(obj)) {
                  var name = obj.name;
                  var name__$1 = cljs.core.truth_(function() {
                    var or__7260__auto__ = name == null;
                    if (or__7260__auto__) {
                      return or__7260__auto__;
                    } else {
                      return goog.string.isEmpty(name);
                    }
                  }()) ? "Function" : name;
                  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, ' "', [cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(""), '"]'], 0));
                } else {
                  if (obj instanceof Date) {
                    var normalize = function(n, len) {
                      var ns = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join("");
                      while (true) {
                        if (cljs.core.count(ns) < len) {
                          var G__12311 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1("0"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join("");
                          ns = G__12311;
                          continue;
                        } else {
                          return ns;
                        }
                        break;
                      }
                    };
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                  } else {
                    if (cljs.core.regexp_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                    } else {
                      if (cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)) {
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                      } else {
                        var name = obj.constructor.name;
                        var name__$1 = cljs.core.truth_(function() {
                          var or__7260__auto__ = name == null;
                          if (or__7260__auto__) {
                            return or__7260__auto__;
                          } else {
                            return goog.string.isEmpty(name);
                          }
                        }()) ? "Object" : name;
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, " ", [cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(""), "]"], 0));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var alt_impl = temp__4655__auto__;
    var G__12315 = obj;
    var G__12316 = writer;
    var G__12317 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__12315, G__12316, G__12317) : alt_impl.call(null, G__12315, G__12316, G__12317);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__12322 = cljs.core.seq(cljs.core.next(objs));
  var chunk__12323 = null;
  var count__12324 = 0;
  var i__12325 = 0;
  while (true) {
    if (i__12325 < count__12324) {
      var obj = chunk__12323.cljs$core$IIndexed$_nth$arity$2(null, i__12325);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__12326 = seq__12322;
      var G__12327 = chunk__12323;
      var G__12328 = count__12324;
      var G__12329 = i__12325 + 1;
      seq__12322 = G__12326;
      chunk__12323 = G__12327;
      count__12324 = G__12328;
      i__12325 = G__12329;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__12322);
      if (temp__4657__auto__) {
        var seq__12322__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__12322__$1)) {
          var c__8079__auto__ = cljs.core.chunk_first(seq__12322__$1);
          var G__12330 = cljs.core.chunk_rest(seq__12322__$1);
          var G__12331 = c__8079__auto__;
          var G__12332 = cljs.core.count(c__8079__auto__);
          var G__12333 = 0;
          seq__12322 = G__12330;
          chunk__12323 = G__12331;
          count__12324 = G__12332;
          i__12325 = G__12333;
          continue;
        } else {
          var obj = cljs.core.first(seq__12322__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__12334 = cljs.core.next(seq__12322__$1);
          var G__12335 = null;
          var G__12336 = 0;
          var G__12337 = 0;
          seq__12322 = G__12334;
          chunk__12323 = G__12335;
          count__12324 = G__12336;
          i__12325 = G__12337;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(var_args) {
  var args12338 = [];
  var len__8373__auto___12341 = arguments.length;
  var i__8374__auto___12342 = 0;
  while (true) {
    if (i__8374__auto___12342 < len__8373__auto___12341) {
      args12338.push(arguments[i__8374__auto___12342]);
      var G__12343 = i__8374__auto___12342 + 1;
      i__8374__auto___12342 = G__12343;
      continue;
    } else {
    }
    break;
  }
  var G__12340 = args12338.length;
  switch(G__12340) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12338.length)].join(""));
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12346 = arguments.length;
  var i__8374__auto___12347 = 0;
  while (true) {
    if (i__8374__auto___12347 < len__8373__auto___12346) {
      args__8380__auto__.push(arguments[i__8374__auto___12347]);
      var G__12348 = i__8374__auto___12347 + 1;
      i__8374__auto___12347 = G__12348;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq12345) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12345));
};
cljs.core.prn_str = function cljs$core$prn_str(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12350 = arguments.length;
  var i__8374__auto___12351 = 0;
  while (true) {
    if (i__8374__auto___12351 < len__8373__auto___12350) {
      args__8380__auto__.push(arguments[i__8374__auto___12351]);
      var G__12352 = i__8374__auto___12351 + 1;
      i__8374__auto___12351 = G__12352;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq12349) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12349));
};
cljs.core.pr = function cljs$core$pr(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12354 = arguments.length;
  var i__8374__auto___12355 = 0;
  while (true) {
    if (i__8374__auto___12355 < len__8373__auto___12354) {
      args__8380__auto__.push(arguments[i__8374__auto___12355]);
      var G__12356 = i__8374__auto___12355 + 1;
      i__8374__auto___12355 = G__12356;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq12353) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12353));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__12357__i = 0, G__12357__a = new Array(arguments.length - 0);
      while (G__12357__i < G__12357__a.length) {
        G__12357__a[G__12357__i] = arguments[G__12357__i + 0];
        ++G__12357__i;
      }
      objs = new cljs.core.IndexedSeq(G__12357__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__12358) {
    var objs = cljs.core.seq(arglist__12358);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12360 = arguments.length;
  var i__8374__auto___12361 = 0;
  while (true) {
    if (i__8374__auto___12361 < len__8373__auto___12360) {
      args__8380__auto__.push(arguments[i__8374__auto___12361]);
      var G__12362 = i__8374__auto___12361 + 1;
      i__8374__auto___12361 = G__12362;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq12359) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12359));
};
cljs.core.println = function cljs$core$println(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12364 = arguments.length;
  var i__8374__auto___12365 = 0;
  while (true) {
    if (i__8374__auto___12365 < len__8373__auto___12364) {
      args__8380__auto__.push(arguments[i__8374__auto___12365]);
      var G__12366 = i__8374__auto___12365 + 1;
      i__8374__auto___12365 = G__12366;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core._STAR_print_newline_STAR_) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq12363) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12363));
};
cljs.core.println_str = function cljs$core$println_str(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12368 = arguments.length;
  var i__8374__auto___12369 = 0;
  while (true) {
    if (i__8374__auto___12369 < len__8373__auto___12368) {
      args__8380__auto__.push(arguments[i__8374__auto___12369]);
      var G__12370 = i__8374__auto___12369 + 1;
      i__8374__auto___12369 = G__12370;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq12367) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12367));
};
cljs.core.prn = function cljs$core$prn(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12372 = arguments.length;
  var i__8374__auto___12373 = 0;
  while (true) {
    if (i__8374__auto___12373 < len__8373__auto___12372) {
      args__8380__auto__.push(arguments[i__8374__auto___12373]);
      var G__12374 = i__8374__auto___12373 + 1;
      i__8374__auto___12373 = G__12374;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core._STAR_print_newline_STAR_) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq12371) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12371));
};
cljs.core.strip_ns = function cljs$core$strip_ns(named) {
  if (named instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, cljs.core.name(named));
  } else {
    return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(null, cljs.core.name(named));
  }
};
cljs.core.lift_ns = function cljs$core$lift_ns(m) {
  if (cljs.core._STAR_print_namespace_maps_STAR_) {
    var ns = null;
    var G__12400 = cljs.core.seq(m);
    var vec__12401 = G__12400;
    var seq__12402 = cljs.core.seq(vec__12401);
    var first__12403 = cljs.core.first(seq__12402);
    var seq__12402__$1 = cljs.core.next(seq__12402);
    var vec__12404 = first__12403;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12404, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12404, 1, null);
    var entry = vec__12404;
    var entries = seq__12402__$1;
    var lm = cljs.core.empty(m);
    var ns__$1 = ns;
    var G__12400__$1 = G__12400;
    var lm__$1 = lm;
    while (true) {
      var ns__$2 = ns__$1;
      var vec__12407 = G__12400__$1;
      var seq__12408 = cljs.core.seq(vec__12407);
      var first__12409 = cljs.core.first(seq__12408);
      var seq__12408__$1 = cljs.core.next(seq__12408);
      var vec__12410 = first__12409;
      var k__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12410, 0, null);
      var v__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12410, 1, null);
      var entry__$1 = vec__12410;
      var entries__$1 = seq__12408__$1;
      var lm__$2 = lm__$1;
      if (cljs.core.truth_(entry__$1)) {
        if (k__$1 instanceof cljs.core.Keyword || k__$1 instanceof cljs.core.Symbol) {
          if (cljs.core.truth_(ns__$2)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ns__$2, cljs.core.namespace(k__$1))) {
              var G__12413 = ns__$2;
              var G__12414 = entries__$1;
              var G__12415 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(lm__$2, cljs.core.strip_ns(k__$1), v__$1);
              ns__$1 = G__12413;
              G__12400__$1 = G__12414;
              lm__$1 = G__12415;
              continue;
            } else {
              return null;
            }
          } else {
            var temp__4657__auto__ = cljs.core.namespace(k__$1);
            if (cljs.core.truth_(temp__4657__auto__)) {
              var new_ns = temp__4657__auto__;
              var G__12416 = new_ns;
              var G__12417 = entries__$1;
              var G__12418 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(lm__$2, cljs.core.strip_ns(k__$1), v__$1);
              ns__$1 = G__12416;
              G__12400__$1 = G__12417;
              lm__$1 = G__12418;
              continue;
            } else {
              return null;
            }
          }
        } else {
          return null;
        }
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns__$2, lm__$2], null);
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.print_prefix_map = function cljs$core$print_prefix_map(prefix, m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__12425_12431 = cljs.core.key(e);
    var G__12426_12432 = w;
    var G__12427_12433 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__12425_12431, G__12426_12432, G__12427_12433) : print_one.call(null, G__12425_12431, G__12426_12432, G__12427_12433);
    cljs.core._write(w, " ");
    var G__12428 = cljs.core.val(e);
    var G__12429 = w;
    var G__12430 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__12428, G__12429, G__12430) : print_one.call(null, G__12428, G__12429, G__12430);
  }, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix), cljs.core.str.cljs$core$IFn$_invoke$arity$1("{")].join(""), ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  var vec__12437 = cljs.core.lift_ns(m);
  var ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12437, 0, null);
  var lift_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12437, 1, null);
  if (cljs.core.truth_(ns)) {
    return cljs.core.print_prefix_map([cljs.core.str.cljs$core$IFn$_invoke$arity$1("#:"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(""), lift_map, print_one, writer, opts);
  } else {
    return cljs.core.print_prefix_map(null, m, print_one, writer, opts);
  }
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12443 = arguments.length;
  var i__8374__auto___12444 = 0;
  while (true) {
    if (i__8374__auto___12444 < len__8373__auto___12443) {
      args__8380__auto__.push(arguments[i__8374__auto___12444]);
      var G__12445 = i__8374__auto___12444 + 1;
      i__8374__auto___12444 = G__12445;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 2 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(2), 0, null) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8381__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq12440) {
  var G__12441 = cljs.core.first(seq12440);
  var seq12440__$1 = cljs.core.next(seq12440);
  var G__12442 = cljs.core.first(seq12440__$1);
  var seq12440__$2 = cljs.core.next(seq12440__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12441, G__12442, seq12440__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym(var_args) {
  var args12446 = [];
  var len__8373__auto___12449 = arguments.length;
  var i__8374__auto___12450 = 0;
  while (true) {
    if (i__8374__auto___12450 < len__8373__auto___12449) {
      args12446.push(arguments[i__8374__auto___12450]);
      var G__12451 = i__8374__auto___12450 + 1;
      i__8374__auto___12450 = G__12451;
      continue;
    } else {
    }
    break;
  }
  var G__12448 = args12446.length;
  switch(G__12448) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12446.length)].join(""));
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
  var self__ = this;
  var x__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(x) {
  return cljs.core._realized_QMARK_(x);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__12453_SHARP_, p2__12454_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__12453_SHARP_, p2__12454_SHARP_) : rf.call(null, p1__12453_SHARP_, p2__12454_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__12455 = null;
      var G__12455__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__12455__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__12455__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__12455 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12455__0.call(this);
          case 1:
            return G__12455__1.call(this, result);
          case 2:
            return G__12455__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__12455.cljs$core$IFn$_invoke$arity$0 = G__12455__0;
      G__12455.cljs$core$IFn$_invoke$arity$1 = G__12455__1;
      G__12455.cljs$core$IFn$_invoke$arity$2 = G__12455__2;
      return G__12455;
    }();
  }(rf1);
};
cljs.core.halt_when = function cljs$core$halt_when(var_args) {
  var args12456 = [];
  var len__8373__auto___12461 = arguments.length;
  var i__8374__auto___12462 = 0;
  while (true) {
    if (i__8374__auto___12462 < len__8373__auto___12461) {
      args12456.push(arguments[i__8374__auto___12462]);
      var G__12463 = i__8374__auto___12462 + 1;
      i__8374__auto___12462 = G__12463;
      continue;
    } else {
    }
    break;
  }
  var G__12458 = args12456.length;
  switch(G__12458) {
    case 1:
      return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12456.length)].join(""));
  }
};
cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(pred, null);
};
cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2 = function(pred, retf) {
  return function(rf) {
    return function() {
      var G__12465 = null;
      var G__12465__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__12465__1 = function(result) {
        if (cljs.core.map_QMARK_(result) && cljs.core.contains_QMARK_(result, new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715))) {
          return (new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715)).cljs$core$IFn$_invoke$arity$1(result);
        } else {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        }
      };
      var G__12465__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return cljs.core.reduced(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715), cljs.core.truth_(retf) ? function() {
            var G__12459 = rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
            var G__12460 = input;
            return retf.cljs$core$IFn$_invoke$arity$2 ? retf.cljs$core$IFn$_invoke$arity$2(G__12459, G__12460) : retf.call(null, G__12459, G__12460);
          }() : input], null));
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        }
      };
      G__12465 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12465__0.call(this);
          case 1:
            return G__12465__1.call(this, result);
          case 2:
            return G__12465__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__12465.cljs$core$IFn$_invoke$arity$0 = G__12465__0;
      G__12465.cljs$core$IFn$_invoke$arity$1 = G__12465__1;
      G__12465.cljs$core$IFn$_invoke$arity$2 = G__12465__2;
      return G__12465;
    }();
  };
};
cljs.core.halt_when.cljs$lang$maxFixedArity = 2;
cljs.core.dedupe = function cljs$core$dedupe(var_args) {
  var args12466 = [];
  var len__8373__auto___12469 = arguments.length;
  var i__8374__auto___12470 = 0;
  while (true) {
    if (i__8374__auto___12470 < len__8373__auto___12469) {
      args12466.push(arguments[i__8374__auto___12470]);
      var G__12471 = i__8374__auto___12470 + 1;
      i__8374__auto___12470 = G__12471;
      continue;
    } else {
    }
    break;
  }
  var G__12468 = args12466.length;
  switch(G__12468) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12466.length)].join(""));
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__12473 = null;
        var G__12473__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12473__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__12473__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__12473 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12473__0.call(this);
            case 1:
              return G__12473__1.call(this, result);
            case 2:
              return G__12473__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12473.cljs$core$IFn$_invoke$arity$0 = G__12473__0;
        G__12473.cljs$core$IFn$_invoke$arity$1 = G__12473__1;
        G__12473.cljs$core$IFn$_invoke$arity$2 = G__12473__2;
        return G__12473;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample(var_args) {
  var args12474 = [];
  var len__8373__auto___12477 = arguments.length;
  var i__8374__auto___12478 = 0;
  while (true) {
    if (i__8374__auto___12478 < len__8373__auto___12477) {
      args12474.push(arguments[i__8374__auto___12478]);
      var G__12479 = i__8374__auto___12478 + 1;
      i__8374__auto___12478 = G__12479;
      continue;
    } else {
    }
    break;
  }
  var G__12476 = args12474.length;
  switch(G__12476) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12474.length)].join(""));
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.indexOf = function() {
  var G__12481 = null;
  var G__12481__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, 0);
  };
  var G__12481__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__12481 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__12481__1.call(this, x);
      case 2:
        return G__12481__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12481.cljs$core$IFn$_invoke$arity$1 = G__12481__1;
  G__12481.cljs$core$IFn$_invoke$arity$2 = G__12481__2;
  return G__12481;
}();
cljs.core.Eduction.prototype.lastIndexOf = function() {
  var G__12482 = null;
  var G__12482__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, cljs.core.count(coll__$1));
  };
  var G__12482__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__12482 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__12482__1.call(this, x);
      case 2:
        return G__12482__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12482.cljs$core$IFn$_invoke$arity$1 = G__12482__1;
  G__12482.cljs$core$IFn$_invoke$arity$2 = G__12482__2;
  return G__12482;
}();
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8274__auto__ = this;
  return cljs.core.es6_iterator(this__8274__auto__);
};
cljs.core.eduction = function cljs$core$eduction(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12484 = arguments.length;
  var i__8374__auto___12485 = 0;
  while (true) {
    if (i__8374__auto___12485 < len__8373__auto___12484) {
      args__8380__auto__.push(arguments[i__8374__auto___12485]);
      var G__12486 = i__8374__auto___12485 + 1;
      i__8374__auto___12485 = G__12486;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq12483) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12483));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__12488_SHARP_, p2__12487_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__12487_SHARP_) : proc.call(null, p2__12487_SHARP_);
  }, null, coll);
  return null;
};
cljs.core.IEncodeJS = function() {
};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__7928__auto__ = x == null ? null : x;
    var m__7929__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto__.call(null, x);
    } else {
      var m__7929__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__7928__auto__ = x == null ? null : x;
    var m__7929__auto__ = cljs.core._key__GT_js[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto__.call(null, x);
    } else {
      var m__7929__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__7929__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
      }
    }
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || cljs.core.PROTOCOL_SENTINEL === k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__12511_12525 = cljs.core.seq(x);
            var chunk__12512_12526 = null;
            var count__12513_12527 = 0;
            var i__12514_12528 = 0;
            while (true) {
              if (i__12514_12528 < count__12513_12527) {
                var vec__12515_12529 = chunk__12512_12526.cljs$core$IIndexed$_nth$arity$2(null, i__12514_12528);
                var k_12530 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12515_12529, 0, null);
                var v_12531 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12515_12529, 1, null);
                m[cljs.core.key__GT_js(k_12530)] = cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(v_12531) : cljs.core.clj__GT_js.call(null, v_12531);
                var G__12532 = seq__12511_12525;
                var G__12533 = chunk__12512_12526;
                var G__12534 = count__12513_12527;
                var G__12535 = i__12514_12528 + 1;
                seq__12511_12525 = G__12532;
                chunk__12512_12526 = G__12533;
                count__12513_12527 = G__12534;
                i__12514_12528 = G__12535;
                continue;
              } else {
                var temp__4657__auto___12536 = cljs.core.seq(seq__12511_12525);
                if (temp__4657__auto___12536) {
                  var seq__12511_12537__$1 = temp__4657__auto___12536;
                  if (cljs.core.chunked_seq_QMARK_(seq__12511_12537__$1)) {
                    var c__8079__auto___12538 = cljs.core.chunk_first(seq__12511_12537__$1);
                    var G__12539 = cljs.core.chunk_rest(seq__12511_12537__$1);
                    var G__12540 = c__8079__auto___12538;
                    var G__12541 = cljs.core.count(c__8079__auto___12538);
                    var G__12542 = 0;
                    seq__12511_12525 = G__12539;
                    chunk__12512_12526 = G__12540;
                    count__12513_12527 = G__12541;
                    i__12514_12528 = G__12542;
                    continue;
                  } else {
                    var vec__12518_12543 = cljs.core.first(seq__12511_12537__$1);
                    var k_12544 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12518_12543, 0, null);
                    var v_12545 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12518_12543, 1, null);
                    m[cljs.core.key__GT_js(k_12544)] = cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(v_12545) : cljs.core.clj__GT_js.call(null, v_12545);
                    var G__12546 = cljs.core.next(seq__12511_12537__$1);
                    var G__12547 = null;
                    var G__12548 = 0;
                    var G__12549 = 0;
                    seq__12511_12525 = G__12546;
                    chunk__12512_12526 = G__12547;
                    count__12513_12527 = G__12548;
                    i__12514_12528 = G__12549;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__12521_12550 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.clj__GT_js, x));
              var chunk__12522_12551 = null;
              var count__12523_12552 = 0;
              var i__12524_12553 = 0;
              while (true) {
                if (i__12524_12553 < count__12523_12552) {
                  var x_12554__$1 = chunk__12522_12551.cljs$core$IIndexed$_nth$arity$2(null, i__12524_12553);
                  arr.push(x_12554__$1);
                  var G__12555 = seq__12521_12550;
                  var G__12556 = chunk__12522_12551;
                  var G__12557 = count__12523_12552;
                  var G__12558 = i__12524_12553 + 1;
                  seq__12521_12550 = G__12555;
                  chunk__12522_12551 = G__12556;
                  count__12523_12552 = G__12557;
                  i__12524_12553 = G__12558;
                  continue;
                } else {
                  var temp__4657__auto___12559 = cljs.core.seq(seq__12521_12550);
                  if (temp__4657__auto___12559) {
                    var seq__12521_12560__$1 = temp__4657__auto___12559;
                    if (cljs.core.chunked_seq_QMARK_(seq__12521_12560__$1)) {
                      var c__8079__auto___12561 = cljs.core.chunk_first(seq__12521_12560__$1);
                      var G__12562 = cljs.core.chunk_rest(seq__12521_12560__$1);
                      var G__12563 = c__8079__auto___12561;
                      var G__12564 = cljs.core.count(c__8079__auto___12561);
                      var G__12565 = 0;
                      seq__12521_12550 = G__12562;
                      chunk__12522_12551 = G__12563;
                      count__12523_12552 = G__12564;
                      i__12524_12553 = G__12565;
                      continue;
                    } else {
                      var x_12566__$1 = cljs.core.first(seq__12521_12560__$1);
                      arr.push(x_12566__$1);
                      var G__12567 = cljs.core.next(seq__12521_12560__$1);
                      var G__12568 = null;
                      var G__12569 = 0;
                      var G__12570 = 0;
                      seq__12521_12550 = G__12567;
                      chunk__12522_12551 = G__12568;
                      count__12523_12552 = G__12569;
                      i__12524_12553 = G__12570;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__7928__auto__ = x == null ? null : x;
    var m__7929__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__7929__auto__.call(null, x, options);
    } else {
      var m__7929__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__7929__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj(var_args) {
  var args12571 = [];
  var len__8373__auto___12596 = arguments.length;
  var i__8374__auto___12597 = 0;
  while (true) {
    if (i__8374__auto___12597 < len__8373__auto___12596) {
      args12571.push(arguments[i__8374__auto___12597]);
      var G__12598 = i__8374__auto___12597 + 1;
      i__8374__auto___12597 = G__12598;
      continue;
    } else {
    }
    break;
  }
  var G__12575 = args12571.length;
  switch(G__12575) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args12571.slice(1), 0, null);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8392__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__12576 = opts;
  var map__12576__$1 = (!(map__12576 == null) ? map__12576.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__12576.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__12576) : map__12576;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12576__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__12576, map__12576__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || cljs.core.PROTOCOL_SENTINEL === x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__8048__auto__ = function(map__12576, map__12576__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__12590(s__12591) {
                      return new cljs.core.LazySeq(null, function(map__12576, map__12576__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__12591__$1 = s__12591;
                          while (true) {
                            var temp__4657__auto__ = cljs.core.seq(s__12591__$1);
                            if (temp__4657__auto__) {
                              var s__12591__$2 = temp__4657__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__12591__$2)) {
                                var c__8046__auto__ = cljs.core.chunk_first(s__12591__$2);
                                var size__8047__auto__ = cljs.core.count(c__8046__auto__);
                                var b__12593 = cljs.core.chunk_buffer(size__8047__auto__);
                                if (function() {
                                  var i__12592 = 0;
                                  while (true) {
                                    if (i__12592 < size__8047__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__8046__auto__, i__12592);
                                      cljs.core.chunk_append(b__12593, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__12600 = i__12592 + 1;
                                      i__12592 = G__12600;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__12593), cljs$core$thisfn_$_iter__12590(cljs.core.chunk_rest(s__12591__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__12593), null);
                                }
                              } else {
                                var k = cljs.core.first(s__12591__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__12590(cljs.core.rest(s__12591__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__12576, map__12576__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__12576, map__12576__$1, keywordize_keys, keyfn);
                  return iter__8048__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__12576, map__12576__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq12572) {
  var G__12573 = cljs.core.first(seq12572);
  var seq12572__$1 = cljs.core.next(seq12572);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__12573, seq12572__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__12602 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__12602) : cljs.core.atom.call(null, G__12602);
  }();
  return function(mem) {
    return function() {
      var G__12603__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__12603 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__12604__i = 0, G__12604__a = new Array(arguments.length - 0);
          while (G__12604__i < G__12604__a.length) {
            G__12604__a[G__12604__i] = arguments[G__12604__i + 0];
            ++G__12604__i;
          }
          args = new cljs.core.IndexedSeq(G__12604__a, 0);
        }
        return G__12603__delegate.call(this, args);
      };
      G__12603.cljs$lang$maxFixedArity = 0;
      G__12603.cljs$lang$applyTo = function(arglist__12605) {
        var args = cljs.core.seq(arglist__12605);
        return G__12603__delegate(args);
      };
      G__12603.cljs$core$IFn$_invoke$arity$variadic = G__12603__delegate;
      return G__12603;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline(var_args) {
  var args12606 = [];
  var len__8373__auto___12611 = arguments.length;
  var i__8374__auto___12612 = 0;
  while (true) {
    if (i__8374__auto___12612 < len__8373__auto___12611) {
      args12606.push(arguments[i__8374__auto___12612]);
      var G__12613 = i__8374__auto___12612 + 1;
      i__8374__auto___12612 = G__12613;
      continue;
    } else {
    }
    break;
  }
  var G__12610 = args12606.length;
  switch(G__12610) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8392__auto__ = new cljs.core.IndexedSeq(args12606.slice(1), 0, null);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8392__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__12615 = ret;
      f = G__12615;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq12607) {
  var G__12608 = cljs.core.first(seq12607);
  var seq12607__$1 = cljs.core.next(seq12607);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__12608, seq12607__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand(var_args) {
  var args12616 = [];
  var len__8373__auto___12619 = arguments.length;
  var i__8374__auto___12620 = 0;
  while (true) {
    if (i__8374__auto___12620 < len__8373__auto___12619) {
      args12616.push(arguments[i__8374__auto___12620]);
      var G__12621 = i__8374__auto___12620 + 1;
      i__8374__auto___12620 = G__12621;
      continue;
    } else {
    }
    break;
  }
  var G__12618 = args12616.length;
  switch(G__12618) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12616.length)].join(""));
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__12624 = Math.random() * n;
  return Math.floor(G__12624);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__12626 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__12626) : cljs.core.atom.call(null, G__12626);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12629 = arguments.length;
  var i__8374__auto___12630 = 0;
  while (true) {
    if (i__8374__auto___12630 < len__8373__auto___12629) {
      args__8380__auto__.push(arguments[i__8374__auto___12630]);
      var G__12631 = i__8374__auto___12630 + 1;
      i__8374__auto___12630 = G__12631;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq12627) {
  var G__12628 = cljs.core.first(seq12627);
  var seq12627__$1 = cljs.core.next(seq12627);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12628, seq12627__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_(var_args) {
  var args12632 = [];
  var len__8373__auto___12636 = arguments.length;
  var i__8374__auto___12637 = 0;
  while (true) {
    if (i__8374__auto___12637 < len__8373__auto___12636) {
      args12632.push(arguments[i__8374__auto___12637]);
      var G__12638 = i__8374__auto___12637 + 1;
      i__8374__auto___12637 = G__12638;
      continue;
    } else {
    }
    break;
  }
  var G__12634 = args12632.length;
  switch(G__12634) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12632.length)].join(""));
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__12635 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12635) : cljs.core.deref.call(null, G__12635);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__7260__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__7260__auto__) {
    return or__7260__auto__;
  } else {
    var or__7260__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__7260__auto____$1) {
      return or__7260__auto____$1;
    } else {
      var and__7248__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__7248__auto__) {
        var and__7248__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__7248__auto____$1) {
          var and__7248__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__7248__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__12640 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__12641 = i + 1;
                ret = G__12640;
                i = G__12641;
                continue;
              }
              break;
            }
          } else {
            return and__7248__auto____$2;
          }
        } else {
          return and__7248__auto____$1;
        }
      } else {
        return and__7248__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents(var_args) {
  var args12642 = [];
  var len__8373__auto___12646 = arguments.length;
  var i__8374__auto___12647 = 0;
  while (true) {
    if (i__8374__auto___12647 < len__8373__auto___12646) {
      args12642.push(arguments[i__8374__auto___12647]);
      var G__12648 = i__8374__auto___12647 + 1;
      i__8374__auto___12647 = G__12648;
      continue;
    } else {
    }
    break;
  }
  var G__12644 = args12642.length;
  switch(G__12644) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12642.length)].join(""));
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__12645 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12645) : cljs.core.deref.call(null, G__12645);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors(var_args) {
  var args12650 = [];
  var len__8373__auto___12654 = arguments.length;
  var i__8374__auto___12655 = 0;
  while (true) {
    if (i__8374__auto___12655 < len__8373__auto___12654) {
      args12650.push(arguments[i__8374__auto___12655]);
      var G__12656 = i__8374__auto___12655 + 1;
      i__8374__auto___12655 = G__12656;
      continue;
    } else {
    }
    break;
  }
  var G__12652 = args12650.length;
  switch(G__12652) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12650.length)].join(""));
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__12653 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12653) : cljs.core.deref.call(null, G__12653);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants(var_args) {
  var args12658 = [];
  var len__8373__auto___12662 = arguments.length;
  var i__8374__auto___12663 = 0;
  while (true) {
    if (i__8374__auto___12663 < len__8373__auto___12662) {
      args12658.push(arguments[i__8374__auto___12663]);
      var G__12664 = i__8374__auto___12663 + 1;
      i__8374__auto___12663 = G__12664;
      continue;
    } else {
    }
    break;
  }
  var G__12660 = args12658.length;
  switch(G__12660) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12658.length)].join(""));
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__12661 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12661) : cljs.core.deref.call(null, G__12661);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive(var_args) {
  var args12666 = [];
  var len__8373__auto___12669 = arguments.length;
  var i__8374__auto___12670 = 0;
  while (true) {
    if (i__8374__auto___12670 < len__8373__auto___12669) {
      args12666.push(arguments[i__8374__auto___12670]);
      var G__12671 = i__8374__auto___12670 + 1;
      i__8374__auto___12670 = G__12671;
      continue;
    } else {
    }
    break;
  }
  var G__12668 = args12666.length;
  switch(G__12668) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12666.length)].join(""));
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error("Assert failed: (namespace parent)");
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error("Assert failed: (not\x3d tag parent)");
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__7260__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), cljs.core.str.cljs$core$IFn$_invoke$arity$1("already has"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent), cljs.core.str.cljs$core$IFn$_invoke$arity$1("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cyclic derivation:"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent), cljs.core.str.cljs$core$IFn$_invoke$arity$1("has"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), cljs.core.str.cljs$core$IFn$_invoke$arity$1("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive(var_args) {
  var args12676 = [];
  var len__8373__auto___12679 = arguments.length;
  var i__8374__auto___12680 = 0;
  while (true) {
    if (i__8374__auto___12680 < len__8373__auto___12679) {
      args12676.push(arguments[i__8374__auto___12680]);
      var G__12681 = i__8374__auto___12680 + 1;
      i__8374__auto___12680 = G__12681;
      continue;
    } else {
    }
    break;
  }
  var G__12678 = args12676.length;
  switch(G__12678) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12676.length)].join(""));
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__12673_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__12673_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__12673_SHARP_), cljs.core.second(p1__12673_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__12674_SHARP_, p2__12675_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__12674_SHARP_, p2__12675_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__7260__auto__ = cljs.core.truth_(function() {
    var and__7248__auto__ = xprefs;
    if (cljs.core.truth_(and__7248__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__7248__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    var or__7260__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(function() {
            var G__12698 = x;
            var G__12699 = cljs.core.first(ps);
            var G__12700 = prefer_table;
            return cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__12698, G__12699, G__12700) : cljs.core.prefers_STAR_.call(null, G__12698, G__12699, G__12700);
          }())) {
          } else {
          }
          var G__12707 = cljs.core.rest(ps);
          ps = G__12707;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__7260__auto____$1)) {
      return or__7260__auto____$1;
    } else {
      var or__7260__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(function() {
              var G__12704 = cljs.core.first(ps);
              var G__12705 = y;
              var G__12706 = prefer_table;
              return cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__12704, G__12705, G__12706) : cljs.core.prefers_STAR_.call(null, G__12704, G__12705, G__12706);
            }())) {
            } else {
            }
            var G__12708 = cljs.core.rest(ps);
            ps = G__12708;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__7260__auto____$2)) {
        return or__7260__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table, hierarchy) {
  var or__7260__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(hierarchy, x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__12713) {
    var vec__12714 = p__12713;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12714, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12714, 1, null);
    var e = vec__12714;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__7260__auto__ = be == null;
        if (or__7260__auto__) {
          return or__7260__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy));
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy)))) {
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Multiple methods in multimethod '"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("' match dispatch value: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" -\x3e "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(k), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" and "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(be2)), 
        cljs.core.str.cljs$core$IFn$_invoke$arity$1(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$7 ? cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$7(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) : cljs.core.find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._reset[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto__.call(null, mf);
    } else {
      var m__7929__auto____$1 = cljs.core._reset["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._add_method[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__7929__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__7929__auto____$1 = cljs.core._add_method["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__7929__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._remove_method[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__7929__auto__.call(null, mf, dispatch_val);
    } else {
      var m__7929__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__7929__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._prefer_method[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__7929__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__7929__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__7929__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._get_method[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__7929__auto__.call(null, mf, dispatch_val);
    } else {
      var m__7929__auto____$1 = cljs.core._get_method["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__7929__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._methods[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto__.call(null, mf);
    } else {
      var m__7929__auto____$1 = cljs.core._methods["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._prefers[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto__.call(null, mf);
    } else {
      var m__7929__auto____$1 = cljs.core._prefers["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto__.call(null, mf);
    } else {
      var m__7929__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__7928__auto__ = mf == null ? null : mf;
    var m__7929__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto__.call(null, mf);
    } else {
      var m__7929__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__7929__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__7929__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No method in multimethod '"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("' for dispatch value: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__12718 = null;
  var G__12718__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__12718__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__12718__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__12718__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__12718__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__12718__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__12718__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__12718__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__12718__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__12718__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__12718__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__12718__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__12718__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__12718__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__12718__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__12718__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__12718__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__12718__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__12718__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__12718__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__12718__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__12718__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__12718 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__12718__1.call(this, self__);
      case 2:
        return G__12718__2.call(this, self__, a);
      case 3:
        return G__12718__3.call(this, self__, a, b);
      case 4:
        return G__12718__4.call(this, self__, a, b, c);
      case 5:
        return G__12718__5.call(this, self__, a, b, c, d);
      case 6:
        return G__12718__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__12718__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__12718__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__12718__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__12718__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__12718__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__12718__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__12718__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__12718__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__12718__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__12718__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__12718__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__12718__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__12718__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__12718__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__12718__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__12718__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12718.cljs$core$IFn$_invoke$arity$1 = G__12718__1;
  G__12718.cljs$core$IFn$_invoke$arity$2 = G__12718__2;
  G__12718.cljs$core$IFn$_invoke$arity$3 = G__12718__3;
  G__12718.cljs$core$IFn$_invoke$arity$4 = G__12718__4;
  G__12718.cljs$core$IFn$_invoke$arity$5 = G__12718__5;
  G__12718.cljs$core$IFn$_invoke$arity$6 = G__12718__6;
  G__12718.cljs$core$IFn$_invoke$arity$7 = G__12718__7;
  G__12718.cljs$core$IFn$_invoke$arity$8 = G__12718__8;
  G__12718.cljs$core$IFn$_invoke$arity$9 = G__12718__9;
  G__12718.cljs$core$IFn$_invoke$arity$10 = G__12718__10;
  G__12718.cljs$core$IFn$_invoke$arity$11 = G__12718__11;
  G__12718.cljs$core$IFn$_invoke$arity$12 = G__12718__12;
  G__12718.cljs$core$IFn$_invoke$arity$13 = G__12718__13;
  G__12718.cljs$core$IFn$_invoke$arity$14 = G__12718__14;
  G__12718.cljs$core$IFn$_invoke$arity$15 = G__12718__15;
  G__12718.cljs$core$IFn$_invoke$arity$16 = G__12718__16;
  G__12718.cljs$core$IFn$_invoke$arity$17 = G__12718__17;
  G__12718.cljs$core$IFn$_invoke$arity$18 = G__12718__18;
  G__12718.cljs$core$IFn$_invoke$arity$19 = G__12718__19;
  G__12718.cljs$core$IFn$_invoke$arity$20 = G__12718__20;
  G__12718.cljs$core$IFn$_invoke$arity$21 = G__12718__21;
  G__12718.cljs$core$IFn$_invoke$arity$22 = G__12718__22;
  return G__12718;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args12717) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12717)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Preference conflict in multimethod '"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("': "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is already preferred to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4655__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var target_fn = temp__4655__auto__;
    return target_fn;
  } else {
    var temp__4655__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4655__auto____$1)) {
      var target_fn = temp__4655__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.IUUID = function() {
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.cljs$core$IUUID$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1('#uuid "'), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid), cljs.core.str.cljs$core$IFn$_invoke$arity$1('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__12719 = self__.uuid;
  var G__12720 = other.uuid;
  return goog.array.defaultCompare(G__12719, G__12720);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(16).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(16)).toString(16);
  return cljs.core.uuid([cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("4"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhex), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex())].join(""));
};
cljs.core.uuid_QMARK_ = function cljs$core$uuid_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IUUID$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info(var_args) {
  var args12723 = [];
  var len__8373__auto___12726 = arguments.length;
  var i__8374__auto___12727 = 0;
  while (true) {
    if (i__8374__auto___12727 < len__8373__auto___12726) {
      args12723.push(arguments[i__8374__auto___12727]);
      var G__12728 = i__8374__auto___12727 + 1;
      i__8374__auto___12727 = G__12728;
      continue;
    } else {
    }
    break;
  }
  var G__12725 = args12723.length;
  switch(G__12725) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12723.length)].join(""));
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "ns*", "ns*", 1840949383, null), null, new cljs.core.Symbol(null, "finally", "finally", -1065347064, null), null, new cljs.core.Symbol(null, 
  "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, 
  null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "var", "var", 870848730, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, 
  "catch", "catch", -1616370245, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__12730 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__12730) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("#"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.tag), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? tag)");
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["arguments", "abstract", "await", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", 
"throw", "throws", "transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null", "constructor"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__12732_SHARP_, p2__12733_SHARP_) {
      goog.object.set(p1__12732_SHARP_, p2__12733_SHARP_, true);
      return p1__12732_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return cljs.core.js_reserved.hasOwnProperty(x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__12736 = cljs.core.next(ks__$1);
          var G__12737 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
            var G__12735 = ret;
            if (!(ret === "")) {
              return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__12735), cljs.core.str.cljs$core$IFn$_invoke$arity$1("|")].join("");
            } else {
              return G__12735;
            }
          }()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__12736;
          ret = G__12737;
          continue;
        } else {
          return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret), cljs.core.str.cljs$core$IFn$_invoke$arity$1("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_12738 = 0;
  while (true) {
    if (i_12738 < name.length) {
      var c_12739 = name.charAt(i_12738);
      var sub_12740 = goog.object.get(cljs.core.CHAR_MAP, c_12739);
      if (!(sub_12740 == null)) {
        sb.append(sub_12740);
      } else {
        sb.append(c_12739);
      }
      var G__12741 = i_12738 + 1;
      i_12738 = G__12741;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE_), cljs.core.str.cljs$core$IFn$_invoke$arity$1("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4655__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var match = temp__4655__auto__;
      var vec__12745 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12745, 0, null);
      var G__12748 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret), cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__12749 = r.lastIndex;
      ret = G__12748;
      last_match_end = G__12749;
      continue;
    } else {
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret), cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write(writer__7872__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__12754 = function() {
          var G__12752 = ctxt;
          var G__12753 = cljs.core.first(xs);
          return goog.object.get(G__12752, G__12753);
        }();
        var G__12755 = cljs.core.next(xs);
        ctxt = G__12754;
        xs = G__12755;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(""));
  var segs = munged_ns.split(".");
  var G__12759 = cljs.core._STAR_target_STAR_;
  switch(G__12759) {
    case "nodejs":
      if (cljs.core.truth_(COMPILED)) {
        return cljs.core.find_ns_obj_STAR_(function() {
          try {
            var G__12761 = cljs.core.first(segs);
            return eval(G__12761);
          } catch (e12760) {
            if (e12760 instanceof ReferenceError) {
              var e = e12760;
              return null;
            } else {
              throw e12760;
            }
          }
        }(), cljs.core.next(segs));
      } else {
        return cljs.core.find_ns_obj_STAR_(global, segs);
      }
      break;
    case "default":
      return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("find-ns-obj not supported for target "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_target_STAR_)].join(""));
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns(var_args) {
  var args12763 = [];
  var len__8373__auto___12766 = arguments.length;
  var i__8374__auto___12767 = 0;
  while (true) {
    if (i__8374__auto___12767 < len__8373__auto___12766) {
      args12763.push(arguments[i__8374__auto___12767]);
      var G__12768 = i__8374__auto___12767 + 1;
      i__8374__auto___12767 = G__12768;
      continue;
    } else {
    }
    break;
  }
  var G__12765 = args12763.length;
  switch(G__12765) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12763.length)].join(""));
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__12771 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__12771) : cljs.core.atom.call(null, G__12771);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__12773 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__12773) : cljs.core.atom.call(null, G__12773);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_str), cljs.core.str.cljs$core$IFn$_invoke$arity$1("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (col.getCount && typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (col.getValues && typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (col.getKeys && typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (col.getValues && typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (col.contains && typeof col.contains == "function") {
    return col.contains(val);
  }
  if (col.containsValue && typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (col.isEmpty && typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (col.clear && typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (col.forEach && typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call((opt_obj), values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call((opt_obj), values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call((opt_obj), values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call((opt_obj), values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call((opt_obj), values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call((opt_obj), values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.partialRight = function(fn, var_args) {
  var rightArgs = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.push.apply(newArgs, rightArgs);
    return fn.apply(this, newArgs);
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.functions.once = function(f) {
  var inner = f;
  return function() {
    if (inner) {
      var tmp = inner;
      inner = null;
      tmp();
    }
  };
};
goog.functions.debounce = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  return (function(var_args) {
    goog.global.clearTimeout(timeout);
    var args = arguments;
    timeout = goog.global.setTimeout(function() {
      f.apply(null, args);
    }, interval);
  });
};
goog.functions.throttle = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  var shouldFire = false;
  var args = [];
  var handleTimeout = function() {
    timeout = null;
    if (shouldFire) {
      shouldFire = false;
      fire();
    }
  };
  var fire = function() {
    timeout = goog.global.setTimeout(handleTimeout, interval);
    f.apply(null, args);
  };
  return (function(var_args) {
    args = arguments;
    if (!timeout) {
      fire();
    } else {
      shouldFire = true;
    }
  });
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global["StopIteration"] : {message:"StopIteration", stack:""};
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var val = iterator.next();
    if (f.call(opt_obj, val, undefined, iterator)) {
      return val;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return (this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push((key));
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (version != selfObj.version_) {
      throw Error("The map has changed since the iterator was created");
    }
    if (i >= selfObj.keys_.length) {
      throw goog.iter.StopIteration;
    }
    var key = selfObj.keys_[i++];
    return opt_keys ? key : selfObj.map_[key];
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.define("goog.debug.FORCE_SLOPPY_STACKS", false);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  var html = goog.debug.exposeExceptionAsHtml(err, opt_fn);
  return goog.html.SafeHtml.unwrap(html);
};
goog.debug.exposeExceptionAsHtml = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var viewSourceUrl = goog.debug.createViewSourceUrl_(e.fileName);
    var error = goog.html.SafeHtml.concat(goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Message: " + e.message + "\nUrl: "), goog.html.SafeHtml.create("a", {href:viewSourceUrl, target:"_new"}, e.fileName), goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + e.stack + "-\x3e " + "[end]\n\nJS stack traversal:\n" + goog.debug.getStacktrace(opt_fn) + "-\x3e "));
    return error;
  } catch (e2) {
    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Exception trying to expose exception! You win, we lose. " + e2);
  }
};
goog.debug.createViewSourceUrl_ = function(opt_fileName) {
  if (!goog.isDefAndNotNull(opt_fileName)) {
    opt_fileName = "";
  }
  if (!/^https?:\/\//i.test(opt_fileName)) {
    return goog.html.SafeUrl.fromConstant(goog.string.Const.from("sanitizedviewsrc"));
  }
  var sanitizedFileName = goog.html.SafeUrl.sanitize(opt_fileName);
  return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("view-source scheme plus HTTP/HTTPS URL"), "view-source:" + goog.html.SafeUrl.unwrap(sanitizedFileName));
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return {"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return {"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return (err);
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (!goog.debug.FORCE_SLOPPY_STACKS) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (!goog.debug.FORCE_SLOPPY_STACKS) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.runtimeType = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1000);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in (goog.debug.Logger.Level.predefinedLevelsCache_)) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return !!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return (goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.log");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6, DIRECT:7};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport", 7:"DirectTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion", DIRECT_TRANSPORT_SYNC_MODE:"directSyncMode"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.log.getLogger("goog.net.xpc");
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.FreeList");
goog.async.FreeList = goog.defineClass(null, {constructor:function(create, reset, limit) {
  this.limit_ = limit;
  this.create_ = create;
  this.reset_ = reset;
  this.occupants_ = 0;
  this.head_ = null;
}, get:function() {
  var item;
  if (this.occupants_ > 0) {
    this.occupants_--;
    item = this.head_;
    this.head_ = item.next;
    item.next = null;
  } else {
    item = this.create_();
  }
  return item;
}, put:function(item) {
  this.reset_(item);
  if (this.occupants_ < this.limit_) {
    this.occupants_++;
    item.next = this.head_;
    this.head_ = item;
  }
}, occupants:function() {
  return this.occupants_;
}});
goog.provide("goog.async.WorkItem");
goog.provide("goog.async.WorkQueue");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.async.WorkQueue = function() {
  this.workHead_ = null;
  this.workTail_ = null;
};
goog.define("goog.async.WorkQueue.DEFAULT_MAX_UNUSED", 100);
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(function() {
  return new goog.async.WorkItem;
}, function(item) {
  item.reset();
}, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);
goog.async.WorkQueue.prototype.add = function(fn, scope) {
  var item = this.getUnusedItem_();
  item.set(fn, scope);
  if (this.workTail_) {
    this.workTail_.next = item;
    this.workTail_ = item;
  } else {
    goog.asserts.assert(!this.workHead_);
    this.workHead_ = item;
    this.workTail_ = item;
  }
};
goog.async.WorkQueue.prototype.remove = function() {
  var item = null;
  if (this.workHead_) {
    item = this.workHead_;
    this.workHead_ = this.workHead_.next;
    if (!this.workHead_) {
      this.workTail_ = null;
    }
    item.next = null;
  }
  return item;
};
goog.async.WorkQueue.prototype.returnUnused = function(item) {
  goog.async.WorkQueue.freelist_.put(item);
};
goog.async.WorkQueue.prototype.getUnusedItem_ = function() {
  return goog.async.WorkQueue.freelist_.get();
};
goog.async.WorkItem = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.async.WorkItem.prototype.set = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
  this.next = null;
};
goog.async.WorkItem.prototype.reset = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || goog.async.nextTick.useSetImmediate_())) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.useSetImmediate_ = function() {
  if (!goog.global.Window || !goog.global.Window.prototype) {
    return true;
  }
  if (goog.labs.userAgent.browser.isEdge() || goog.global.Window.prototype.setImmediate != goog.global.setImmediate) {
    return true;
  }
  return false;
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = (document.createElement(goog.dom.TagName.IFRAME));
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.async.run");
goog.require("goog.async.WorkQueue");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.add(callback, opt_context);
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve(undefined);
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function(opt_realSetTimeout) {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
    if (opt_realSetTimeout) {
      opt_realSetTimeout(goog.async.run.processWorkQueue);
    }
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = new goog.async.WorkQueue;
if (goog.DEBUG) {
  goog.async.run.resetQueue = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = new goog.async.WorkQueue;
  };
}
goog.async.run.processWorkQueue = function() {
  var item = null;
  while (item = goog.async.run.workQueue_.remove()) {
    try {
      item.fn.call(item.scope);
    } catch (e) {
      goog.async.throwException(e);
    }
    goog.async.run.workQueue_.returnUnused(item);
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.callbackEntriesTail_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  if (resolver != goog.nullFunction) {
    try {
      var self = this;
      resolver.call(opt_context, function(value) {
        self.resolve_(goog.Promise.State_.FULFILLED, value);
      }, function(reason) {
        if (goog.DEBUG && !(reason instanceof goog.Promise.CancellationError)) {
          try {
            if (reason instanceof Error) {
              throw reason;
            } else {
              throw new Error("Promise rejected.");
            }
          } catch (e) {
          }
        }
        self.resolve_(goog.Promise.State_.REJECTED, reason);
      });
    } catch (e) {
      this.resolve_(goog.Promise.State_.REJECTED, e);
    }
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_ = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.next = null;
  this.always = false;
};
goog.Promise.CallbackEntry_.prototype.reset = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.always = false;
};
goog.define("goog.Promise.DEFAULT_MAX_UNUSED", 100);
goog.Promise.freelist_ = new goog.async.FreeList(function() {
  return new goog.Promise.CallbackEntry_;
}, function(item) {
  item.reset();
}, goog.Promise.DEFAULT_MAX_UNUSED);
goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {
  var entry = goog.Promise.freelist_.get();
  entry.onFulfilled = onFulfilled;
  entry.onRejected = onRejected;
  entry.context = context;
  return entry;
};
goog.Promise.returnEntry_ = function(entry) {
  goog.Promise.freelist_.put(entry);
};
goog.Promise.resolve = function(opt_value) {
  if (opt_value instanceof goog.Promise) {
    return opt_value;
  }
  var promise = new goog.Promise(goog.nullFunction);
  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);
  return promise;
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.resolveThen_ = function(value, onFulfilled, onRejected) {
  var isThenable = goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);
  if (!isThenable) {
    goog.async.run(goog.partial(onFulfilled, value));
  }
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.allSettled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toSettle = promises.length;
    var results = [];
    if (!toSettle) {
      resolve(results);
      return;
    }
    var onSettled = function(index, fulfilled, result) {
      toSettle--;
      results[index] = fulfilled ? {fulfilled:true, value:result} : {fulfilled:false, reason:result};
      if (toSettle == 0) {
        resolve(results);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onSettled, i, true), goog.partial(onSettled, i, false));
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenVoid = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  this.addCallbackEntry_(goog.Promise.getCallbackEntry_(opt_onFulfilled || goog.nullFunction, opt_onRejected || null, opt_context));
};
goog.Promise.prototype.thenAlways = function(onSettled, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
  entry.always = true;
  this.addCallbackEntry_(entry);
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
      this.parent_ = null;
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childEntry = null;
  var beforeChildEntry = null;
  for (var entry = this.callbackEntries_;entry;entry = entry.next) {
    if (!entry.always) {
      childCount++;
      if (entry.child == childPromise) {
        childEntry = entry;
      }
      if (childEntry && childCount > 1) {
        break;
      }
    }
    if (!childEntry) {
      beforeChildEntry = entry;
    }
  }
  if (childEntry) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      if (beforeChildEntry) {
        this.removeEntryAfter_(beforeChildEntry);
      } else {
        this.popEntry_();
      }
      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if (!this.hasEntry_() && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  this.queueEntry_(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(callbackEntry);
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this === x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  }
  this.state_ = goog.Promise.State_.BLOCKED;
  var isThenable = goog.Promise.maybeThen_(x, this.unblockAndFulfill_, this.unblockAndReject_, this);
  if (isThenable) {
    return;
  }
  this.result_ = x;
  this.state_ = state;
  this.parent_ = null;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {
  if (value instanceof goog.Promise) {
    value.thenVoid(onFulfilled, onRejected, context);
    return true;
  } else {
    if (goog.Thenable.isImplementedBy(value)) {
      value = (value);
      value.then(onFulfilled, onRejected, context);
      return true;
    } else {
      if (goog.isObject(value)) {
        try {
          var then = value["then"];
          if (goog.isFunction(then)) {
            goog.Promise.tryThen_(value, then, onFulfilled, onRejected, context);
            return true;
          }
        } catch (e) {
          onRejected.call(context, e);
          return true;
        }
      }
    }
  }
  return false;
};
goog.Promise.tryThen_ = function(thenable, then, onFulfilled, onRejected, context) {
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      onFulfilled.call(context, value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      onRejected.call(context, reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.hasEntry_ = function() {
  return !!this.callbackEntries_;
};
goog.Promise.prototype.queueEntry_ = function(entry) {
  goog.asserts.assert(entry.onFulfilled != null);
  if (this.callbackEntriesTail_) {
    this.callbackEntriesTail_.next = entry;
    this.callbackEntriesTail_ = entry;
  } else {
    this.callbackEntries_ = entry;
    this.callbackEntriesTail_ = entry;
  }
};
goog.Promise.prototype.popEntry_ = function() {
  var entry = null;
  if (this.callbackEntries_) {
    entry = this.callbackEntries_;
    this.callbackEntries_ = entry.next;
    entry.next = null;
  }
  if (!this.callbackEntries_) {
    this.callbackEntriesTail_ = null;
  }
  if (entry != null) {
    goog.asserts.assert(entry.onFulfilled != null);
  }
  return entry;
};
goog.Promise.prototype.removeEntryAfter_ = function(previous) {
  goog.asserts.assert(this.callbackEntries_);
  goog.asserts.assert(previous != null);
  if (previous.next == this.callbackEntriesTail_) {
    this.callbackEntriesTail_ = previous;
  }
  previous.next = previous.next.next;
};
goog.Promise.prototype.executeCallbacks_ = function() {
  var entry = null;
  while (entry = this.popEntry_()) {
    if (goog.Promise.LONG_STACK_TRACES) {
      this.currentStep_++;
    }
    this.executeCallback_(entry, this.state_, this.result_);
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected && !callbackEntry.always) {
    this.removeUnhandledRejection_();
  }
  if (callbackEntry.child) {
    callbackEntry.child.parent_ = null;
    goog.Promise.invokeCallback_(callbackEntry, state, result);
  } else {
    try {
      callbackEntry.always ? callbackEntry.onFulfilled.call(callbackEntry.context) : goog.Promise.invokeCallback_(callbackEntry, state, result);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  }
  goog.Promise.returnEntry_(callbackEntry);
};
goog.Promise.invokeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled.call(callbackEntry.context, result);
  } else {
    if (callbackEntry.onRejected) {
      callbackEntry.onRejected.call(callbackEntry.context, result);
    }
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    callback.call(opt_scope);
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", WHEEL:"wheel", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", 
CHANGE:"change", RESET:"reset", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", 
LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", TIMEUPDATE:"timeupdate", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), 
ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", 
MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", 
MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXT:"text", TEXTINPUT:"textInput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", 
DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified", BEFOREPRINT:"beforeprint", AFTERPRINT:"afterprint"};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  if (!goog.isNull(relevantTouch)) {
    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX : relevantTouch.pageX;
    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY : relevantTouch.pageY;
    this.screenX = relevantTouch.screenX || 0;
    this.screenY = relevantTouch.screenY || 0;
  } else {
    this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
    this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
    this.screenX = e.screenX || 0;
    this.screenY = e.screenY || 0;
  }
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.forwardDeclare("goog.events.EventLike");
goog.forwardDeclare("goog.events.EventTarget");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1e6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1e6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    if (src.attachEvent) {
      src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    } else {
      throw Error("addEventListener and attachEvent are unavailable.");
    }
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = key;
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return (src).unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return (obj).removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return (obj).getListeners(type, capture);
  } else {
    if (!obj) {
      return [];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return (obj).fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = true;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && result !== false;
        }
      }
    }
  }
  return retval;
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1e9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return (listener).handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1000;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = (e.currentTarget = target);
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.Promise");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = (opt_timerObject || goog.Timer.defaultTimerObject);
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.INVALID_TIMEOUT_ID_ = -1;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (Number(opt_delay) > goog.Timer.MAX_TIMEOUT_) {
    return goog.Timer.INVALID_TIMEOUT_ID_;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.Timer.promise = function(delay, opt_result) {
  var timerKey = null;
  return (new goog.Promise(function(resolve, reject) {
    timerKey = goog.Timer.callOnce(function() {
      resolve(opt_result);
    }, delay);
    if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
      reject(new Error("Failed to schedule timer."));
    }
  })).thenCatch(function(error) {
    goog.Timer.clear(timerKey);
    throw error;
  });
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /(?:"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)[\s\u2028\u2029]*(?=:|,|]|}|$)/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return (eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return (eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return (new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  if (object == null) {
    sb.push("null");
    return;
  }
  if (typeof object == "object") {
    if (goog.isArray(object)) {
      this.serializeArray(object, sb);
      return;
    } else {
      if (object instanceof String || object instanceof Number || object instanceof Boolean) {
        object = object.valueOf();
      } else {
        this.serializeObject_((object), sb);
        return;
      }
    }
  }
  switch(typeof object) {
    case "string":
      this.serializeString_(object, sb);
      break;
    case "number":
      this.serializeNumber_(object, sb);
      break;
    case "boolean":
      sb.push(String(object));
      break;
    case "function":
      sb.push("null");
      break;
    default:
      throw Error("Unknown type: " + typeof object);
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("￿") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    var rv = goog.json.Serializer.charToJsonCharCache_[c];
    if (!rv) {
      rv = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1);
      goog.json.Serializer.charToJsonCharCache_[c] = rv;
    }
    return rv;
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? String(n) : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress", DOWNLOAD_PROGRESS:"downloadprogress", UPLOAD_PROGRESS:"uploadprogress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, PRECONDITION_REQUIRED:428, TOO_MANY_REQUESTS:429, REQUEST_HEADER_FIELDS_TOO_LARGE:431, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, NETWORK_AUTHENTICATION_REQUIRED:511, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    case goog.net.HttpStatus.CREATED:
    case goog.net.HttpStatus.ACCEPTED:
    case goog.net.HttpStatus.NO_CONTENT:
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    case goog.net.HttpStatus.NOT_MODIFIED:
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return (this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return (uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
  if (!uri) {
    return uri;
  }
  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && goog.global.self && goog.global.self.location) {
    var protocol = goog.global.self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri), true);
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri), true);
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.parseQueryData = function(encodedQuery, callback) {
  if (!encodedQuery) {
    return;
  }
  var pairs = encodedQuery.split("\x26");
  for (var i = 0;i < pairs.length;i++) {
    var indexOfEquals = pairs[i].indexOf("\x3d");
    var name = null;
    var value = null;
    if (indexOfEquals >= 0) {
      name = pairs[i].substring(0, indexOfEquals);
      value = pairs[i].substring(indexOfEquals + 1);
    } else {
      name = pairs[i];
    }
    callback(name, value ? goog.string.urlDecode(value) : "");
  }
};
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return -1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.progressEventsEnabled_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.setProgressEventsEnabled = function(enabled) {
  this.progressEventsEnabled_ = enabled;
};
goog.net.XhrIo.prototype.getProgressEventsEnabled = function() {
  return this.progressEventsEnabled_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  if (this.getProgressEventsEnabled() && "onprogress" in this.xhr_) {
    this.xhr_.onprogress = goog.bind(function(e) {
      this.onProgressHandler_(e, true);
    }, this);
    if (this.xhr_.upload) {
      this.xhr_.upload.onprogress = goog.bind(this.onProgressHandler_, this);
    }
  }
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if ("withCredentials" in this.xhr_ && this.xhr_.withCredentials !== this.withCredentials_) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.onProgressHandler_ = function(e, opt_isDownload) {
  goog.asserts.assert(e.type === goog.net.EventType.PROGRESS, "goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");
  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(e, goog.net.EventType.PROGRESS));
  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(e, opt_isDownload ? goog.net.EventType.DOWNLOAD_PROGRESS : goog.net.EventType.UPLOAD_PROGRESS));
};
goog.net.XhrIo.buildProgressEvent_ = function(e, eventType) {
  return ({type:eventType, lengthComputable:e.lengthComputable, loaded:e.loaded, total:e.total});
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return !!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return -1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  this.scheme_ = "";
  this.userInfo_ = "";
  this.domain_ = "";
  this.port_ = null;
  this.path_ = "";
  this.fragment_ = "";
  this.isReadOnly_ = false;
  this.ignoreCase_ = false;
  this.queryData_;
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ":");
  }
  var domain = this.getDomain();
  if (domain || scheme == "file") {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), "@");
    }
    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_, true));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return !!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return !!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return !!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return !!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, values);
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return (this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return !!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return (!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
  if (!val) {
    return "";
  }
  return opt_preserveReserved ? decodeURI(val.replace(/%25/g, "%2525")) : decodeURIComponent(val);
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra, opt_removeDoubleEncoding) {
  if (goog.isString(unescapedPart)) {
    var encoded = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
    if (opt_removeDoubleEncoding) {
      encoded = goog.Uri.removeDoubleEncoding_(encoded);
    }
    return encoded;
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.keyMap_ = null;
  this.count_ = null;
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var self = this;
      goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {
        self.add(goog.string.urlDecode(name), value);
      });
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_ = goog.asserts.assertNumber(this.count_) + 1;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ = goog.asserts.assertNumber(this.count_) - this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = this.keyMap_.getValues();
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = this.keyMap_.getValues();
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ = goog.asserts.assertNumber(this.count_) - this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_ = goog.asserts.assertNumber(this.count_) + 1;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ = goog.asserts.assertNumber(this.count_) + values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addFinally = function(f, opt_scope) {
  var self = this;
  return this.addCallbacks(f, function(err) {
    var result = f.call(self, err);
    if (!goog.isDef(result)) {
      throw err;
    }
    return result;
  }, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res) || typeof goog.global["Promise"] === "function" && res instanceof goog.global["Promise"]) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.async.Delay.base(this, "constructor");
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.base(this, "disposeInternal");
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.startIfNotActive = function(opt_interval) {
  if (!this.isActive()) {
    this.start(opt_interval);
  }
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, function(listenerObj, key) {
    if (this.keys_.hasOwnProperty(key)) {
      goog.events.unlistenByKey(listenerObj);
    }
  }, this);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.messaging.AbstractChannel.base(this, "constructor");
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.log.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return {callback:callback, objectPayload:objectPayload};
    }
  }
  goog.log.warning(this.logger, 'Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      goog.log.warning(this.logger, "Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.messaging.AbstractChannel.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc.TransportNames");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[String(this.transportType)] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.DirectTransport");
goog.require("goog.Timer");
goog.require("goog.async.Deferred");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.object");
goog.scope(function() {
  var CfgFields = goog.net.xpc.CfgFields;
  var CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;
  var Deferred = goog.async.Deferred;
  var EventHandler = goog.events.EventHandler;
  var Timer = goog.Timer;
  var Transport = goog.net.xpc.Transport;
  goog.net.xpc.DirectTransport = function(channel, opt_domHelper) {
    goog.net.xpc.DirectTransport.base(this, "constructor", opt_domHelper);
    this.channel_ = channel;
    this.eventHandler_ = new EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.maybeAttemptToConnectTimer_ = new Timer(DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());
    this.registerDisposable(this.maybeAttemptToConnectTimer_);
    this.setupAckReceived_ = new Deferred;
    this.setupAckSent_ = new Deferred;
    this.connected_ = new Deferred;
    this.endpointId_ = goog.net.xpc.getRandomString(10);
    this.peerEndpointId_ = null;
    this.asyncSendsMap_ = {};
    this.originalChannelName_ = this.channel_.name;
    this.channel_.updateChannelNameAndCatalog(DirectTransport.getRoledChannelName_(this.channel_.name, this.channel_.getRole()));
    this.initialized_ = false;
    this.connected_.awaitDeferred(this.setupAckReceived_);
    this.connected_.awaitDeferred(this.setupAckSent_);
    this.connected_.addCallback(this.notifyConnected_, this);
    this.connected_.callback(true);
    this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, Timer.TICK, this.maybeAttemptToConnect_);
    goog.log.info(goog.net.xpc.logger, "DirectTransport created. role\x3d" + this.channel_.getRole());
  };
  goog.inherits(goog.net.xpc.DirectTransport, Transport);
  var DirectTransport = goog.net.xpc.DirectTransport;
  DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;
  DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;
  DirectTransport.isSupported = function(peerWindow) {
    try {
      return window.document.domain == peerWindow.document.domain;
    } catch (e) {
      return false;
    }
  };
  DirectTransport.activeCount_ = {};
  DirectTransport.GLOBAL_TRANPORT_PATH_ = "crosswindowmessaging.channel";
  DirectTransport.MESSAGE_DELIMITER_ = ",";
  DirectTransport.initialize_ = function(listenWindow) {
    var uid = goog.getUid(listenWindow);
    var value = DirectTransport.activeCount_[uid] || 0;
    if (value == 0) {
      var globalProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);
      if (globalProxy == null) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, DirectTransport.messageReceivedHandler_, listenWindow);
      }
    }
    DirectTransport.activeCount_[uid]++;
  };
  DirectTransport.getRoledChannelName_ = function(channelName, role) {
    return channelName + "_" + role;
  };
  DirectTransport.messageReceivedHandler_ = function(literal) {
    var msg = DirectTransport.Message_.fromLiteral(literal);
    var channelName = msg.channelName;
    var service = msg.service;
    var payload = msg.payload;
    goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
    var channel = goog.net.xpc.channels[channelName];
    if (channel) {
      channel.xpcDeliver(service, payload);
      return true;
    }
    var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];
    for (var staleChannelName in goog.net.xpc.channels) {
      var staleChannel = goog.net.xpc.channels[staleChannelName];
      if (staleChannel.getRole() == CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && transportMessageType == goog.net.xpc.SETUP) {
        staleChannel.updateChannelNameAndCatalog(channelName);
        staleChannel.xpcDeliver(service, payload);
        return true;
      }
    }
    goog.log.info(goog.net.xpc.logger, "channel name mismatch; message ignored.");
    return false;
  };
  DirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;
  DirectTransport.prototype.transportServiceHandler = function(payload) {
    var transportParts = DirectTransport.parseTransportPayload_(payload);
    var transportMessageType = transportParts[0];
    var peerEndpointId = transportParts[1];
    switch(transportMessageType) {
      case goog.net.xpc.SETUP_ACK_:
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
        break;
      case goog.net.xpc.SETUP:
        this.sendSetupAckMessage_();
        if (this.peerEndpointId_ != null && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
        break;
    }
  };
  DirectTransport.prototype.sendSetupMessage_ = function() {
    var payload = goog.net.xpc.SETUP;
    payload += DirectTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  };
  DirectTransport.prototype.sendSetupAckMessage_ = function() {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    if (!this.setupAckSent_.hasFired()) {
      this.setupAckSent_.callback(true);
    }
  };
  DirectTransport.prototype.connect = function() {
    var win = this.getWindow();
    if (win) {
      DirectTransport.initialize_(win);
      this.initialized_ = true;
      this.maybeAttemptToConnect_();
    } else {
      goog.log.fine(goog.net.xpc.logger, "connect(): no window to initialize.");
    }
  };
  DirectTransport.prototype.maybeAttemptToConnect_ = function() {
    var outerRole = this.channel_.getRole() == CrossPageChannelRole.OUTER;
    if (this.channel_.isConnected()) {
      this.maybeAttemptToConnectTimer_.stop();
      return;
    }
    this.maybeAttemptToConnectTimer_.start();
    this.sendSetupMessage_();
  };
  DirectTransport.prototype.send = function(service, payload) {
    if (!this.channel_.getPeerWindowObject()) {
      goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
      return;
    }
    var channelName = DirectTransport.getRoledChannelName_(this.originalChannelName_, this.getPeerRole_());
    var message = new DirectTransport.Message_(channelName, service, payload);
    if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {
      this.executeScheduledSend_(message);
    } else {
      this.asyncSendsMap_[goog.getUid(message)] = Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);
    }
  };
  DirectTransport.prototype.executeScheduledSend_ = function(message) {
    var messageId = goog.getUid(message);
    if (this.asyncSendsMap_[messageId]) {
      delete this.asyncSendsMap_[messageId];
    }
    try {
      var peerProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, this.channel_.getPeerWindowObject());
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Can't access other window, ignoring.", error);
      return;
    }
    if (goog.isNull(peerProxy)) {
      goog.log.warning(goog.net.xpc.logger, "Peer window had no global function.");
      return;
    }
    try {
      peerProxy(message.toLiteral());
      goog.log.info(goog.net.xpc.logger, "send(): channelName\x3d" + message.channelName + " service\x3d" + message.service + " payload\x3d" + message.payload);
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Error performing call, ignoring.", error);
    }
  };
  DirectTransport.prototype.getPeerRole_ = function() {
    var role = this.channel_.getRole();
    return role == goog.net.xpc.CrossPageChannelRole.OUTER ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  };
  DirectTransport.prototype.notifyConnected_ = function() {
    this.channel_.notifyConnected(this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ? DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ : 0);
  };
  DirectTransport.prototype.disposeInternal = function() {
    if (this.initialized_) {
      var listenWindow = this.getWindow();
      var uid = goog.getUid(listenWindow);
      var value = --DirectTransport.activeCount_[uid];
      if (value == 1) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);
      }
    }
    if (this.asyncSendsMap_) {
      goog.object.forEach(this.asyncSendsMap_, function(timerId) {
        Timer.clear(timerId);
      });
      this.asyncSendsMap_ = null;
    }
    if (this.setupAckReceived_) {
      this.setupAckReceived_.cancel();
      delete this.setupAckReceived_;
    }
    if (this.setupAckSent_) {
      this.setupAckSent_.cancel();
      delete this.setupAckSent_;
    }
    if (this.connected_) {
      this.connected_.cancel();
      delete this.connected_;
    }
    DirectTransport.base(this, "disposeInternal");
  };
  DirectTransport.parseTransportPayload_ = function(payload) {
    var transportParts = (payload.split(DirectTransport.MESSAGE_DELIMITER_));
    transportParts[1] = transportParts[1] || null;
    return transportParts;
  };
  DirectTransport.Message_ = function(channelName, service, payload) {
    this.channelName = channelName;
    this.service = service;
    this.payload = payload;
  };
  DirectTransport.Message_.prototype.toLiteral = function() {
    return {"channelName":this.channelName, "service":this.service, "payload":this.payload};
  };
  DirectTransport.Message_.fromLiteral = function(literal) {
    return new DirectTransport.Message_(literal["channelName"], literal["service"], literal["payload"]);
  };
});
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.net.xpc.FrameElementMethodTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetupCb_;
goog.net.xpc.FrameElementMethodTransport.prototype.outgoing_;
goog.net.xpc.FrameElementMethodTransport.prototype.iframeElm_;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframePollingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.prototype.ackReceiver_;
goog.net.xpc.IframePollingTransport.prototype.ackSender_;
goog.net.xpc.IframePollingTransport.prototype.ackIframeElm_;
goog.net.xpc.IframePollingTransport.prototype.ackWinObj_;
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresentCb_;
goog.net.xpc.IframePollingTransport.prototype.deliveryQueue_;
goog.net.xpc.IframePollingTransport.prototype.msgIframeElm_;
goog.net.xpc.IframePollingTransport.prototype.msgReceiver_;
goog.net.xpc.IframePollingTransport.prototype.msgSender_;
goog.net.xpc.IframePollingTransport.prototype.msgWinObj_;
goog.net.xpc.IframePollingTransport.prototype.rcvdConnectionSetupAck_;
goog.net.xpc.IframePollingTransport.prototype.sentConnectionSetupAck_;
goog.net.xpc.IframePollingTransport.prototype.parts_;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return !this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.log.fine(goog.net.xpc.logger, "error retrieving peer frames");
  }
  return {};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.log.fine(goog.net.xpc.logger, "transport connect called");
  if (!this.initialized_) {
    goog.log.fine(goog.net.xpc.logger, "initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "constructing sender frame: " + id);
  var ifr = goog.dom.createElement(goog.dom.TagName.IFRAME);
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "Inner peer reconnect triggered.");
  this.channel_.updateChannelNameAndCatalog(goog.net.xpc.getRandomString(10));
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.log.fine(goog.net.xpc.logger, "foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.log.fine(goog.net.xpc.logger, "local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.log.fine(goog.net.xpc.logger, "local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.waitForAck_ = true;
      goog.log.fine(goog.net.xpc.logger, "SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.log.fine(goog.net.xpc.logger, "delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.log.warning(goog.net.xpc.logger, "got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.log.warning(goog.net.xpc.logger, "got ack with wrong sequence");
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframePollingTransport.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1000;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.log.info(goog.net.xpc.logger, "receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.log.fine(goog.net.xpc.logger, "starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  if (!/^https?:\/\//.test(url)) {
    throw Error("URL " + url + " is invalid");
  }
  this.sanitizedSendUri_ = url;
  this.sendFrame_ = (windowObj);
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sanitizedSendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.events");
goog.require("goog.html.SafeHtml");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframeRelayTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1000;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3000;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header;
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement(goog.dom.TagName.DIV);
    goog.dom.safe.setInnerHtml(div, goog.html.SafeHtml.createIframe(null, null, {"onload":goog.string.Const.from("this.xpcOnload()"), "sandbox":null}));
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement(goog.dom.TagName.IFRAME);
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframeRelayTransport.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.net.xpc.NativeMessagingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.log.info(goog.net.xpc.logger, "NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.prototype.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, (msgEvt.getBrowserEvent()).origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)) {
      staleChannel.updateChannelNameAndCatalog(channelName);
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) && protocolVersion == 2) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || this.channel_.isConnected() || this.isDisposed()) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.log.warning(goog.net.xpc.logger, "Peer window had no postMessage function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.log.fine(goog.net.xpc.logger, "send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.log.warning(goog.net.xpc.logger, "Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.net.xpc.NativeMessagingTransport.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.net.xpc.NixTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.log.error(goog.net.xpc.logger, "Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.log.error(goog.net.xpc.logger, "NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.net.xpc.NixTransport.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.ChannelStates");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.DirectTransport");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.net.xpc.UriCfgFields");
goog.require("goog.string");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.net.xpc.CrossPageChannel.base(this, "constructor");
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  if (!goog.events.getListener(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_)) {
    goog.events.listenOnce(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_);
  }
  goog.log.info(goog.net.xpc.logger, "CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return !!this.peerWindowObject_ && !this.peerWindowObject_.closed;
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  var CfgFields = goog.net.xpc.CfgFields;
  if (!this.cfg_[CfgFields.TRANSPORT]) {
    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.DIRECT:
      if (this.peerWindowObject_ && goog.net.xpc.DirectTransport.isSupported((this.peerWindowObject_))) {
        this.transport_ = new goog.net.xpc.DirectTransport(this, this.domHelper_);
      } else {
        goog.log.info(goog.net.xpc.logger, "DirectTransport not supported for this window, peer window in" + " different security context or not set yet.");
      }
      break;
  }
  if (this.transport_) {
    goog.log.info(goog.net.xpc.logger, "Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.log.info(goog.net.xpc.logger, "createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement(goog.dom.TagName.IFRAME);
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnceWithScope(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
  }
  return (iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.state_ == goog.net.xpc.ChannelStates.CLOSED) {
    this.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
  }
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.log.info(goog.net.xpc.logger, "continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = (this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]));
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (goog.isDef(opt_delay)) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.log.info(goog.net.xpc.logger, "Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.log.error(goog.net.xpc.logger, "Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.log.error(goog.net.xpc.logger, "Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.log.warning(goog.net.xpc.logger, 'Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed() || this.state_ == goog.net.xpc.ChannelStates.CLOSED) {
    goog.log.warning(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Channel closed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.log.info(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (goog.isNumber(role)) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(name) {
  goog.log.fine(goog.net.xpc.logger, "changing channel name to " + name);
  delete goog.net.xpc.channels[this.name];
  this.name = name;
  goog.net.xpc.channels[name] = this;
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(opt_origin)) || goog.string.isEmptyOrWhitespace(goog.string.makeSafe(peerHostname)) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.net.xpc.CrossPageChannel.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.log");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.net.WebSocket.base(this, "constructor");
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.reconnectTimer_ = null;
goog.net.WebSocket.prototype.logger_ = goog.log.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1000;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1000;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if (this.protocol_) {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_);
  } else {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_);
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this);
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if (this.webSocket_) {
    goog.log.info(this.logger_, "Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null;
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message);
};
goog.net.WebSocket.prototype.isOpen = function() {
  return !!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;
};
goog.net.WebSocket.prototype.getBufferedAmount = function() {
  return this.webSocket_.bufferedAmount;
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  goog.log.info(this.logger_, "WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  goog.log.info(this.logger_, "The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if (this.closeExpected_) {
    goog.log.info(this.logger_, "The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined;
  } else {
    goog.log.error(this.logger_, "The WebSocket disconnected unexpectedly: " + event.data);
    if (this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1000);
      goog.log.info(this.logger_, "Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
    }
  }
  this.closeExpected_ = false;
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = event.data;
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  goog.log.error(this.logger_, "An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if (goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_);
  }
  this.reconnectTimer_ = null;
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.net.WebSocket.base(this, "disposeInternal");
  this.close();
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.net.WebSocket.MessageEvent.base(this, "constructor", goog.net.WebSocket.EventType.MESSAGE);
  this.message = message;
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.net.WebSocket.ErrorEvent.base(this, "constructor", goog.net.WebSocket.EventType.ERROR);
  this.data = data;
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_);
});
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
clojure.browser.event.IEventType = function() {
};
clojure.browser.event.event_types = function clojure$browser$event$event_types(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$event$IEventType$event_types$arity$1 == null)) {
    return this$.clojure$browser$event$IEventType$event_types$arity$1(this$);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.event.event_types[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$);
    } else {
      var m__7929__auto____$1 = clojure.browser.event.event_types["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IEventType.event-types", this$);
      }
    }
  }
};
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$ = cljs.core.PROTOCOL_SENTINEL;
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__9620) {
      var vec__9621 = p__9620;
      var k = cljs.core.nth.call(null, vec__9621, 0, null);
      var v = cljs.core.nth.call(null, vec__9621, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
if (typeof Element !== "undefined") {
  Element.prototype.clojure$browser$event$IEventType$ = cljs.core.PROTOCOL_SENTINEL;
  Element.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
    var this$__$1 = this;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
      return function(p__9624) {
        var vec__9625 = p__9624;
        var k = cljs.core.nth.call(null, vec__9625, 0, null);
        var v = cljs.core.nth.call(null, vec__9625, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
      };
    }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
  };
} else {
}
clojure.browser.event.listen = function clojure$browser$event$listen(var_args) {
  var args9628 = [];
  var len__8373__auto___9631 = arguments.length;
  var i__8374__auto___9632 = 0;
  while (true) {
    if (i__8374__auto___9632 < len__8373__auto___9631) {
      args9628.push(arguments[i__8374__auto___9632]);
      var G__9633 = i__8374__auto___9632 + 1;
      i__8374__auto___9632 = G__9633;
      continue;
    } else {
    }
    break;
  }
  var G__9630 = args9628.length;
  switch(G__9630) {
    case 3:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9628.length)].join(""));
  }
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen.call(null, src, type, fn, false);
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen.cljs$lang$maxFixedArity = 4;
clojure.browser.event.listen_once = function clojure$browser$event$listen_once(var_args) {
  var args9635 = [];
  var len__8373__auto___9638 = arguments.length;
  var i__8374__auto___9639 = 0;
  while (true) {
    if (i__8374__auto___9639 < len__8373__auto___9638) {
      args9635.push(arguments[i__8374__auto___9639]);
      var G__9640 = i__8374__auto___9639 + 1;
      i__8374__auto___9639 = G__9640;
      continue;
    } else {
    }
    break;
  }
  var G__9637 = args9635.length;
  switch(G__9637) {
    case 3:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9635.length)].join(""));
  }
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen_once.call(null, src, type, fn, false);
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen_once.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten = function clojure$browser$event$unlisten(var_args) {
  var args9642 = [];
  var len__8373__auto___9645 = arguments.length;
  var i__8374__auto___9646 = 0;
  while (true) {
    if (i__8374__auto___9646 < len__8373__auto___9645) {
      args9642.push(arguments[i__8374__auto___9646]);
      var G__9647 = i__8374__auto___9646 + 1;
      i__8374__auto___9646 = G__9647;
      continue;
    } else {
    }
    break;
  }
  var G__9644 = args9642.length;
  switch(G__9644) {
    case 3:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9642.length)].join(""));
  }
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.unlisten.call(null, src, type, fn, false);
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.unlisten.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten_by_key = function clojure$browser$event$unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function clojure$browser$event$dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function clojure$browser$event$expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function clojure$browser$event$fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function clojure$browser$event$total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function clojure$browser$event$get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function clojure$browser$event$all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function clojure$browser$event$unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function clojure$browser$event$has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function clojure$browser$event$remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("clojure.browser.event");
goog.require("goog.json");
goog.require("goog.net.XhrIo");
goog.require("goog.net.EventType");
goog.require("goog.net.WebSocket");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
clojure.browser.net._STAR_timeout_STAR_ = 10000;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__9651) {
  var vec__9652 = p__9651;
  var k = cljs.core.nth.call(null, vec__9652, 0, null);
  var v = cljs.core.nth.call(null, vec__9652, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
};
clojure.browser.net.connect = function clojure$browser$net$connect(var_args) {
  var args9655 = [];
  var len__8373__auto___9661 = arguments.length;
  var i__8374__auto___9662 = 0;
  while (true) {
    if (i__8374__auto___9662 < len__8373__auto___9661) {
      args9655.push(arguments[i__8374__auto___9662]);
      var G__9663 = i__8374__auto___9662 + 1;
      i__8374__auto___9662 = G__9663;
      continue;
    } else {
    }
    break;
  }
  var G__9657 = args9655.length;
  switch(G__9657) {
    case 1:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9655.length)].join(""));
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$1 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.connect[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2 = function(this$, opt1) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$2 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.connect[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, opt1);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, opt1);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3 = function(this$, opt1, opt2) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$3 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.connect[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, opt1, opt2);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, opt1, opt2);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4 = function(this$, opt1, opt2, opt3) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$4 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.connect[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, opt1, opt2, opt3);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, opt1, opt2, opt3);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$lang$maxFixedArity = 4;
clojure.browser.net.transmit = function clojure$browser$net$transmit(var_args) {
  var args9658 = [];
  var len__8373__auto___9665 = arguments.length;
  var i__8374__auto___9666 = 0;
  while (true) {
    if (i__8374__auto___9666 < len__8373__auto___9665) {
      args9658.push(arguments[i__8374__auto___9666]);
      var G__9667 = i__8374__auto___9666 + 1;
      i__8374__auto___9666 = G__9667;
      continue;
    } else {
    }
    break;
  }
  var G__9660 = args9658.length;
  switch(G__9660) {
    case 2:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9658.length)].join(""));
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2 = function(this$, opt) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$2 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.transmit[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, opt);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, opt);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3 = function(this$, opt, opt2) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$3 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.transmit[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, opt, opt2);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, opt, opt2);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4 = function(this$, opt, opt2, opt3) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$4 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.transmit[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, opt, opt2, opt3);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, opt, opt2, opt3);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5 = function(this$, opt, opt2, opt3, opt4) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$5 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.transmit[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, opt, opt2, opt3, opt4);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, opt, opt2, opt3, opt4);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6 = function(this$, opt, opt2, opt3, opt4, opt5) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$6 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.transmit[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, opt, opt2, opt3, opt4, opt5);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$lang$maxFixedArity = 6;
clojure.browser.net.close = function clojure$browser$net$close(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$close$arity$1 == null)) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.close[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.close["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
      }
    }
  }
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = cljs.core.PROTOCOL_SENTINEL;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$ = cljs.core.PROTOCOL_SENTINEL;
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__9669) {
      var vec__9670 = p__9669;
      var k = cljs.core.nth.call(null, vec__9670, 0, null);
      var v = cljs.core.nth.call(null, vec__9670, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__9673) {
  var vec__9674 = p__9673;
  var k = cljs.core.nth.call(null, vec__9674, 0, null);
  var v = cljs.core.nth.call(null, vec__9674, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function clojure$browser$net$xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
};
clojure.browser.net.register_service = function clojure$browser$net$register_service(var_args) {
  var args9677 = [];
  var len__8373__auto___9680 = arguments.length;
  var i__8374__auto___9681 = 0;
  while (true) {
    if (i__8374__auto___9681 < len__8373__auto___9680) {
      args9677.push(arguments[i__8374__auto___9681]);
      var G__9682 = i__8374__auto___9681 + 1;
      i__8374__auto___9681 = G__9682;
      continue;
    } else {
    }
    break;
  }
  var G__9679 = args9677.length;
  switch(G__9679) {
    case 3:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9677.length)].join(""));
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3 = function(this$, service_name, fn) {
  if (!(this$ == null) && !(this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3 == null)) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.register_service[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, service_name, fn);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.register_service["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, service_name, fn);
      } else {
        throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
      }
    }
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  if (!(this$ == null) && !(this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4 == null)) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.register_service[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$, service_name, fn, encode_json_QMARK_);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.register_service["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$, service_name, fn, encode_json_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
      }
    }
  }
};
clojure.browser.net.register_service.cljs$lang$maxFixedArity = 4;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = cljs.core.PROTOCOL_SENTINEL;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = cljs.core.PROTOCOL_SENTINEL;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close();
};
clojure.browser.net.xpc_connection = function clojure$browser$net$xpc_connection(var_args) {
  var args9684 = [];
  var len__8373__auto___9694 = arguments.length;
  var i__8374__auto___9695 = 0;
  while (true) {
    if (i__8374__auto___9695 < len__8373__auto___9694) {
      args9684.push(arguments[i__8374__auto___9695]);
      var G__9696 = i__8374__auto___9695 + 1;
      i__8374__auto___9695 = G__9696;
      continue;
    } else {
    }
    break;
  }
  var G__9686 = args9684.length;
  switch(G__9686) {
    case 0:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9684.length)].join(""));
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  var temp__4657__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
  if (cljs.core.truth_(temp__4657__auto__)) {
    var config = temp__4657__auto__;
    return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
  } else {
    return null;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1 = function(config) {
  return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__9687) {
    var vec__9688 = p__9687;
    var k = cljs.core.nth.call(null, vec__9688, 0, null);
    var v = cljs.core.nth.call(null, vec__9688, 1, null);
    var temp__4655__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var field = temp__4655__auto__;
      var G__9691 = sum;
      G__9691[field] = v;
      return G__9691;
    } else {
      return sum;
    }
  }, {}, config));
};
clojure.browser.net.xpc_connection.cljs$lang$maxFixedArity = 1;
clojure.browser.net.IWebSocket = function() {
};
clojure.browser.net.open_QMARK_ = function clojure$browser$net$open_QMARK_(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 == null)) {
    return this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1(this$);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = clojure.browser.net.open_QMARK_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$);
    } else {
      var m__7929__auto____$1 = clojure.browser.net.open_QMARK_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IWebSocket.open?", this$);
      }
    }
  }
};
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$ = cljs.core.PROTOCOL_SENTINEL;
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.isOpen(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$ = cljs.core.PROTOCOL_SENTINEL;
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, url) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, url, null);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, url, protocol) {
  var this$__$1 = this;
  return this$__$1.open(url, protocol);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, message) {
  var this$__$1 = this;
  return this$__$1.send(message);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$ = cljs.core.PROTOCOL_SENTINEL;
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__9698) {
      var vec__9699 = p__9698;
      var k = cljs.core.nth.call(null, vec__9699, 0, null);
      var v = cljs.core.nth.call(null, vec__9699, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.WebSocket.EventType))));
};
clojure.browser.net.websocket_connection = function clojure$browser$net$websocket_connection(var_args) {
  var args9702 = [];
  var len__8373__auto___9705 = arguments.length;
  var i__8374__auto___9706 = 0;
  while (true) {
    if (i__8374__auto___9706 < len__8373__auto___9705) {
      args9702.push(arguments[i__8374__auto___9706]);
      var G__9707 = i__8374__auto___9706 + 1;
      i__8374__auto___9706 = G__9707;
      continue;
    } else {
    }
    break;
  }
  var G__9704 = args9702.length;
  switch(G__9704) {
    case 0:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9702.length)].join(""));
  }
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  return clojure.browser.net.websocket_connection.call(null, null, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1 = function(auto_reconnect_QMARK_) {
  return clojure.browser.net.websocket_connection.call(null, auto_reconnect_QMARK_, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2 = function(auto_reconnect_QMARK_, next_reconnect_fn) {
  return new goog.net.WebSocket(auto_reconnect_QMARK_, next_reconnect_fn);
};
clojure.browser.net.websocket_connection.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.spec.impl.gen");
goog.require("cljs.core");
goog.require("cljs.core");
cljs.spec.impl.gen.LazyVar = function(f, cached) {
  this.f = f;
  this.cached = cached;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.spec.impl.gen.LazyVar.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (!(self__.cached == null)) {
    return self__.cached;
  } else {
    var x = self__.f.call(null);
    if (x == null) {
    } else {
      self__.cached = x;
    }
    return x;
  }
};
cljs.spec.impl.gen.LazyVar.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cached", "cached", -1216707864, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.spec.impl.gen.LazyVar.cljs$lang$type = true;
cljs.spec.impl.gen.LazyVar.cljs$lang$ctorStr = "cljs.spec.impl.gen/LazyVar";
cljs.spec.impl.gen.LazyVar.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec.impl.gen/LazyVar");
};
cljs.spec.impl.gen.__GT_LazyVar = function cljs$spec$impl$gen$__GT_LazyVar(f, cached) {
  return new cljs.spec.impl.gen.LazyVar(f, cached);
};
cljs.spec.impl.gen.quick_check_ref = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check.quick_check !== "undefined") {
    return clojure.test.check.quick_check;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check", "quick-check", "clojure.test.check/quick-check", -810344251, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check", "quick-check", "clojure.test.check/quick-check", -810344251, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.quick_check = function cljs$spec$impl$gen$quick_check(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9762 = arguments.length;
  var i__8374__auto___9763 = 0;
  while (true) {
    if (i__8374__auto___9763 < len__8373__auto___9762) {
      args__8380__auto__.push(arguments[i__8374__auto___9763]);
      var G__9764 = i__8374__auto___9763 + 1;
      i__8374__auto___9763 = G__9764;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.spec.impl.gen.quick_check.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.spec.impl.gen.quick_check.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return cljs.core.apply.call(null, cljs.core.deref.call(null, cljs.spec.impl.gen.quick_check_ref), args);
};
cljs.spec.impl.gen.quick_check.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.quick_check.cljs$lang$applyTo = function(seq9761) {
  return cljs.spec.impl.gen.quick_check.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9761));
};
cljs.spec.impl.gen.for_all_STAR__ref = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.properties.for_all_STAR_ !== "undefined") {
    return clojure.test.check.properties.for_all_STAR_;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.properties", "for-all*", "clojure.test.check.properties/for-all*", 67088845, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.properties", "for-all*", "clojure.test.check.properties/for-all*", 67088845, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.for_all_STAR_ = function cljs$spec$impl$gen$for_all_STAR_(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9766 = arguments.length;
  var i__8374__auto___9767 = 0;
  while (true) {
    if (i__8374__auto___9767 < len__8373__auto___9766) {
      args__8380__auto__.push(arguments[i__8374__auto___9767]);
      var G__9768 = i__8374__auto___9767 + 1;
      i__8374__auto___9767 = G__9768;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.spec.impl.gen.for_all_STAR_.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.spec.impl.gen.for_all_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return cljs.core.apply.call(null, cljs.core.deref.call(null, cljs.spec.impl.gen.for_all_STAR__ref), args);
};
cljs.spec.impl.gen.for_all_STAR_.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.for_all_STAR_.cljs$lang$applyTo = function(seq9765) {
  return cljs.spec.impl.gen.for_all_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9765));
};
var g_QMARK__9769 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.generator_QMARK_ !== "undefined") {
    return clojure.test.check.generators.generator_QMARK_;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "generator?", "clojure.test.check.generators/generator?", -1378210460, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "generator?", "clojure.test.check.generators/generator?", 
    -1378210460, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
var g_9770 = new cljs.spec.impl.gen.LazyVar(function(g_QMARK__9769) {
  return function() {
    if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.generate !== "undefined") {
      return clojure.test.check.generators.generate;
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "generate", "clojure.test.check.generators/generate", -690390711, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "generate", "clojure.test.check.generators/generate", -690390711, 
      null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
    }
  };
}(g_QMARK__9769), null);
var mkg_9771 = new cljs.spec.impl.gen.LazyVar(function(g_QMARK__9769, g_9770) {
  return function() {
    if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.__GT_Generator !== "undefined") {
      return clojure.test.check.generators.__GT_Generator;
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "-\x3eGenerator", "clojure.test.check.generators/-\x3eGenerator", -1179475051, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "-\x3eGenerator", "clojure.test.check.generators/-\x3eGenerator", 
      -1179475051, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
    }
  };
}(g_QMARK__9769, g_9770), null);
cljs.spec.impl.gen.generator_QMARK_ = function(g_QMARK__9769, g_9770, mkg_9771) {
  return function cljs$spec$impl$gen$generator_QMARK_(x) {
    return cljs.core.deref.call(null, g_QMARK__9769).call(null, x);
  };
}(g_QMARK__9769, g_9770, mkg_9771);
cljs.spec.impl.gen.generator = function(g_QMARK__9769, g_9770, mkg_9771) {
  return function cljs$spec$impl$gen$generator(gfn) {
    return cljs.core.deref.call(null, mkg_9771).call(null, gfn);
  };
}(g_QMARK__9769, g_9770, mkg_9771);
cljs.spec.impl.gen.generate = function(g_QMARK__9769, g_9770, mkg_9771) {
  return function cljs$spec$impl$gen$generate(generator) {
    return cljs.core.deref.call(null, g_9770).call(null, generator);
  };
}(g_QMARK__9769, g_9770, mkg_9771);
cljs.spec.impl.gen.delay_impl = function cljs$spec$impl$gen$delay_impl(gfnd) {
  return cljs.spec.impl.gen.generator.call(null, function(rnd, size) {
    return (new cljs.core.Keyword(null, "gen", "gen", 142575302)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, gfnd)).call(null, rnd, size);
  });
};
var g__9733__auto___9791 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.hash_map !== "undefined") {
    return clojure.test.check.generators.hash_map;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "hash-map", "clojure.test.check.generators/hash-map", 1961346626, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "hash-map", "clojure.test.check.generators/hash-map", 1961346626, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.hash_map = function(g__9733__auto___9791) {
  return function cljs$spec$impl$gen$hash_map(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9792 = arguments.length;
    var i__8374__auto___9793 = 0;
    while (true) {
      if (i__8374__auto___9793 < len__8373__auto___9792) {
        args__8380__auto__.push(arguments[i__8374__auto___9793]);
        var G__9794 = i__8374__auto___9793 + 1;
        i__8374__auto___9793 = G__9794;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9791);
cljs.spec.impl.gen.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9791) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9791), args);
  };
}(g__9733__auto___9791);
cljs.spec.impl.gen.hash_map.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.hash_map.cljs$lang$applyTo = function(g__9733__auto___9791) {
  return function(seq9772) {
    return cljs.spec.impl.gen.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9772));
  };
}(g__9733__auto___9791);
var g__9733__auto___9795 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.list !== "undefined") {
    return clojure.test.check.generators.list;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "list", "clojure.test.check.generators/list", 506971058, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "list", "clojure.test.check.generators/list", 506971058, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.list = function(g__9733__auto___9795) {
  return function cljs$spec$impl$gen$list(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9796 = arguments.length;
    var i__8374__auto___9797 = 0;
    while (true) {
      if (i__8374__auto___9797 < len__8373__auto___9796) {
        args__8380__auto__.push(arguments[i__8374__auto___9797]);
        var G__9798 = i__8374__auto___9797 + 1;
        i__8374__auto___9797 = G__9798;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.list.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9795);
cljs.spec.impl.gen.list.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9795) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9795), args);
  };
}(g__9733__auto___9795);
cljs.spec.impl.gen.list.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.list.cljs$lang$applyTo = function(g__9733__auto___9795) {
  return function(seq9773) {
    return cljs.spec.impl.gen.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9773));
  };
}(g__9733__auto___9795);
var g__9733__auto___9799 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.map !== "undefined") {
    return clojure.test.check.generators.map;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "map", "clojure.test.check.generators/map", 45738796, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "map", "clojure.test.check.generators/map", 45738796, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.map = function(g__9733__auto___9799) {
  return function cljs$spec$impl$gen$map(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9800 = arguments.length;
    var i__8374__auto___9801 = 0;
    while (true) {
      if (i__8374__auto___9801 < len__8373__auto___9800) {
        args__8380__auto__.push(arguments[i__8374__auto___9801]);
        var G__9802 = i__8374__auto___9801 + 1;
        i__8374__auto___9801 = G__9802;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.map.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9799);
cljs.spec.impl.gen.map.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9799) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9799), args);
  };
}(g__9733__auto___9799);
cljs.spec.impl.gen.map.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.map.cljs$lang$applyTo = function(g__9733__auto___9799) {
  return function(seq9774) {
    return cljs.spec.impl.gen.map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9774));
  };
}(g__9733__auto___9799);
var g__9733__auto___9803 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.not_empty !== "undefined") {
    return clojure.test.check.generators.not_empty;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "not-empty", "clojure.test.check.generators/not-empty", -876211682, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "not-empty", "clojure.test.check.generators/not-empty", -876211682, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.not_empty = function(g__9733__auto___9803) {
  return function cljs$spec$impl$gen$not_empty(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9804 = arguments.length;
    var i__8374__auto___9805 = 0;
    while (true) {
      if (i__8374__auto___9805 < len__8373__auto___9804) {
        args__8380__auto__.push(arguments[i__8374__auto___9805]);
        var G__9806 = i__8374__auto___9805 + 1;
        i__8374__auto___9805 = G__9806;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.not_empty.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9803);
cljs.spec.impl.gen.not_empty.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9803) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9803), args);
  };
}(g__9733__auto___9803);
cljs.spec.impl.gen.not_empty.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.not_empty.cljs$lang$applyTo = function(g__9733__auto___9803) {
  return function(seq9775) {
    return cljs.spec.impl.gen.not_empty.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9775));
  };
}(g__9733__auto___9803);
var g__9733__auto___9807 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.set !== "undefined") {
    return clojure.test.check.generators.set;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "set", "clojure.test.check.generators/set", -1027639543, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "set", "clojure.test.check.generators/set", -1027639543, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.set = function(g__9733__auto___9807) {
  return function cljs$spec$impl$gen$set(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9808 = arguments.length;
    var i__8374__auto___9809 = 0;
    while (true) {
      if (i__8374__auto___9809 < len__8373__auto___9808) {
        args__8380__auto__.push(arguments[i__8374__auto___9809]);
        var G__9810 = i__8374__auto___9809 + 1;
        i__8374__auto___9809 = G__9810;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.set.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9807);
cljs.spec.impl.gen.set.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9807) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9807), args);
  };
}(g__9733__auto___9807);
cljs.spec.impl.gen.set.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.set.cljs$lang$applyTo = function(g__9733__auto___9807) {
  return function(seq9776) {
    return cljs.spec.impl.gen.set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9776));
  };
}(g__9733__auto___9807);
var g__9733__auto___9811 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.vector !== "undefined") {
    return clojure.test.check.generators.vector;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "vector", "clojure.test.check.generators/vector", 1081775325, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "vector", "clojure.test.check.generators/vector", 1081775325, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.vector = function(g__9733__auto___9811) {
  return function cljs$spec$impl$gen$vector(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9812 = arguments.length;
    var i__8374__auto___9813 = 0;
    while (true) {
      if (i__8374__auto___9813 < len__8373__auto___9812) {
        args__8380__auto__.push(arguments[i__8374__auto___9813]);
        var G__9814 = i__8374__auto___9813 + 1;
        i__8374__auto___9813 = G__9814;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9811);
cljs.spec.impl.gen.vector.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9811) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9811), args);
  };
}(g__9733__auto___9811);
cljs.spec.impl.gen.vector.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.vector.cljs$lang$applyTo = function(g__9733__auto___9811) {
  return function(seq9777) {
    return cljs.spec.impl.gen.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9777));
  };
}(g__9733__auto___9811);
var g__9733__auto___9815 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.vector_distinct !== "undefined") {
    return clojure.test.check.generators.vector_distinct;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "vector-distinct", "clojure.test.check.generators/vector-distinct", 1656877834, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "vector-distinct", "clojure.test.check.generators/vector-distinct", 
    1656877834, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.vector_distinct = function(g__9733__auto___9815) {
  return function cljs$spec$impl$gen$vector_distinct(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9816 = arguments.length;
    var i__8374__auto___9817 = 0;
    while (true) {
      if (i__8374__auto___9817 < len__8373__auto___9816) {
        args__8380__auto__.push(arguments[i__8374__auto___9817]);
        var G__9818 = i__8374__auto___9817 + 1;
        i__8374__auto___9817 = G__9818;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.vector_distinct.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9815);
cljs.spec.impl.gen.vector_distinct.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9815) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9815), args);
  };
}(g__9733__auto___9815);
cljs.spec.impl.gen.vector_distinct.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.vector_distinct.cljs$lang$applyTo = function(g__9733__auto___9815) {
  return function(seq9778) {
    return cljs.spec.impl.gen.vector_distinct.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9778));
  };
}(g__9733__auto___9815);
var g__9733__auto___9819 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.fmap !== "undefined") {
    return clojure.test.check.generators.fmap;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "fmap", "clojure.test.check.generators/fmap", 1957997092, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "fmap", "clojure.test.check.generators/fmap", 1957997092, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.fmap = function(g__9733__auto___9819) {
  return function cljs$spec$impl$gen$fmap(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9820 = arguments.length;
    var i__8374__auto___9821 = 0;
    while (true) {
      if (i__8374__auto___9821 < len__8373__auto___9820) {
        args__8380__auto__.push(arguments[i__8374__auto___9821]);
        var G__9822 = i__8374__auto___9821 + 1;
        i__8374__auto___9821 = G__9822;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.fmap.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9819);
cljs.spec.impl.gen.fmap.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9819) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9819), args);
  };
}(g__9733__auto___9819);
cljs.spec.impl.gen.fmap.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.fmap.cljs$lang$applyTo = function(g__9733__auto___9819) {
  return function(seq9779) {
    return cljs.spec.impl.gen.fmap.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9779));
  };
}(g__9733__auto___9819);
var g__9733__auto___9823 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.elements !== "undefined") {
    return clojure.test.check.generators.elements;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "elements", "clojure.test.check.generators/elements", 438991326, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "elements", "clojure.test.check.generators/elements", 438991326, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.elements = function(g__9733__auto___9823) {
  return function cljs$spec$impl$gen$elements(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9824 = arguments.length;
    var i__8374__auto___9825 = 0;
    while (true) {
      if (i__8374__auto___9825 < len__8373__auto___9824) {
        args__8380__auto__.push(arguments[i__8374__auto___9825]);
        var G__9826 = i__8374__auto___9825 + 1;
        i__8374__auto___9825 = G__9826;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.elements.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9823);
cljs.spec.impl.gen.elements.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9823) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9823), args);
  };
}(g__9733__auto___9823);
cljs.spec.impl.gen.elements.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.elements.cljs$lang$applyTo = function(g__9733__auto___9823) {
  return function(seq9780) {
    return cljs.spec.impl.gen.elements.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9780));
  };
}(g__9733__auto___9823);
var g__9733__auto___9827 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.bind !== "undefined") {
    return clojure.test.check.generators.bind;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "bind", "clojure.test.check.generators/bind", -361313906, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "bind", "clojure.test.check.generators/bind", -361313906, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.bind = function(g__9733__auto___9827) {
  return function cljs$spec$impl$gen$bind(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9828 = arguments.length;
    var i__8374__auto___9829 = 0;
    while (true) {
      if (i__8374__auto___9829 < len__8373__auto___9828) {
        args__8380__auto__.push(arguments[i__8374__auto___9829]);
        var G__9830 = i__8374__auto___9829 + 1;
        i__8374__auto___9829 = G__9830;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.bind.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9827);
cljs.spec.impl.gen.bind.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9827) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9827), args);
  };
}(g__9733__auto___9827);
cljs.spec.impl.gen.bind.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.bind.cljs$lang$applyTo = function(g__9733__auto___9827) {
  return function(seq9781) {
    return cljs.spec.impl.gen.bind.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9781));
  };
}(g__9733__auto___9827);
var g__9733__auto___9831 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.choose !== "undefined") {
    return clojure.test.check.generators.choose;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "choose", "clojure.test.check.generators/choose", 909997832, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "choose", "clojure.test.check.generators/choose", 909997832, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.choose = function(g__9733__auto___9831) {
  return function cljs$spec$impl$gen$choose(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9832 = arguments.length;
    var i__8374__auto___9833 = 0;
    while (true) {
      if (i__8374__auto___9833 < len__8373__auto___9832) {
        args__8380__auto__.push(arguments[i__8374__auto___9833]);
        var G__9834 = i__8374__auto___9833 + 1;
        i__8374__auto___9833 = G__9834;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.choose.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9831);
cljs.spec.impl.gen.choose.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9831) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9831), args);
  };
}(g__9733__auto___9831);
cljs.spec.impl.gen.choose.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.choose.cljs$lang$applyTo = function(g__9733__auto___9831) {
  return function(seq9782) {
    return cljs.spec.impl.gen.choose.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9782));
  };
}(g__9733__auto___9831);
var g__9733__auto___9835 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.one_of !== "undefined") {
    return clojure.test.check.generators.one_of;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "one-of", "clojure.test.check.generators/one-of", -183339191, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "one-of", "clojure.test.check.generators/one-of", -183339191, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.one_of = function(g__9733__auto___9835) {
  return function cljs$spec$impl$gen$one_of(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9836 = arguments.length;
    var i__8374__auto___9837 = 0;
    while (true) {
      if (i__8374__auto___9837 < len__8373__auto___9836) {
        args__8380__auto__.push(arguments[i__8374__auto___9837]);
        var G__9838 = i__8374__auto___9837 + 1;
        i__8374__auto___9837 = G__9838;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.one_of.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9835);
cljs.spec.impl.gen.one_of.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9835) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9835), args);
  };
}(g__9733__auto___9835);
cljs.spec.impl.gen.one_of.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.one_of.cljs$lang$applyTo = function(g__9733__auto___9835) {
  return function(seq9783) {
    return cljs.spec.impl.gen.one_of.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9783));
  };
}(g__9733__auto___9835);
var g__9733__auto___9839 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.such_that !== "undefined") {
    return clojure.test.check.generators.such_that;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "such-that", "clojure.test.check.generators/such-that", -1754178732, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "such-that", "clojure.test.check.generators/such-that", -1754178732, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.such_that = function(g__9733__auto___9839) {
  return function cljs$spec$impl$gen$such_that(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9840 = arguments.length;
    var i__8374__auto___9841 = 0;
    while (true) {
      if (i__8374__auto___9841 < len__8373__auto___9840) {
        args__8380__auto__.push(arguments[i__8374__auto___9841]);
        var G__9842 = i__8374__auto___9841 + 1;
        i__8374__auto___9841 = G__9842;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.such_that.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9839);
cljs.spec.impl.gen.such_that.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9839) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9839), args);
  };
}(g__9733__auto___9839);
cljs.spec.impl.gen.such_that.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.such_that.cljs$lang$applyTo = function(g__9733__auto___9839) {
  return function(seq9784) {
    return cljs.spec.impl.gen.such_that.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9784));
  };
}(g__9733__auto___9839);
var g__9733__auto___9843 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.tuple !== "undefined") {
    return clojure.test.check.generators.tuple;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "tuple", "clojure.test.check.generators/tuple", -143711557, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "tuple", "clojure.test.check.generators/tuple", -143711557, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.tuple = function(g__9733__auto___9843) {
  return function cljs$spec$impl$gen$tuple(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9844 = arguments.length;
    var i__8374__auto___9845 = 0;
    while (true) {
      if (i__8374__auto___9845 < len__8373__auto___9844) {
        args__8380__auto__.push(arguments[i__8374__auto___9845]);
        var G__9846 = i__8374__auto___9845 + 1;
        i__8374__auto___9845 = G__9846;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.tuple.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9843);
cljs.spec.impl.gen.tuple.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9843) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9843), args);
  };
}(g__9733__auto___9843);
cljs.spec.impl.gen.tuple.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.tuple.cljs$lang$applyTo = function(g__9733__auto___9843) {
  return function(seq9785) {
    return cljs.spec.impl.gen.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9785));
  };
}(g__9733__auto___9843);
var g__9733__auto___9847 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.sample !== "undefined") {
    return clojure.test.check.generators.sample;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "sample", "clojure.test.check.generators/sample", -382944992, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "sample", "clojure.test.check.generators/sample", -382944992, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.sample = function(g__9733__auto___9847) {
  return function cljs$spec$impl$gen$sample(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9848 = arguments.length;
    var i__8374__auto___9849 = 0;
    while (true) {
      if (i__8374__auto___9849 < len__8373__auto___9848) {
        args__8380__auto__.push(arguments[i__8374__auto___9849]);
        var G__9850 = i__8374__auto___9849 + 1;
        i__8374__auto___9849 = G__9850;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.sample.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9847);
cljs.spec.impl.gen.sample.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9847) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9847), args);
  };
}(g__9733__auto___9847);
cljs.spec.impl.gen.sample.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.sample.cljs$lang$applyTo = function(g__9733__auto___9847) {
  return function(seq9786) {
    return cljs.spec.impl.gen.sample.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9786));
  };
}(g__9733__auto___9847);
var g__9733__auto___9851 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.return$ !== "undefined") {
    return clojure.test.check.generators.return$;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "return", "clojure.test.check.generators/return", 1744522038, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "return", "clojure.test.check.generators/return", 1744522038, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.return$ = function(g__9733__auto___9851) {
  return function cljs$spec$impl$gen$return(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9852 = arguments.length;
    var i__8374__auto___9853 = 0;
    while (true) {
      if (i__8374__auto___9853 < len__8373__auto___9852) {
        args__8380__auto__.push(arguments[i__8374__auto___9853]);
        var G__9854 = i__8374__auto___9853 + 1;
        i__8374__auto___9853 = G__9854;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.return$.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9851);
cljs.spec.impl.gen.return$.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9851) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9851), args);
  };
}(g__9733__auto___9851);
cljs.spec.impl.gen.return$.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.return$.cljs$lang$applyTo = function(g__9733__auto___9851) {
  return function(seq9787) {
    return cljs.spec.impl.gen.return$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9787));
  };
}(g__9733__auto___9851);
var g__9733__auto___9855 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.large_integer_STAR_ !== "undefined") {
    return clojure.test.check.generators.large_integer_STAR_;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "large-integer*", "clojure.test.check.generators/large-integer*", -437830670, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "large-integer*", "clojure.test.check.generators/large-integer*", 
    -437830670, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.large_integer_STAR_ = function(g__9733__auto___9855) {
  return function cljs$spec$impl$gen$large_integer_STAR_(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9856 = arguments.length;
    var i__8374__auto___9857 = 0;
    while (true) {
      if (i__8374__auto___9857 < len__8373__auto___9856) {
        args__8380__auto__.push(arguments[i__8374__auto___9857]);
        var G__9858 = i__8374__auto___9857 + 1;
        i__8374__auto___9857 = G__9858;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.large_integer_STAR_.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9855);
cljs.spec.impl.gen.large_integer_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9855) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9855), args);
  };
}(g__9733__auto___9855);
cljs.spec.impl.gen.large_integer_STAR_.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.large_integer_STAR_.cljs$lang$applyTo = function(g__9733__auto___9855) {
  return function(seq9788) {
    return cljs.spec.impl.gen.large_integer_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9788));
  };
}(g__9733__auto___9855);
var g__9733__auto___9859 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.double_STAR_ !== "undefined") {
    return clojure.test.check.generators.double_STAR_;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "double*", "clojure.test.check.generators/double*", 841542265, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "double*", "clojure.test.check.generators/double*", 841542265, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.double_STAR_ = function(g__9733__auto___9859) {
  return function cljs$spec$impl$gen$double_STAR_(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9860 = arguments.length;
    var i__8374__auto___9861 = 0;
    while (true) {
      if (i__8374__auto___9861 < len__8373__auto___9860) {
        args__8380__auto__.push(arguments[i__8374__auto___9861]);
        var G__9862 = i__8374__auto___9861 + 1;
        i__8374__auto___9861 = G__9862;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.double_STAR_.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9859);
cljs.spec.impl.gen.double_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9859) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9859), args);
  };
}(g__9733__auto___9859);
cljs.spec.impl.gen.double_STAR_.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.double_STAR_.cljs$lang$applyTo = function(g__9733__auto___9859) {
  return function(seq9789) {
    return cljs.spec.impl.gen.double_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9789));
  };
}(g__9733__auto___9859);
var g__9733__auto___9863 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.frequency !== "undefined") {
    return clojure.test.check.generators.frequency;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "frequency", "clojure.test.check.generators/frequency", 2090703177, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "frequency", "clojure.test.check.generators/frequency", 2090703177, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.frequency = function(g__9733__auto___9863) {
  return function cljs$spec$impl$gen$frequency(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9864 = arguments.length;
    var i__8374__auto___9865 = 0;
    while (true) {
      if (i__8374__auto___9865 < len__8373__auto___9864) {
        args__8380__auto__.push(arguments[i__8374__auto___9865]);
        var G__9866 = i__8374__auto___9865 + 1;
        i__8374__auto___9865 = G__9866;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.frequency.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9733__auto___9863);
cljs.spec.impl.gen.frequency.cljs$core$IFn$_invoke$arity$variadic = function(g__9733__auto___9863) {
  return function(args) {
    return cljs.core.apply.call(null, cljs.core.deref.call(null, g__9733__auto___9863), args);
  };
}(g__9733__auto___9863);
cljs.spec.impl.gen.frequency.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.frequency.cljs$lang$applyTo = function(g__9733__auto___9863) {
  return function(seq9790) {
    return cljs.spec.impl.gen.frequency.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9790));
  };
}(g__9733__auto___9863);
var g__9746__auto___9888 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.any !== "undefined") {
    return clojure.test.check.generators.any;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "any", "clojure.test.check.generators/any", 1883743710, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "any", "clojure.test.check.generators/any", 1883743710, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.any = function(g__9746__auto___9888) {
  return function cljs$spec$impl$gen$any(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9889 = arguments.length;
    var i__8374__auto___9890 = 0;
    while (true) {
      if (i__8374__auto___9890 < len__8373__auto___9889) {
        args__8380__auto__.push(arguments[i__8374__auto___9890]);
        var G__9891 = i__8374__auto___9890 + 1;
        i__8374__auto___9890 = G__9891;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.any.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9888);
cljs.spec.impl.gen.any.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9888) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9888);
  };
}(g__9746__auto___9888);
cljs.spec.impl.gen.any.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.any.cljs$lang$applyTo = function(g__9746__auto___9888) {
  return function(seq9867) {
    return cljs.spec.impl.gen.any.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9867));
  };
}(g__9746__auto___9888);
var g__9746__auto___9892 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.any_printable !== "undefined") {
    return clojure.test.check.generators.any_printable;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "any-printable", "clojure.test.check.generators/any-printable", -1570493991, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "any-printable", "clojure.test.check.generators/any-printable", 
    -1570493991, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.any_printable = function(g__9746__auto___9892) {
  return function cljs$spec$impl$gen$any_printable(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9893 = arguments.length;
    var i__8374__auto___9894 = 0;
    while (true) {
      if (i__8374__auto___9894 < len__8373__auto___9893) {
        args__8380__auto__.push(arguments[i__8374__auto___9894]);
        var G__9895 = i__8374__auto___9894 + 1;
        i__8374__auto___9894 = G__9895;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.any_printable.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9892);
cljs.spec.impl.gen.any_printable.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9892) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9892);
  };
}(g__9746__auto___9892);
cljs.spec.impl.gen.any_printable.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.any_printable.cljs$lang$applyTo = function(g__9746__auto___9892) {
  return function(seq9868) {
    return cljs.spec.impl.gen.any_printable.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9868));
  };
}(g__9746__auto___9892);
var g__9746__auto___9896 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.boolean$ !== "undefined") {
    return clojure.test.check.generators.boolean$;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "boolean", "clojure.test.check.generators/boolean", 1586992347, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "boolean", "clojure.test.check.generators/boolean", 1586992347, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.boolean$ = function(g__9746__auto___9896) {
  return function cljs$spec$impl$gen$boolean(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9897 = arguments.length;
    var i__8374__auto___9898 = 0;
    while (true) {
      if (i__8374__auto___9898 < len__8373__auto___9897) {
        args__8380__auto__.push(arguments[i__8374__auto___9898]);
        var G__9899 = i__8374__auto___9898 + 1;
        i__8374__auto___9898 = G__9899;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.boolean$.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9896);
cljs.spec.impl.gen.boolean$.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9896) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9896);
  };
}(g__9746__auto___9896);
cljs.spec.impl.gen.boolean$.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.boolean$.cljs$lang$applyTo = function(g__9746__auto___9896) {
  return function(seq9869) {
    return cljs.spec.impl.gen.boolean$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9869));
  };
}(g__9746__auto___9896);
var g__9746__auto___9900 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.char$ !== "undefined") {
    return clojure.test.check.generators.char$;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "char", "clojure.test.check.generators/char", -1426343459, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "char", "clojure.test.check.generators/char", -1426343459, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.char$ = function(g__9746__auto___9900) {
  return function cljs$spec$impl$gen$char(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9901 = arguments.length;
    var i__8374__auto___9902 = 0;
    while (true) {
      if (i__8374__auto___9902 < len__8373__auto___9901) {
        args__8380__auto__.push(arguments[i__8374__auto___9902]);
        var G__9903 = i__8374__auto___9902 + 1;
        i__8374__auto___9902 = G__9903;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.char$.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9900);
cljs.spec.impl.gen.char$.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9900) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9900);
  };
}(g__9746__auto___9900);
cljs.spec.impl.gen.char$.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.char$.cljs$lang$applyTo = function(g__9746__auto___9900) {
  return function(seq9870) {
    return cljs.spec.impl.gen.char$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9870));
  };
}(g__9746__auto___9900);
var g__9746__auto___9904 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.char_alpha !== "undefined") {
    return clojure.test.check.generators.char_alpha;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "char-alpha", "clojure.test.check.generators/char-alpha", 615785796, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "char-alpha", "clojure.test.check.generators/char-alpha", 
    615785796, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.char_alpha = function(g__9746__auto___9904) {
  return function cljs$spec$impl$gen$char_alpha(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9905 = arguments.length;
    var i__8374__auto___9906 = 0;
    while (true) {
      if (i__8374__auto___9906 < len__8373__auto___9905) {
        args__8380__auto__.push(arguments[i__8374__auto___9906]);
        var G__9907 = i__8374__auto___9906 + 1;
        i__8374__auto___9906 = G__9907;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.char_alpha.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9904);
cljs.spec.impl.gen.char_alpha.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9904) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9904);
  };
}(g__9746__auto___9904);
cljs.spec.impl.gen.char_alpha.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.char_alpha.cljs$lang$applyTo = function(g__9746__auto___9904) {
  return function(seq9871) {
    return cljs.spec.impl.gen.char_alpha.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9871));
  };
}(g__9746__auto___9904);
var g__9746__auto___9908 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.char_alphanumeric !== "undefined") {
    return clojure.test.check.generators.char_alphanumeric;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "char-alphanumeric", "clojure.test.check.generators/char-alphanumeric", 1383091431, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "char-alphanumeric", "clojure.test.check.generators/char-alphanumeric", 
    1383091431, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.char_alphanumeric = function(g__9746__auto___9908) {
  return function cljs$spec$impl$gen$char_alphanumeric(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9909 = arguments.length;
    var i__8374__auto___9910 = 0;
    while (true) {
      if (i__8374__auto___9910 < len__8373__auto___9909) {
        args__8380__auto__.push(arguments[i__8374__auto___9910]);
        var G__9911 = i__8374__auto___9910 + 1;
        i__8374__auto___9910 = G__9911;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.char_alphanumeric.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9908);
cljs.spec.impl.gen.char_alphanumeric.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9908) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9908);
  };
}(g__9746__auto___9908);
cljs.spec.impl.gen.char_alphanumeric.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.char_alphanumeric.cljs$lang$applyTo = function(g__9746__auto___9908) {
  return function(seq9872) {
    return cljs.spec.impl.gen.char_alphanumeric.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9872));
  };
}(g__9746__auto___9908);
var g__9746__auto___9912 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.char_ascii !== "undefined") {
    return clojure.test.check.generators.char_ascii;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "char-ascii", "clojure.test.check.generators/char-ascii", -899908538, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "char-ascii", "clojure.test.check.generators/char-ascii", 
    -899908538, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.char_ascii = function(g__9746__auto___9912) {
  return function cljs$spec$impl$gen$char_ascii(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9913 = arguments.length;
    var i__8374__auto___9914 = 0;
    while (true) {
      if (i__8374__auto___9914 < len__8373__auto___9913) {
        args__8380__auto__.push(arguments[i__8374__auto___9914]);
        var G__9915 = i__8374__auto___9914 + 1;
        i__8374__auto___9914 = G__9915;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.char_ascii.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9912);
cljs.spec.impl.gen.char_ascii.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9912) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9912);
  };
}(g__9746__auto___9912);
cljs.spec.impl.gen.char_ascii.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.char_ascii.cljs$lang$applyTo = function(g__9746__auto___9912) {
  return function(seq9873) {
    return cljs.spec.impl.gen.char_ascii.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9873));
  };
}(g__9746__auto___9912);
var g__9746__auto___9916 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.double$ !== "undefined") {
    return clojure.test.check.generators.double$;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "double", "clojure.test.check.generators/double", 668331090, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "double", "clojure.test.check.generators/double", 668331090, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.double$ = function(g__9746__auto___9916) {
  return function cljs$spec$impl$gen$double(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9917 = arguments.length;
    var i__8374__auto___9918 = 0;
    while (true) {
      if (i__8374__auto___9918 < len__8373__auto___9917) {
        args__8380__auto__.push(arguments[i__8374__auto___9918]);
        var G__9919 = i__8374__auto___9918 + 1;
        i__8374__auto___9918 = G__9919;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.double$.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9916);
cljs.spec.impl.gen.double$.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9916) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9916);
  };
}(g__9746__auto___9916);
cljs.spec.impl.gen.double$.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.double$.cljs$lang$applyTo = function(g__9746__auto___9916) {
  return function(seq9874) {
    return cljs.spec.impl.gen.double$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9874));
  };
}(g__9746__auto___9916);
var g__9746__auto___9920 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.int$ !== "undefined") {
    return clojure.test.check.generators.int$;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "int", "clojure.test.check.generators/int", 1756228469, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "int", "clojure.test.check.generators/int", 1756228469, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.int$ = function(g__9746__auto___9920) {
  return function cljs$spec$impl$gen$int(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9921 = arguments.length;
    var i__8374__auto___9922 = 0;
    while (true) {
      if (i__8374__auto___9922 < len__8373__auto___9921) {
        args__8380__auto__.push(arguments[i__8374__auto___9922]);
        var G__9923 = i__8374__auto___9922 + 1;
        i__8374__auto___9922 = G__9923;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.int$.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9920);
cljs.spec.impl.gen.int$.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9920) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9920);
  };
}(g__9746__auto___9920);
cljs.spec.impl.gen.int$.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.int$.cljs$lang$applyTo = function(g__9746__auto___9920) {
  return function(seq9875) {
    return cljs.spec.impl.gen.int$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9875));
  };
}(g__9746__auto___9920);
var g__9746__auto___9924 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.keyword !== "undefined") {
    return clojure.test.check.generators.keyword;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "keyword", "clojure.test.check.generators/keyword", 24530530, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "keyword", "clojure.test.check.generators/keyword", 24530530, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.keyword = function(g__9746__auto___9924) {
  return function cljs$spec$impl$gen$keyword(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9925 = arguments.length;
    var i__8374__auto___9926 = 0;
    while (true) {
      if (i__8374__auto___9926 < len__8373__auto___9925) {
        args__8380__auto__.push(arguments[i__8374__auto___9926]);
        var G__9927 = i__8374__auto___9926 + 1;
        i__8374__auto___9926 = G__9927;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.keyword.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9924);
cljs.spec.impl.gen.keyword.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9924) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9924);
  };
}(g__9746__auto___9924);
cljs.spec.impl.gen.keyword.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.keyword.cljs$lang$applyTo = function(g__9746__auto___9924) {
  return function(seq9876) {
    return cljs.spec.impl.gen.keyword.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9876));
  };
}(g__9746__auto___9924);
var g__9746__auto___9928 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.keyword_ns !== "undefined") {
    return clojure.test.check.generators.keyword_ns;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "keyword-ns", "clojure.test.check.generators/keyword-ns", -1492628482, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "keyword-ns", "clojure.test.check.generators/keyword-ns", 
    -1492628482, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.keyword_ns = function(g__9746__auto___9928) {
  return function cljs$spec$impl$gen$keyword_ns(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9929 = arguments.length;
    var i__8374__auto___9930 = 0;
    while (true) {
      if (i__8374__auto___9930 < len__8373__auto___9929) {
        args__8380__auto__.push(arguments[i__8374__auto___9930]);
        var G__9931 = i__8374__auto___9930 + 1;
        i__8374__auto___9930 = G__9931;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.keyword_ns.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9928);
cljs.spec.impl.gen.keyword_ns.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9928) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9928);
  };
}(g__9746__auto___9928);
cljs.spec.impl.gen.keyword_ns.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.keyword_ns.cljs$lang$applyTo = function(g__9746__auto___9928) {
  return function(seq9877) {
    return cljs.spec.impl.gen.keyword_ns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9877));
  };
}(g__9746__auto___9928);
var g__9746__auto___9932 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.large_integer !== "undefined") {
    return clojure.test.check.generators.large_integer;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "large-integer", "clojure.test.check.generators/large-integer", -865967138, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "large-integer", "clojure.test.check.generators/large-integer", 
    -865967138, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.large_integer = function(g__9746__auto___9932) {
  return function cljs$spec$impl$gen$large_integer(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9933 = arguments.length;
    var i__8374__auto___9934 = 0;
    while (true) {
      if (i__8374__auto___9934 < len__8373__auto___9933) {
        args__8380__auto__.push(arguments[i__8374__auto___9934]);
        var G__9935 = i__8374__auto___9934 + 1;
        i__8374__auto___9934 = G__9935;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.large_integer.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9932);
cljs.spec.impl.gen.large_integer.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9932) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9932);
  };
}(g__9746__auto___9932);
cljs.spec.impl.gen.large_integer.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.large_integer.cljs$lang$applyTo = function(g__9746__auto___9932) {
  return function(seq9878) {
    return cljs.spec.impl.gen.large_integer.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9878));
  };
}(g__9746__auto___9932);
var g__9746__auto___9936 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.ratio !== "undefined") {
    return clojure.test.check.generators.ratio;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "ratio", "clojure.test.check.generators/ratio", 1540966915, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "ratio", "clojure.test.check.generators/ratio", 1540966915, null))), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.ratio = function(g__9746__auto___9936) {
  return function cljs$spec$impl$gen$ratio(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9937 = arguments.length;
    var i__8374__auto___9938 = 0;
    while (true) {
      if (i__8374__auto___9938 < len__8373__auto___9937) {
        args__8380__auto__.push(arguments[i__8374__auto___9938]);
        var G__9939 = i__8374__auto___9938 + 1;
        i__8374__auto___9938 = G__9939;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.ratio.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9936);
cljs.spec.impl.gen.ratio.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9936) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9936);
  };
}(g__9746__auto___9936);
cljs.spec.impl.gen.ratio.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.ratio.cljs$lang$applyTo = function(g__9746__auto___9936) {
  return function(seq9879) {
    return cljs.spec.impl.gen.ratio.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9879));
  };
}(g__9746__auto___9936);
var g__9746__auto___9940 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.simple_type !== "undefined") {
    return clojure.test.check.generators.simple_type;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "simple-type", "clojure.test.check.generators/simple-type", 892572284, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "simple-type", "clojure.test.check.generators/simple-type", 
    892572284, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.simple_type = function(g__9746__auto___9940) {
  return function cljs$spec$impl$gen$simple_type(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9941 = arguments.length;
    var i__8374__auto___9942 = 0;
    while (true) {
      if (i__8374__auto___9942 < len__8373__auto___9941) {
        args__8380__auto__.push(arguments[i__8374__auto___9942]);
        var G__9943 = i__8374__auto___9942 + 1;
        i__8374__auto___9942 = G__9943;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.simple_type.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9940);
cljs.spec.impl.gen.simple_type.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9940) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9940);
  };
}(g__9746__auto___9940);
cljs.spec.impl.gen.simple_type.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.simple_type.cljs$lang$applyTo = function(g__9746__auto___9940) {
  return function(seq9880) {
    return cljs.spec.impl.gen.simple_type.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9880));
  };
}(g__9746__auto___9940);
var g__9746__auto___9944 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.simple_type_printable !== "undefined") {
    return clojure.test.check.generators.simple_type_printable;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "simple-type-printable", "clojure.test.check.generators/simple-type-printable", -58489962, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "simple-type-printable", "clojure.test.check.generators/simple-type-printable", 
    -58489962, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.simple_type_printable = function(g__9746__auto___9944) {
  return function cljs$spec$impl$gen$simple_type_printable(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9945 = arguments.length;
    var i__8374__auto___9946 = 0;
    while (true) {
      if (i__8374__auto___9946 < len__8373__auto___9945) {
        args__8380__auto__.push(arguments[i__8374__auto___9946]);
        var G__9947 = i__8374__auto___9946 + 1;
        i__8374__auto___9946 = G__9947;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.simple_type_printable.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9944);
cljs.spec.impl.gen.simple_type_printable.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9944) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9944);
  };
}(g__9746__auto___9944);
cljs.spec.impl.gen.simple_type_printable.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.simple_type_printable.cljs$lang$applyTo = function(g__9746__auto___9944) {
  return function(seq9881) {
    return cljs.spec.impl.gen.simple_type_printable.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9881));
  };
}(g__9746__auto___9944);
var g__9746__auto___9948 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.string !== "undefined") {
    return clojure.test.check.generators.string;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "string", "clojure.test.check.generators/string", -1704750979, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "string", "clojure.test.check.generators/string", -1704750979, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.string = function(g__9746__auto___9948) {
  return function cljs$spec$impl$gen$string(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9949 = arguments.length;
    var i__8374__auto___9950 = 0;
    while (true) {
      if (i__8374__auto___9950 < len__8373__auto___9949) {
        args__8380__auto__.push(arguments[i__8374__auto___9950]);
        var G__9951 = i__8374__auto___9950 + 1;
        i__8374__auto___9950 = G__9951;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.string.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9948);
cljs.spec.impl.gen.string.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9948) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9948);
  };
}(g__9746__auto___9948);
cljs.spec.impl.gen.string.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.string.cljs$lang$applyTo = function(g__9746__auto___9948) {
  return function(seq9882) {
    return cljs.spec.impl.gen.string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9882));
  };
}(g__9746__auto___9948);
var g__9746__auto___9952 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.string_ascii !== "undefined") {
    return clojure.test.check.generators.string_ascii;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "string-ascii", "clojure.test.check.generators/string-ascii", -2009877640, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "string-ascii", "clojure.test.check.generators/string-ascii", 
    -2009877640, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.string_ascii = function(g__9746__auto___9952) {
  return function cljs$spec$impl$gen$string_ascii(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9953 = arguments.length;
    var i__8374__auto___9954 = 0;
    while (true) {
      if (i__8374__auto___9954 < len__8373__auto___9953) {
        args__8380__auto__.push(arguments[i__8374__auto___9954]);
        var G__9955 = i__8374__auto___9954 + 1;
        i__8374__auto___9954 = G__9955;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.string_ascii.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9952);
cljs.spec.impl.gen.string_ascii.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9952) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9952);
  };
}(g__9746__auto___9952);
cljs.spec.impl.gen.string_ascii.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.string_ascii.cljs$lang$applyTo = function(g__9746__auto___9952) {
  return function(seq9883) {
    return cljs.spec.impl.gen.string_ascii.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9883));
  };
}(g__9746__auto___9952);
var g__9746__auto___9956 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.string_alphanumeric !== "undefined") {
    return clojure.test.check.generators.string_alphanumeric;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "string-alphanumeric", "clojure.test.check.generators/string-alphanumeric", 836374939, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "string-alphanumeric", "clojure.test.check.generators/string-alphanumeric", 
    836374939, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.string_alphanumeric = function(g__9746__auto___9956) {
  return function cljs$spec$impl$gen$string_alphanumeric(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9957 = arguments.length;
    var i__8374__auto___9958 = 0;
    while (true) {
      if (i__8374__auto___9958 < len__8373__auto___9957) {
        args__8380__auto__.push(arguments[i__8374__auto___9958]);
        var G__9959 = i__8374__auto___9958 + 1;
        i__8374__auto___9958 = G__9959;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.string_alphanumeric.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9956);
cljs.spec.impl.gen.string_alphanumeric.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9956) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9956);
  };
}(g__9746__auto___9956);
cljs.spec.impl.gen.string_alphanumeric.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.string_alphanumeric.cljs$lang$applyTo = function(g__9746__auto___9956) {
  return function(seq9884) {
    return cljs.spec.impl.gen.string_alphanumeric.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9884));
  };
}(g__9746__auto___9956);
var g__9746__auto___9960 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.symbol !== "undefined") {
    return clojure.test.check.generators.symbol;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "symbol", "clojure.test.check.generators/symbol", -1305461065, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "symbol", "clojure.test.check.generators/symbol", -1305461065, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.symbol = function(g__9746__auto___9960) {
  return function cljs$spec$impl$gen$symbol(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9961 = arguments.length;
    var i__8374__auto___9962 = 0;
    while (true) {
      if (i__8374__auto___9962 < len__8373__auto___9961) {
        args__8380__auto__.push(arguments[i__8374__auto___9962]);
        var G__9963 = i__8374__auto___9962 + 1;
        i__8374__auto___9962 = G__9963;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.symbol.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9960);
cljs.spec.impl.gen.symbol.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9960) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9960);
  };
}(g__9746__auto___9960);
cljs.spec.impl.gen.symbol.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.symbol.cljs$lang$applyTo = function(g__9746__auto___9960) {
  return function(seq9885) {
    return cljs.spec.impl.gen.symbol.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9885));
  };
}(g__9746__auto___9960);
var g__9746__auto___9964 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.symbol_ns !== "undefined") {
    return clojure.test.check.generators.symbol_ns;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "symbol-ns", "clojure.test.check.generators/symbol-ns", -862629490, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "symbol-ns", "clojure.test.check.generators/symbol-ns", -862629490, 
    null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.symbol_ns = function(g__9746__auto___9964) {
  return function cljs$spec$impl$gen$symbol_ns(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9965 = arguments.length;
    var i__8374__auto___9966 = 0;
    while (true) {
      if (i__8374__auto___9966 < len__8373__auto___9965) {
        args__8380__auto__.push(arguments[i__8374__auto___9966]);
        var G__9967 = i__8374__auto___9966 + 1;
        i__8374__auto___9966 = G__9967;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.symbol_ns.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9964);
cljs.spec.impl.gen.symbol_ns.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9964) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9964);
  };
}(g__9746__auto___9964);
cljs.spec.impl.gen.symbol_ns.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.symbol_ns.cljs$lang$applyTo = function(g__9746__auto___9964) {
  return function(seq9886) {
    return cljs.spec.impl.gen.symbol_ns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9886));
  };
}(g__9746__auto___9964);
var g__9746__auto___9968 = new cljs.spec.impl.gen.LazyVar(function() {
  if (typeof clojure.test !== "undefined" && typeof clojure.test.check !== "undefined" && typeof clojure.test.check.generators.uuid !== "undefined") {
    return clojure.test.check.generators.uuid;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Symbol("clojure.test.check.generators", "uuid", "clojure.test.check.generators/uuid", 1589373144, null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace.call(null, new cljs.core.Symbol("clojure.test.check.generators", "uuid", "clojure.test.check.generators/uuid", 1589373144, null))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" never required")].join(""));
  }
}, null);
cljs.spec.impl.gen.uuid = function(g__9746__auto___9968) {
  return function cljs$spec$impl$gen$uuid(var_args) {
    var args__8380__auto__ = [];
    var len__8373__auto___9969 = arguments.length;
    var i__8374__auto___9970 = 0;
    while (true) {
      if (i__8374__auto___9970 < len__8373__auto___9969) {
        args__8380__auto__.push(arguments[i__8374__auto___9970]);
        var G__9971 = i__8374__auto___9970 + 1;
        i__8374__auto___9970 = G__9971;
        continue;
      } else {
      }
      break;
    }
    var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
    return cljs.spec.impl.gen.uuid.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
  };
}(g__9746__auto___9968);
cljs.spec.impl.gen.uuid.cljs$core$IFn$_invoke$arity$variadic = function(g__9746__auto___9968) {
  return function(args) {
    return cljs.core.deref.call(null, g__9746__auto___9968);
  };
}(g__9746__auto___9968);
cljs.spec.impl.gen.uuid.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.uuid.cljs$lang$applyTo = function(g__9746__auto___9968) {
  return function(seq9887) {
    return cljs.spec.impl.gen.uuid.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9887));
  };
}(g__9746__auto___9968);
cljs.spec.impl.gen.cat = function cljs$spec$impl$gen$cat(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9974 = arguments.length;
  var i__8374__auto___9975 = 0;
  while (true) {
    if (i__8374__auto___9975 < len__8373__auto___9974) {
      args__8380__auto__.push(arguments[i__8374__auto___9975]);
      var G__9976 = i__8374__auto___9975 + 1;
      i__8374__auto___9975 = G__9976;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.spec.impl.gen.cat.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.spec.impl.gen.cat.cljs$core$IFn$_invoke$arity$variadic = function(gens) {
  return cljs.spec.impl.gen.fmap.call(null, function(p1__9972_SHARP_) {
    return cljs.core.apply.call(null, cljs.core.concat, p1__9972_SHARP_);
  }, cljs.core.apply.call(null, cljs.spec.impl.gen.tuple, gens));
};
cljs.spec.impl.gen.cat.cljs$lang$maxFixedArity = 0;
cljs.spec.impl.gen.cat.cljs$lang$applyTo = function(seq9973) {
  return cljs.spec.impl.gen.cat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9973));
};
cljs.spec.impl.gen.qualified_QMARK_ = function cljs$spec$impl$gen$qualified_QMARK_(ident) {
  return !(cljs.core.namespace.call(null, ident) == null);
};
cljs.spec.impl.gen.gen_builtins = new cljs.core.Delay(function() {
  var simple = cljs.spec.impl.gen.simple_type_printable.call(null);
  return cljs.core.PersistentHashMap.fromArrays([cljs.core.qualified_keyword_QMARK_, cljs.core.seq_QMARK_, cljs.core.vector_QMARK_, cljs.core.any_QMARK_, cljs.core.boolean_QMARK_, cljs.core.char_QMARK_, cljs.core.inst_QMARK_, cljs.core.simple_symbol_QMARK_, cljs.core.sequential_QMARK_, cljs.core.float_QMARK_, cljs.core.set_QMARK_, cljs.core.map_QMARK_, cljs.core.empty_QMARK_, cljs.core.string_QMARK_, cljs.core.double_QMARK_, cljs.core.int_QMARK_, cljs.core.associative_QMARK_, cljs.core.keyword_QMARK_, 
  cljs.core.indexed_QMARK_, cljs.core.zero_QMARK_, cljs.core.simple_keyword_QMARK_, cljs.core.neg_int_QMARK_, cljs.core.nil_QMARK_, cljs.core.ident_QMARK_, cljs.core.qualified_ident_QMARK_, cljs.core.true_QMARK_, cljs.core.integer_QMARK_, cljs.core.nat_int_QMARK_, cljs.core.pos_int_QMARK_, cljs.core.uuid_QMARK_, cljs.core.false_QMARK_, cljs.core.list_QMARK_, cljs.core.simple_ident_QMARK_, cljs.core.number_QMARK_, cljs.core.qualified_symbol_QMARK_, cljs.core.seqable_QMARK_, cljs.core.symbol_QMARK_, 
  cljs.core.coll_QMARK_], [cljs.spec.impl.gen.such_that.call(null, cljs.spec.impl.gen.qualified_QMARK_, cljs.spec.impl.gen.keyword_ns.call(null)), cljs.spec.impl.gen.list.call(null, simple), cljs.spec.impl.gen.vector.call(null, simple), cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.impl.gen.return$.call(null, null), cljs.spec.impl.gen.any_printable.call(null)], null)), cljs.spec.impl.gen.boolean$.call(null), cljs.spec.impl.gen.char$.call(null), 
  cljs.spec.impl.gen.fmap.call(null, function(simple) {
    return function(p1__9977_SHARP_) {
      return new Date(p1__9977_SHARP_);
    };
  }(simple), cljs.spec.impl.gen.large_integer.call(null)), cljs.spec.impl.gen.symbol.call(null), cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.impl.gen.list.call(null, simple), cljs.spec.impl.gen.vector.call(null, simple)], null)), cljs.spec.impl.gen.double$.call(null), cljs.spec.impl.gen.set.call(null, simple), cljs.spec.impl.gen.map.call(null, simple, simple), cljs.spec.impl.gen.elements.call(null, new cljs.core.PersistentVector(null, 
  5, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.List.EMPTY, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentHashSet.EMPTY], null)), cljs.spec.impl.gen.string_alphanumeric.call(null), cljs.spec.impl.gen.double$.call(null), cljs.spec.impl.gen.large_integer.call(null), cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.impl.gen.map.call(null, simple, simple), cljs.spec.impl.gen.vector.call(null, 
  simple)], null)), cljs.spec.impl.gen.keyword_ns.call(null), cljs.spec.impl.gen.vector.call(null, simple), cljs.spec.impl.gen.return$.call(null, 0), cljs.spec.impl.gen.keyword.call(null), cljs.spec.impl.gen.large_integer_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "max", "max", 61366548), -1], null)), cljs.spec.impl.gen.return$.call(null, null), cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [cljs.spec.impl.gen.keyword_ns.call(null), cljs.spec.impl.gen.symbol_ns.call(null)], null)), cljs.spec.impl.gen.such_that.call(null, cljs.spec.impl.gen.qualified_QMARK_, cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.impl.gen.keyword_ns.call(null), cljs.spec.impl.gen.symbol_ns.call(null)], null))), cljs.spec.impl.gen.return$.call(null, true), cljs.spec.impl.gen.large_integer.call(null), cljs.spec.impl.gen.large_integer_STAR_.call(null, 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "min", "min", 444991522), 0], null)), cljs.spec.impl.gen.large_integer_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "min", "min", 444991522), 1], null)), cljs.spec.impl.gen.uuid.call(null), cljs.spec.impl.gen.return$.call(null, false), cljs.spec.impl.gen.list.call(null, simple), cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [cljs.spec.impl.gen.keyword.call(null), cljs.spec.impl.gen.symbol.call(null)], null)), cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.impl.gen.large_integer.call(null), cljs.spec.impl.gen.double$.call(null)], null)), cljs.spec.impl.gen.such_that.call(null, cljs.spec.impl.gen.qualified_QMARK_, cljs.spec.impl.gen.symbol_ns.call(null)), cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 6, 5, 
  cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.impl.gen.return$.call(null, null), cljs.spec.impl.gen.list.call(null, simple), cljs.spec.impl.gen.vector.call(null, simple), cljs.spec.impl.gen.map.call(null, simple, simple), cljs.spec.impl.gen.set.call(null, simple), cljs.spec.impl.gen.string_alphanumeric.call(null)], null)), cljs.spec.impl.gen.symbol_ns.call(null), cljs.spec.impl.gen.one_of.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.impl.gen.map.call(null, 
  simple, simple), cljs.spec.impl.gen.list.call(null, simple), cljs.spec.impl.gen.vector.call(null, simple), cljs.spec.impl.gen.set.call(null, simple)], null))]);
}, null);
cljs.spec.impl.gen.gen_for_pred = function cljs$spec$impl$gen$gen_for_pred(pred) {
  if (cljs.core.set_QMARK_.call(null, pred)) {
    return cljs.spec.impl.gen.elements.call(null, pred);
  } else {
    return cljs.core.get.call(null, cljs.core.deref.call(null, cljs.spec.impl.gen.gen_builtins), pred);
  }
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace_all = function clojure$string$replace_all(s, re, replacement) {
  return s.replace(new RegExp(re.source, "g"), replacement);
};
clojure.string.replace_with = function clojure$string$replace_with(f) {
  return function() {
    var G__9571__delegate = function(args) {
      var matches = cljs.core.drop_last.call(null, 2, args);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, matches), 1)) {
        return f.call(null, cljs.core.first.call(null, matches));
      } else {
        return f.call(null, cljs.core.vec.call(null, matches));
      }
    };
    var G__9571 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9572__i = 0, G__9572__a = new Array(arguments.length - 0);
        while (G__9572__i < G__9572__a.length) {
          G__9572__a[G__9572__i] = arguments[G__9572__i + 0];
          ++G__9572__i;
        }
        args = new cljs.core.IndexedSeq(G__9572__a, 0);
      }
      return G__9571__delegate.call(this, args);
    };
    G__9571.cljs$lang$maxFixedArity = 0;
    G__9571.cljs$lang$applyTo = function(arglist__9573) {
      var args = cljs.core.seq(arglist__9573);
      return G__9571__delegate(args);
    };
    G__9571.cljs$core$IFn$_invoke$arity$variadic = G__9571__delegate;
    return G__9571;
  }();
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      if (typeof replacement === "string") {
        return clojure.string.replace_all.call(null, s, match, replacement);
      } else {
        return clojure.string.replace_all.call(null, s, match, clojure.string.replace_with.call(null, replacement));
      }
    } else {
      throw [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid match arg: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join(var_args) {
  var args9574 = [];
  var len__8373__auto___9577 = arguments.length;
  var i__8374__auto___9578 = 0;
  while (true) {
    if (i__8374__auto___9578 < len__8373__auto___9577) {
      args9574.push(arguments[i__8374__auto___9578]);
      var G__9579 = i__8374__auto___9578 + 1;
      i__8374__auto___9578 = G__9579;
      continue;
    } else {
    }
    break;
  }
  var G__9576 = args9574.length;
  switch(G__9576) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9574.length)].join(""));
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__9581 = sb.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, coll__$1))].join(""));
      var G__9582 = cljs.core.next.call(null, coll__$1);
      sb = G__9581;
      coll__$1 = G__9582;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__9583 = sb;
      var G__9584 = coll__$2;
      sb = G__9583;
      coll__$1 = G__9584;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__9585 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__9585;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit && 1 < cljs.core.count.call(null, v)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__9589 = cljs.core._EQ__EQ_;
    var expr__9590 = limit;
    if (cljs.core.truth_(pred__9589.call(null, 1, expr__9590))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__9589.call(null, 2, expr__9590))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split(var_args) {
  var args9592 = [];
  var len__8373__auto___9595 = arguments.length;
  var i__8374__auto___9596 = 0;
  while (true) {
    if (i__8374__auto___9596 < len__8373__auto___9595) {
      args9592.push(arguments[i__8374__auto___9596]);
      var G__9597 = i__8374__auto___9596 + 1;
      i__8374__auto___9596 = G__9597;
      continue;
    } else {
    }
    break;
  }
  var G__9594 = args9592.length;
  switch(G__9594) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9592.length)].join(""));
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str.cljs$core$IFn$_invoke$arity$1(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__9599 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__9600 = limit__$1 - 1;
          var G__9601 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__9599;
          limit__$1 = G__9600;
          parts = G__9601;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__9602 = index - 1;
        index = G__9602;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__9603 = index + 1;
      index = G__9603;
      continue;
    }
    break;
  }
};
clojure.string.index_of = function clojure$string$index_of(var_args) {
  var args9604 = [];
  var len__8373__auto___9607 = arguments.length;
  var i__8374__auto___9608 = 0;
  while (true) {
    if (i__8374__auto___9608 < len__8373__auto___9607) {
      args9604.push(arguments[i__8374__auto___9608]);
      var G__9609 = i__8374__auto___9608 + 1;
      i__8374__auto___9608 = G__9609;
      continue;
    } else {
    }
    break;
  }
  var G__9606 = args9604.length;
  switch(G__9606) {
    case 2:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9604.length)].join(""));
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.indexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.indexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$lang$maxFixedArity = 3;
clojure.string.last_index_of = function clojure$string$last_index_of(var_args) {
  var args9611 = [];
  var len__8373__auto___9614 = arguments.length;
  var i__8374__auto___9615 = 0;
  while (true) {
    if (i__8374__auto___9615 < len__8373__auto___9614) {
      args9611.push(arguments[i__8374__auto___9615]);
      var G__9616 = i__8374__auto___9615 + 1;
      i__8374__auto___9615 = G__9616;
      continue;
    } else {
    }
    break;
  }
  var G__9613 = args9611.length;
  switch(G__9613) {
    case 2:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9611.length)].join(""));
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.lastIndexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.lastIndexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
clojure.string.starts_with_QMARK_ = function clojure$string$starts_with_QMARK_(s, substr) {
  return goog.string.startsWith(s, substr);
};
clojure.string.ends_with_QMARK_ = function clojure$string$ends_with_QMARK_(s, substr) {
  return goog.string.endsWith(s, substr);
};
clojure.string.includes_QMARK_ = function clojure$string$includes_QMARK_(s, substr) {
  return goog.string.contains(s, substr);
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function clojure$walk$walk(inner, outer, form) {
  if (cljs.core.list_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.apply.call(null, cljs.core.list, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.seq_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
    } else {
      if (cljs.core.record_QMARK_.call(null, form)) {
        return outer.call(null, cljs.core.reduce.call(null, function(r, x) {
          return cljs.core.conj.call(null, r, inner.call(null, x));
        }, form, form));
      } else {
        if (cljs.core.coll_QMARK_.call(null, form)) {
          return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
        } else {
          return outer.call(null, form);
        }
      }
    }
  }
};
clojure.walk.postwalk = function clojure$walk$postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure.walk.postwalk, f), f, form);
};
clojure.walk.prewalk = function clojure$walk$prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure.walk.prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function clojure$walk$keywordize_keys(m) {
  var f = function(p__9986) {
    var vec__9987 = p__9986;
    var k = cljs.core.nth.call(null, vec__9987, 0, null);
    var v = cljs.core.nth.call(null, vec__9987, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function clojure$walk$stringify_keys(m) {
  var f = function(p__9994) {
    var vec__9995 = p__9994;
    var k = cljs.core.nth.call(null, vec__9995, 0, null);
    var v = cljs.core.nth.call(null, vec__9995, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function clojure$walk$prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function clojure$walk$postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("cljs.spec");
goog.require("cljs.core");
goog.require("goog.object");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("cljs.spec.impl.gen");
goog.require("clojure.string");
cljs.spec.MAX_INT = 9007199254740991;
cljs.spec._STAR_recursion_limit_STAR_ = 4;
cljs.spec._STAR_fspec_iterations_STAR_ = 21;
cljs.spec._STAR_coll_check_limit_STAR_ = 101;
cljs.spec._STAR_coll_error_limit_STAR_ = 20;
cljs.spec.Spec = function() {
};
cljs.spec.conform_STAR_ = function cljs$spec$conform_STAR_(spec, x) {
  if (!(spec == null) && !(spec.cljs$spec$Spec$conform_STAR_$arity$2 == null)) {
    return spec.cljs$spec$Spec$conform_STAR_$arity$2(spec, x);
  } else {
    var x__7928__auto__ = spec == null ? null : spec;
    var m__7929__auto__ = cljs.spec.conform_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, spec, x);
    } else {
      var m__7929__auto____$1 = cljs.spec.conform_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, spec, x);
      } else {
        throw cljs.core.missing_protocol.call(null, "Spec.conform*", spec);
      }
    }
  }
};
cljs.spec.unform_STAR_ = function cljs$spec$unform_STAR_(spec, y) {
  if (!(spec == null) && !(spec.cljs$spec$Spec$unform_STAR_$arity$2 == null)) {
    return spec.cljs$spec$Spec$unform_STAR_$arity$2(spec, y);
  } else {
    var x__7928__auto__ = spec == null ? null : spec;
    var m__7929__auto__ = cljs.spec.unform_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, spec, y);
    } else {
      var m__7929__auto____$1 = cljs.spec.unform_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, spec, y);
      } else {
        throw cljs.core.missing_protocol.call(null, "Spec.unform*", spec);
      }
    }
  }
};
cljs.spec.explain_STAR_ = function cljs$spec$explain_STAR_(spec, path, via, in$, x) {
  if (!(spec == null) && !(spec.cljs$spec$Spec$explain_STAR_$arity$5 == null)) {
    return spec.cljs$spec$Spec$explain_STAR_$arity$5(spec, path, via, in$, x);
  } else {
    var x__7928__auto__ = spec == null ? null : spec;
    var m__7929__auto__ = cljs.spec.explain_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, spec, path, via, in$, x);
    } else {
      var m__7929__auto____$1 = cljs.spec.explain_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, spec, path, via, in$, x);
      } else {
        throw cljs.core.missing_protocol.call(null, "Spec.explain*", spec);
      }
    }
  }
};
cljs.spec.gen_STAR_ = function cljs$spec$gen_STAR_(spec, overrides, path, rmap) {
  if (!(spec == null) && !(spec.cljs$spec$Spec$gen_STAR_$arity$4 == null)) {
    return spec.cljs$spec$Spec$gen_STAR_$arity$4(spec, overrides, path, rmap);
  } else {
    var x__7928__auto__ = spec == null ? null : spec;
    var m__7929__auto__ = cljs.spec.gen_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, spec, overrides, path, rmap);
    } else {
      var m__7929__auto____$1 = cljs.spec.gen_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, spec, overrides, path, rmap);
      } else {
        throw cljs.core.missing_protocol.call(null, "Spec.gen*", spec);
      }
    }
  }
};
cljs.spec.with_gen_STAR_ = function cljs$spec$with_gen_STAR_(spec, gfn) {
  if (!(spec == null) && !(spec.cljs$spec$Spec$with_gen_STAR_$arity$2 == null)) {
    return spec.cljs$spec$Spec$with_gen_STAR_$arity$2(spec, gfn);
  } else {
    var x__7928__auto__ = spec == null ? null : spec;
    var m__7929__auto__ = cljs.spec.with_gen_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, spec, gfn);
    } else {
      var m__7929__auto____$1 = cljs.spec.with_gen_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, spec, gfn);
      } else {
        throw cljs.core.missing_protocol.call(null, "Spec.with-gen*", spec);
      }
    }
  }
};
cljs.spec.describe_STAR_ = function cljs$spec$describe_STAR_(spec) {
  if (!(spec == null) && !(spec.cljs$spec$Spec$describe_STAR_$arity$1 == null)) {
    return spec.cljs$spec$Spec$describe_STAR_$arity$1(spec);
  } else {
    var x__7928__auto__ = spec == null ? null : spec;
    var m__7929__auto__ = cljs.spec.describe_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, spec);
    } else {
      var m__7929__auto____$1 = cljs.spec.describe_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, spec);
      } else {
        throw cljs.core.missing_protocol.call(null, "Spec.describe*", spec);
      }
    }
  }
};
if (typeof cljs.spec.registry_ref !== "undefined") {
} else {
  cljs.spec.registry_ref = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
cljs.spec.deep_resolve = function cljs$spec$deep_resolve(reg, k) {
  var spec = k;
  while (true) {
    if (cljs.core.ident_QMARK_.call(null, spec)) {
      var G__10314 = cljs.core.get.call(null, reg, spec);
      spec = G__10314;
      continue;
    } else {
      return spec;
    }
    break;
  }
};
cljs.spec.reg_resolve = function cljs$spec$reg_resolve(k) {
  if (cljs.core.ident_QMARK_.call(null, k)) {
    var reg = cljs.core.deref.call(null, cljs.spec.registry_ref);
    var spec = cljs.core.get.call(null, reg, k);
    if (!cljs.core.ident_QMARK_.call(null, spec)) {
      return spec;
    } else {
      return cljs.spec.deep_resolve.call(null, reg, spec);
    }
  } else {
    return k;
  }
};
cljs.spec.reg_resolve_BANG_ = function cljs$spec$reg_resolve_BANG_(k) {
  if (cljs.core.ident_QMARK_.call(null, k)) {
    var or__7260__auto__ = cljs.spec.reg_resolve.call(null, k);
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unable to resolve spec: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(k)].join(""));
    }
  } else {
    return k;
  }
};
cljs.spec.spec_QMARK_ = function cljs$spec$spec_QMARK_(x) {
  if (!(x == null) ? false || cljs.core.PROTOCOL_SENTINEL === x.cljs$spec$Spec$ ? true : false : false) {
    return x;
  } else {
    return null;
  }
};
cljs.spec.regex_QMARK_ = function cljs$spec$regex_QMARK_(x) {
  var and__7248__auto__ = (new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204)).cljs$core$IFn$_invoke$arity$1(x);
  if (cljs.core.truth_(and__7248__auto__)) {
    return x;
  } else {
    return and__7248__auto__;
  }
};
cljs.spec.with_name = function cljs$spec$with_name(spec, name) {
  if (cljs.core.ident_QMARK_.call(null, spec)) {
    return spec;
  } else {
    if (cljs.core.truth_(cljs.spec.regex_QMARK_.call(null, spec))) {
      return cljs.core.assoc.call(null, spec, new cljs.core.Keyword("cljs.spec", "name", "cljs.spec/name", -1902005006), name);
    } else {
      if (!(spec == null) ? spec.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === spec.cljs$core$IMeta$ ? true : false : false) {
        return cljs.core.with_meta.call(null, spec, cljs.core.assoc.call(null, cljs.core.meta.call(null, spec), new cljs.core.Keyword("cljs.spec", "name", "cljs.spec/name", -1902005006), name));
      } else {
        return null;
      }
    }
  }
};
cljs.spec.spec_name = function cljs$spec$spec_name(spec) {
  if (cljs.core.ident_QMARK_.call(null, spec)) {
    return spec;
  } else {
    if (cljs.core.truth_(cljs.spec.regex_QMARK_.call(null, spec))) {
      return (new cljs.core.Keyword("cljs.spec", "name", "cljs.spec/name", -1902005006)).cljs$core$IFn$_invoke$arity$1(spec);
    } else {
      if (!(spec == null) ? spec.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === spec.cljs$core$IMeta$ ? true : false : false) {
        return (new cljs.core.Keyword("cljs.spec", "name", "cljs.spec/name", -1902005006)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, spec));
      } else {
        return null;
      }
    }
  }
};
cljs.spec.maybe_spec = function cljs$spec$maybe_spec(spec_or_k) {
  var s = function() {
    var or__7260__auto__ = function() {
      var and__7248__auto__ = cljs.core.ident_QMARK_.call(null, spec_or_k);
      if (and__7248__auto__) {
        return cljs.spec.reg_resolve.call(null, spec_or_k);
      } else {
        return and__7248__auto__;
      }
    }();
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      var or__7260__auto____$1 = cljs.spec.spec_QMARK_.call(null, spec_or_k);
      if (cljs.core.truth_(or__7260__auto____$1)) {
        return or__7260__auto____$1;
      } else {
        var or__7260__auto____$2 = cljs.spec.regex_QMARK_.call(null, spec_or_k);
        if (cljs.core.truth_(or__7260__auto____$2)) {
          return or__7260__auto____$2;
        } else {
          return null;
        }
      }
    }
  }();
  if (cljs.core.truth_(cljs.spec.regex_QMARK_.call(null, s))) {
    return cljs.spec.with_name.call(null, cljs.spec.regex_spec_impl.call(null, s, null), cljs.spec.spec_name.call(null, s));
  } else {
    return s;
  }
};
cljs.spec.the_spec = function cljs$spec$the_spec(spec_or_k) {
  var or__7260__auto__ = cljs.spec.maybe_spec.call(null, spec_or_k);
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    if (cljs.core.ident_QMARK_.call(null, spec_or_k)) {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unable to resolve spec: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(spec_or_k)].join(""));
    } else {
      return null;
    }
  }
};
cljs.spec.Specize = function() {
};
cljs.spec.specize_STAR_ = function cljs$spec$specize_STAR_(var_args) {
  var args10321 = [];
  var len__8373__auto___10324 = arguments.length;
  var i__8374__auto___10325 = 0;
  while (true) {
    if (i__8374__auto___10325 < len__8373__auto___10324) {
      args10321.push(arguments[i__8374__auto___10325]);
      var G__10326 = i__8374__auto___10325 + 1;
      i__8374__auto___10325 = G__10326;
      continue;
    } else {
    }
    break;
  }
  var G__10323 = args10321.length;
  switch(G__10323) {
    case 1:
      return cljs.spec.specize_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.spec.specize_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10321.length)].join(""));
  }
};
cljs.spec.specize_STAR_.cljs$core$IFn$_invoke$arity$1 = function(_) {
  if (!(_ == null) && !(_.cljs$spec$Specize$specize_STAR_$arity$1 == null)) {
    return _.cljs$spec$Specize$specize_STAR_$arity$1(_);
  } else {
    var x__7928__auto__ = _ == null ? null : _;
    var m__7929__auto__ = cljs.spec.specize_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, _);
    } else {
      var m__7929__auto____$1 = cljs.spec.specize_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, _);
      } else {
        throw cljs.core.missing_protocol.call(null, "Specize.specize*", _);
      }
    }
  }
};
cljs.spec.specize_STAR_.cljs$core$IFn$_invoke$arity$2 = function(_, form) {
  if (!(_ == null) && !(_.cljs$spec$Specize$specize_STAR_$arity$2 == null)) {
    return _.cljs$spec$Specize$specize_STAR_$arity$2(_, form);
  } else {
    var x__7928__auto__ = _ == null ? null : _;
    var m__7929__auto__ = cljs.spec.specize_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, _, form);
    } else {
      var m__7929__auto____$1 = cljs.spec.specize_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, _, form);
      } else {
        throw cljs.core.missing_protocol.call(null, "Specize.specize*", _);
      }
    }
  }
};
cljs.spec.specize_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.Keyword.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Keyword.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(k) {
  var k__$1 = this;
  return cljs.spec.specize_STAR_.call(null, cljs.spec.reg_resolve_BANG_.call(null, k__$1));
};
cljs.core.Keyword.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(k, _) {
  var k__$1 = this;
  return cljs.spec.specize_STAR_.call(null, cljs.spec.reg_resolve_BANG_.call(null, k__$1));
};
cljs.core.Symbol.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Symbol.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(s) {
  var s__$1 = this;
  return cljs.spec.specize_STAR_.call(null, cljs.spec.reg_resolve_BANG_.call(null, s__$1));
};
cljs.core.Symbol.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(s, _) {
  var s__$1 = this;
  return cljs.spec.specize_STAR_.call(null, cljs.spec.reg_resolve_BANG_.call(null, s__$1));
};
cljs.spec.Specize["_"] = true;
cljs.spec.specize_STAR_["_"] = function() {
  var G__10328 = null;
  var G__10328__1 = function(o) {
    return cljs.spec.spec_impl.call(null, new cljs.core.Keyword("cljs.spec", "unknown", "cljs.spec/unknown", -1620309582), o, null, null);
  };
  var G__10328__2 = function(o, form) {
    return cljs.spec.spec_impl.call(null, form, o, null, null);
  };
  G__10328 = function(o, form) {
    switch(arguments.length) {
      case 1:
        return G__10328__1.call(this, o);
      case 2:
        return G__10328__2.call(this, o, form);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10328.cljs$core$IFn$_invoke$arity$1 = G__10328__1;
  G__10328.cljs$core$IFn$_invoke$arity$2 = G__10328__2;
  return G__10328;
}();
cljs.spec.specize = function cljs$spec$specize(var_args) {
  var args10329 = [];
  var len__8373__auto___10332 = arguments.length;
  var i__8374__auto___10333 = 0;
  while (true) {
    if (i__8374__auto___10333 < len__8373__auto___10332) {
      args10329.push(arguments[i__8374__auto___10333]);
      var G__10334 = i__8374__auto___10333 + 1;
      i__8374__auto___10333 = G__10334;
      continue;
    } else {
    }
    break;
  }
  var G__10331 = args10329.length;
  switch(G__10331) {
    case 1:
      return cljs.spec.specize.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.spec.specize.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10329.length)].join(""));
  }
};
cljs.spec.specize.cljs$core$IFn$_invoke$arity$1 = function(s) {
  var or__7260__auto__ = cljs.spec.spec_QMARK_.call(null, s);
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    return cljs.spec.specize_STAR_.call(null, s);
  }
};
cljs.spec.specize.cljs$core$IFn$_invoke$arity$2 = function(s, form) {
  var or__7260__auto__ = cljs.spec.spec_QMARK_.call(null, s);
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    return cljs.spec.specize_STAR_.call(null, s, form);
  }
};
cljs.spec.specize.cljs$lang$maxFixedArity = 2;
cljs.spec.invalid_QMARK_ = function cljs$spec$invalid_QMARK_(ret) {
  return cljs.core.keyword_identical_QMARK_.call(null, new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537), ret);
};
cljs.spec.conform = function cljs$spec$conform(spec, x) {
  return cljs.spec.conform_STAR_.call(null, cljs.spec.specize.call(null, spec), x);
};
cljs.spec.unform = function cljs$spec$unform(spec, x) {
  return cljs.spec.unform_STAR_.call(null, cljs.spec.specize.call(null, spec), x);
};
cljs.spec.form = function cljs$spec$form(spec) {
  return cljs.spec.describe_STAR_.call(null, cljs.spec.specize.call(null, spec));
};
cljs.spec.abbrev = function cljs$spec$abbrev(form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return clojure.walk.postwalk.call(null, function(form__$1) {
      if (cljs.core.truth_(function() {
        var and__7248__auto__ = form__$1 instanceof cljs.core.Symbol;
        if (and__7248__auto__) {
          return cljs.core.namespace.call(null, form__$1);
        } else {
          return and__7248__auto__;
        }
      }())) {
        return cljs.core.symbol.call(null, cljs.core.name.call(null, form__$1));
      } else {
        if (cljs.core.seq_QMARK_.call(null, form__$1) && cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "fn", "fn", 465265323, null), cljs.core.first.call(null, form__$1)) && cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "%", "%", -950237169, null)], null), cljs.core.second.call(null, form__$1))) {
          return cljs.core.last.call(null, form__$1);
        } else {
          return form__$1;
        }
      }
    }, form);
  } else {
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = form instanceof cljs.core.Symbol;
      if (and__7248__auto__) {
        return cljs.core.namespace.call(null, form);
      } else {
        return and__7248__auto__;
      }
    }())) {
      return cljs.core.symbol.call(null, cljs.core.name.call(null, form));
    } else {
      return form;
    }
  }
};
cljs.spec.describe = function cljs$spec$describe(spec) {
  return cljs.spec.abbrev.call(null, cljs.spec.form.call(null, spec));
};
cljs.spec.with_gen = function cljs$spec$with_gen(spec, gen_fn) {
  var spec__$1 = cljs.spec.reg_resolve.call(null, spec);
  if (cljs.core.truth_(cljs.spec.regex_QMARK_.call(null, spec__$1))) {
    return cljs.core.assoc.call(null, spec__$1, new cljs.core.Keyword("cljs.spec", "gfn", "cljs.spec/gfn", -432034727), gen_fn);
  } else {
    return cljs.spec.with_gen_STAR_.call(null, cljs.spec.specize.call(null, spec__$1), gen_fn);
  }
};
cljs.spec.explain_data_STAR_ = function cljs$spec$explain_data_STAR_(spec, path, via, in$, x) {
  var temp__4657__auto__ = cljs.spec.explain_STAR_.call(null, cljs.spec.specize.call(null, spec), path, via, in$, x);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var probs = temp__4657__auto__;
    if (cljs.core.empty_QMARK_.call(null, probs)) {
      return null;
    } else {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.spec", "problems", "cljs.spec/problems", 608491678), probs], null);
    }
  } else {
    return null;
  }
};
cljs.spec.explain_data = function cljs$spec$explain_data(spec, x) {
  return cljs.spec.explain_data_STAR_.call(null, spec, cljs.core.PersistentVector.EMPTY, function() {
    var temp__4655__auto__ = cljs.spec.spec_name.call(null, spec);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var name = temp__4655__auto__;
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name], null);
    } else {
      return cljs.core.PersistentVector.EMPTY;
    }
  }(), cljs.core.PersistentVector.EMPTY, x);
};
cljs.spec.explain_printer = function cljs$spec$explain_printer(ed) {
  if (cljs.core.truth_(ed)) {
    return cljs.core.print.call(null, function() {
      var sb__8254__auto__ = new goog.string.StringBuffer;
      var _STAR_print_newline_STAR_10376_10416 = cljs.core._STAR_print_newline_STAR_;
      var _STAR_print_fn_STAR_10377_10417 = cljs.core._STAR_print_fn_STAR_;
      cljs.core._STAR_print_newline_STAR_ = true;
      cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_10376_10416, _STAR_print_fn_STAR_10377_10417, sb__8254__auto__) {
        return function(x__8255__auto__) {
          return sb__8254__auto__.append(x__8255__auto__);
        };
      }(_STAR_print_newline_STAR_10376_10416, _STAR_print_fn_STAR_10377_10417, sb__8254__auto__);
      try {
        var seq__10378_10418 = cljs.core.seq.call(null, (new cljs.core.Keyword("cljs.spec", "problems", "cljs.spec/problems", 608491678)).cljs$core$IFn$_invoke$arity$1(ed));
        var chunk__10379_10419 = null;
        var count__10380_10420 = 0;
        var i__10381_10421 = 0;
        while (true) {
          if (i__10381_10421 < count__10380_10420) {
            var map__10382_10422 = cljs.core._nth.call(null, chunk__10379_10419, i__10381_10421);
            var map__10382_10423__$1 = (!(map__10382_10422 == null) ? map__10382_10422.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10382_10422.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10382_10422) : map__10382_10422;
            var prob_10424 = map__10382_10423__$1;
            var path_10425 = cljs.core.get.call(null, map__10382_10423__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
            var pred_10426 = cljs.core.get.call(null, map__10382_10423__$1, new cljs.core.Keyword(null, "pred", "pred", 1927423397));
            var val_10427 = cljs.core.get.call(null, map__10382_10423__$1, new cljs.core.Keyword(null, "val", "val", 128701612));
            var reason_10428 = cljs.core.get.call(null, map__10382_10423__$1, new cljs.core.Keyword(null, "reason", "reason", -2070751759));
            var via_10429 = cljs.core.get.call(null, map__10382_10423__$1, new cljs.core.Keyword(null, "via", "via", -1904457336));
            var in_10430 = cljs.core.get.call(null, map__10382_10423__$1, new cljs.core.Keyword(null, "in", "in", -1531184865));
            if (cljs.core.empty_QMARK_.call(null, in_10430)) {
            } else {
              cljs.core.print.call(null, "In:", cljs.core.pr_str.call(null, in_10430), "");
            }
            cljs.core.print.call(null, "val: ");
            cljs.core.pr.call(null, val_10427);
            cljs.core.print.call(null, " fails");
            if (cljs.core.empty_QMARK_.call(null, via_10429)) {
            } else {
              cljs.core.print.call(null, " spec:", cljs.core.pr_str.call(null, cljs.core.last.call(null, via_10429)));
            }
            if (cljs.core.empty_QMARK_.call(null, path_10425)) {
            } else {
              cljs.core.print.call(null, " at:", cljs.core.pr_str.call(null, path_10425));
            }
            cljs.core.print.call(null, " predicate: ");
            cljs.core.pr.call(null, cljs.spec.abbrev.call(null, pred_10426));
            if (cljs.core.truth_(reason_10428)) {
              cljs.core.print.call(null, ", ", reason_10428);
            } else {
            }
            var seq__10384_10431 = cljs.core.seq.call(null, prob_10424);
            var chunk__10385_10432 = null;
            var count__10386_10433 = 0;
            var i__10387_10434 = 0;
            while (true) {
              if (i__10387_10434 < count__10386_10433) {
                var vec__10388_10435 = cljs.core._nth.call(null, chunk__10385_10432, i__10387_10434);
                var k_10436 = cljs.core.nth.call(null, vec__10388_10435, 0, null);
                var v_10437 = cljs.core.nth.call(null, vec__10388_10435, 1, null);
                if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), null, new cljs.core.Keyword(null, "pred", "pred", 1927423397), null, new cljs.core.Keyword(null, "via", "via", -1904457336), null, new cljs.core.Keyword(null, "val", "val", 128701612), null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), null, new cljs.core.Keyword(null, "in", "in", -1531184865), null], null), 
                null)).call(null, k_10436))) {
                } else {
                  cljs.core.print.call(null, "\n\t", cljs.core.pr_str.call(null, k_10436), " ");
                  cljs.core.pr.call(null, v_10437);
                }
                var G__10438 = seq__10384_10431;
                var G__10439 = chunk__10385_10432;
                var G__10440 = count__10386_10433;
                var G__10441 = i__10387_10434 + 1;
                seq__10384_10431 = G__10438;
                chunk__10385_10432 = G__10439;
                count__10386_10433 = G__10440;
                i__10387_10434 = G__10441;
                continue;
              } else {
                var temp__4657__auto___10442 = cljs.core.seq.call(null, seq__10384_10431);
                if (temp__4657__auto___10442) {
                  var seq__10384_10443__$1 = temp__4657__auto___10442;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__10384_10443__$1)) {
                    var c__8079__auto___10444 = cljs.core.chunk_first.call(null, seq__10384_10443__$1);
                    var G__10445 = cljs.core.chunk_rest.call(null, seq__10384_10443__$1);
                    var G__10446 = c__8079__auto___10444;
                    var G__10447 = cljs.core.count.call(null, c__8079__auto___10444);
                    var G__10448 = 0;
                    seq__10384_10431 = G__10445;
                    chunk__10385_10432 = G__10446;
                    count__10386_10433 = G__10447;
                    i__10387_10434 = G__10448;
                    continue;
                  } else {
                    var vec__10391_10449 = cljs.core.first.call(null, seq__10384_10443__$1);
                    var k_10450 = cljs.core.nth.call(null, vec__10391_10449, 0, null);
                    var v_10451 = cljs.core.nth.call(null, vec__10391_10449, 1, null);
                    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), null, new cljs.core.Keyword(null, "pred", "pred", 1927423397), null, new cljs.core.Keyword(null, "via", "via", -1904457336), null, new cljs.core.Keyword(null, "val", "val", 128701612), null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), null, new cljs.core.Keyword(null, "in", "in", -1531184865), null], null), 
                    null)).call(null, k_10450))) {
                    } else {
                      cljs.core.print.call(null, "\n\t", cljs.core.pr_str.call(null, k_10450), " ");
                      cljs.core.pr.call(null, v_10451);
                    }
                    var G__10452 = cljs.core.next.call(null, seq__10384_10443__$1);
                    var G__10453 = null;
                    var G__10454 = 0;
                    var G__10455 = 0;
                    seq__10384_10431 = G__10452;
                    chunk__10385_10432 = G__10453;
                    count__10386_10433 = G__10454;
                    i__10387_10434 = G__10455;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            cljs.core.newline.call(null);
            var G__10456 = seq__10378_10418;
            var G__10457 = chunk__10379_10419;
            var G__10458 = count__10380_10420;
            var G__10459 = i__10381_10421 + 1;
            seq__10378_10418 = G__10456;
            chunk__10379_10419 = G__10457;
            count__10380_10420 = G__10458;
            i__10381_10421 = G__10459;
            continue;
          } else {
            var temp__4657__auto___10460 = cljs.core.seq.call(null, seq__10378_10418);
            if (temp__4657__auto___10460) {
              var seq__10378_10461__$1 = temp__4657__auto___10460;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10378_10461__$1)) {
                var c__8079__auto___10462 = cljs.core.chunk_first.call(null, seq__10378_10461__$1);
                var G__10463 = cljs.core.chunk_rest.call(null, seq__10378_10461__$1);
                var G__10464 = c__8079__auto___10462;
                var G__10465 = cljs.core.count.call(null, c__8079__auto___10462);
                var G__10466 = 0;
                seq__10378_10418 = G__10463;
                chunk__10379_10419 = G__10464;
                count__10380_10420 = G__10465;
                i__10381_10421 = G__10466;
                continue;
              } else {
                var map__10394_10467 = cljs.core.first.call(null, seq__10378_10461__$1);
                var map__10394_10468__$1 = (!(map__10394_10467 == null) ? map__10394_10467.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10394_10467.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10394_10467) : map__10394_10467;
                var prob_10469 = map__10394_10468__$1;
                var path_10470 = cljs.core.get.call(null, map__10394_10468__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
                var pred_10471 = cljs.core.get.call(null, map__10394_10468__$1, new cljs.core.Keyword(null, "pred", "pred", 1927423397));
                var val_10472 = cljs.core.get.call(null, map__10394_10468__$1, new cljs.core.Keyword(null, "val", "val", 128701612));
                var reason_10473 = cljs.core.get.call(null, map__10394_10468__$1, new cljs.core.Keyword(null, "reason", "reason", -2070751759));
                var via_10474 = cljs.core.get.call(null, map__10394_10468__$1, new cljs.core.Keyword(null, "via", "via", -1904457336));
                var in_10475 = cljs.core.get.call(null, map__10394_10468__$1, new cljs.core.Keyword(null, "in", "in", -1531184865));
                if (cljs.core.empty_QMARK_.call(null, in_10475)) {
                } else {
                  cljs.core.print.call(null, "In:", cljs.core.pr_str.call(null, in_10475), "");
                }
                cljs.core.print.call(null, "val: ");
                cljs.core.pr.call(null, val_10472);
                cljs.core.print.call(null, " fails");
                if (cljs.core.empty_QMARK_.call(null, via_10474)) {
                } else {
                  cljs.core.print.call(null, " spec:", cljs.core.pr_str.call(null, cljs.core.last.call(null, via_10474)));
                }
                if (cljs.core.empty_QMARK_.call(null, path_10470)) {
                } else {
                  cljs.core.print.call(null, " at:", cljs.core.pr_str.call(null, path_10470));
                }
                cljs.core.print.call(null, " predicate: ");
                cljs.core.pr.call(null, cljs.spec.abbrev.call(null, pred_10471));
                if (cljs.core.truth_(reason_10473)) {
                  cljs.core.print.call(null, ", ", reason_10473);
                } else {
                }
                var seq__10396_10476 = cljs.core.seq.call(null, prob_10469);
                var chunk__10397_10477 = null;
                var count__10398_10478 = 0;
                var i__10399_10479 = 0;
                while (true) {
                  if (i__10399_10479 < count__10398_10478) {
                    var vec__10400_10480 = cljs.core._nth.call(null, chunk__10397_10477, i__10399_10479);
                    var k_10481 = cljs.core.nth.call(null, vec__10400_10480, 0, null);
                    var v_10482 = cljs.core.nth.call(null, vec__10400_10480, 1, null);
                    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), null, new cljs.core.Keyword(null, "pred", "pred", 1927423397), null, new cljs.core.Keyword(null, "via", "via", -1904457336), null, new cljs.core.Keyword(null, "val", "val", 128701612), null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), null, new cljs.core.Keyword(null, "in", "in", -1531184865), null], null), 
                    null)).call(null, k_10481))) {
                    } else {
                      cljs.core.print.call(null, "\n\t", cljs.core.pr_str.call(null, k_10481), " ");
                      cljs.core.pr.call(null, v_10482);
                    }
                    var G__10483 = seq__10396_10476;
                    var G__10484 = chunk__10397_10477;
                    var G__10485 = count__10398_10478;
                    var G__10486 = i__10399_10479 + 1;
                    seq__10396_10476 = G__10483;
                    chunk__10397_10477 = G__10484;
                    count__10398_10478 = G__10485;
                    i__10399_10479 = G__10486;
                    continue;
                  } else {
                    var temp__4657__auto___10487__$1 = cljs.core.seq.call(null, seq__10396_10476);
                    if (temp__4657__auto___10487__$1) {
                      var seq__10396_10488__$1 = temp__4657__auto___10487__$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, seq__10396_10488__$1)) {
                        var c__8079__auto___10489 = cljs.core.chunk_first.call(null, seq__10396_10488__$1);
                        var G__10490 = cljs.core.chunk_rest.call(null, seq__10396_10488__$1);
                        var G__10491 = c__8079__auto___10489;
                        var G__10492 = cljs.core.count.call(null, c__8079__auto___10489);
                        var G__10493 = 0;
                        seq__10396_10476 = G__10490;
                        chunk__10397_10477 = G__10491;
                        count__10398_10478 = G__10492;
                        i__10399_10479 = G__10493;
                        continue;
                      } else {
                        var vec__10403_10494 = cljs.core.first.call(null, seq__10396_10488__$1);
                        var k_10495 = cljs.core.nth.call(null, vec__10403_10494, 0, null);
                        var v_10496 = cljs.core.nth.call(null, vec__10403_10494, 1, null);
                        if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), null, new cljs.core.Keyword(null, "pred", "pred", 1927423397), null, new cljs.core.Keyword(null, "via", "via", -1904457336), null, new cljs.core.Keyword(null, "val", "val", 128701612), null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), null, new cljs.core.Keyword(null, "in", "in", -1531184865), null], 
                        null), null)).call(null, k_10495))) {
                        } else {
                          cljs.core.print.call(null, "\n\t", cljs.core.pr_str.call(null, k_10495), " ");
                          cljs.core.pr.call(null, v_10496);
                        }
                        var G__10497 = cljs.core.next.call(null, seq__10396_10488__$1);
                        var G__10498 = null;
                        var G__10499 = 0;
                        var G__10500 = 0;
                        seq__10396_10476 = G__10497;
                        chunk__10397_10477 = G__10498;
                        count__10398_10478 = G__10499;
                        i__10399_10479 = G__10500;
                        continue;
                      }
                    } else {
                    }
                  }
                  break;
                }
                cljs.core.newline.call(null);
                var G__10501 = cljs.core.next.call(null, seq__10378_10461__$1);
                var G__10502 = null;
                var G__10503 = 0;
                var G__10504 = 0;
                seq__10378_10418 = G__10501;
                chunk__10379_10419 = G__10502;
                count__10380_10420 = G__10503;
                i__10381_10421 = G__10504;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var seq__10406_10505 = cljs.core.seq.call(null, ed);
        var chunk__10407_10506 = null;
        var count__10408_10507 = 0;
        var i__10409_10508 = 0;
        while (true) {
          if (i__10409_10508 < count__10408_10507) {
            var vec__10410_10509 = cljs.core._nth.call(null, chunk__10407_10506, i__10409_10508);
            var k_10510 = cljs.core.nth.call(null, vec__10410_10509, 0, null);
            var v_10511 = cljs.core.nth.call(null, vec__10410_10509, 1, null);
            if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.spec", "problems", "cljs.spec/problems", 608491678), null], null), null)).call(null, k_10510))) {
            } else {
              cljs.core.print.call(null, cljs.core.pr_str.call(null, k_10510), " ");
              cljs.core.pr.call(null, v_10511);
              cljs.core.newline.call(null);
            }
            var G__10512 = seq__10406_10505;
            var G__10513 = chunk__10407_10506;
            var G__10514 = count__10408_10507;
            var G__10515 = i__10409_10508 + 1;
            seq__10406_10505 = G__10512;
            chunk__10407_10506 = G__10513;
            count__10408_10507 = G__10514;
            i__10409_10508 = G__10515;
            continue;
          } else {
            var temp__4657__auto___10516 = cljs.core.seq.call(null, seq__10406_10505);
            if (temp__4657__auto___10516) {
              var seq__10406_10517__$1 = temp__4657__auto___10516;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10406_10517__$1)) {
                var c__8079__auto___10518 = cljs.core.chunk_first.call(null, seq__10406_10517__$1);
                var G__10519 = cljs.core.chunk_rest.call(null, seq__10406_10517__$1);
                var G__10520 = c__8079__auto___10518;
                var G__10521 = cljs.core.count.call(null, c__8079__auto___10518);
                var G__10522 = 0;
                seq__10406_10505 = G__10519;
                chunk__10407_10506 = G__10520;
                count__10408_10507 = G__10521;
                i__10409_10508 = G__10522;
                continue;
              } else {
                var vec__10413_10523 = cljs.core.first.call(null, seq__10406_10517__$1);
                var k_10524 = cljs.core.nth.call(null, vec__10413_10523, 0, null);
                var v_10525 = cljs.core.nth.call(null, vec__10413_10523, 1, null);
                if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.spec", "problems", "cljs.spec/problems", 608491678), null], null), null)).call(null, k_10524))) {
                } else {
                  cljs.core.print.call(null, cljs.core.pr_str.call(null, k_10524), " ");
                  cljs.core.pr.call(null, v_10525);
                  cljs.core.newline.call(null);
                }
                var G__10526 = cljs.core.next.call(null, seq__10406_10517__$1);
                var G__10527 = null;
                var G__10528 = 0;
                var G__10529 = 0;
                seq__10406_10505 = G__10526;
                chunk__10407_10506 = G__10527;
                count__10408_10507 = G__10528;
                i__10409_10508 = G__10529;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10377_10417;
        cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10376_10416;
      }
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8254__auto__)].join("");
    }());
  } else {
    return cljs.core.println.call(null, "Success!");
  }
};
cljs.spec._STAR_explain_out_STAR_ = cljs.spec.explain_printer;
cljs.spec.explain_out = function cljs$spec$explain_out(ed) {
  return cljs.spec._STAR_explain_out_STAR_.call(null, ed);
};
cljs.spec.explain = function cljs$spec$explain(spec, x) {
  return cljs.spec.explain_out.call(null, cljs.spec.explain_data.call(null, spec, x));
};
cljs.spec.explain_str = function cljs$spec$explain_str(spec, x) {
  var sb__8254__auto__ = new goog.string.StringBuffer;
  var _STAR_print_newline_STAR_10532_10534 = cljs.core._STAR_print_newline_STAR_;
  var _STAR_print_fn_STAR_10533_10535 = cljs.core._STAR_print_fn_STAR_;
  cljs.core._STAR_print_newline_STAR_ = true;
  cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_10532_10534, _STAR_print_fn_STAR_10533_10535, sb__8254__auto__) {
    return function(x__8255__auto__) {
      return sb__8254__auto__.append(x__8255__auto__);
    };
  }(_STAR_print_newline_STAR_10532_10534, _STAR_print_fn_STAR_10533_10535, sb__8254__auto__);
  try {
    cljs.spec.explain.call(null, spec, x);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10533_10535;
    cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10532_10534;
  }
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8254__auto__)].join("");
};
cljs.spec.gensub = function cljs$spec$gensub(spec, overrides, path, rmap, form) {
  var spec__$1 = cljs.spec.specize.call(null, spec);
  var temp__4655__auto__ = function() {
    var or__7260__auto__ = function() {
      var temp__4657__auto__ = function() {
        var or__7260__auto__ = cljs.core.get.call(null, overrides, function() {
          var or__7260__auto__ = cljs.spec.spec_name.call(null, spec__$1);
          if (cljs.core.truth_(or__7260__auto__)) {
            return or__7260__auto__;
          } else {
            return spec__$1;
          }
        }());
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return cljs.core.get.call(null, overrides, path);
        }
      }();
      if (cljs.core.truth_(temp__4657__auto__)) {
        var gfn = temp__4657__auto__;
        return gfn.call(null);
      } else {
        return null;
      }
    }();
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return cljs.spec.gen_STAR_.call(null, spec__$1, overrides, path, rmap);
    }
  }();
  if (cljs.core.truth_(temp__4655__auto__)) {
    var g = temp__4655__auto__;
    return cljs.spec.impl.gen.such_that.call(null, function(g, temp__4655__auto__, spec__$1) {
      return function(p1__10536_SHARP_) {
        return cljs.spec.valid_QMARK_.call(null, spec__$1, p1__10536_SHARP_);
      };
    }(g, temp__4655__auto__, spec__$1), g, 100);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unable to construct gen at: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(path), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" for: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.spec.abbrev.call(null, form))].join(""));
  }
};
cljs.spec.gen = function cljs$spec$gen(var_args) {
  var args10537 = [];
  var len__8373__auto___10540 = arguments.length;
  var i__8374__auto___10541 = 0;
  while (true) {
    if (i__8374__auto___10541 < len__8373__auto___10540) {
      args10537.push(arguments[i__8374__auto___10541]);
      var G__10542 = i__8374__auto___10541 + 1;
      i__8374__auto___10541 = G__10542;
      continue;
    } else {
    }
    break;
  }
  var G__10539 = args10537.length;
  switch(G__10539) {
    case 1:
      return cljs.spec.gen.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.spec.gen.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10537.length)].join(""));
  }
};
cljs.spec.gen.cljs$core$IFn$_invoke$arity$1 = function(spec) {
  return cljs.spec.gen.call(null, spec, null);
};
cljs.spec.gen.cljs$core$IFn$_invoke$arity$2 = function(spec, overrides) {
  return cljs.spec.gensub.call(null, spec, overrides, cljs.core.PersistentVector.EMPTY, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.spec", "recursion-limit", "cljs.spec/recursion-limit", -630131086), cljs.spec._STAR_recursion_limit_STAR_], null), spec);
};
cljs.spec.gen.cljs$lang$maxFixedArity = 2;
cljs.spec.def_impl = function cljs$spec$def_impl(k, form, spec) {
  if (cljs.core.truth_(function() {
    var and__7248__auto__ = cljs.core.ident_QMARK_.call(null, k);
    if (and__7248__auto__) {
      return cljs.core.namespace.call(null, k);
    } else {
      return and__7248__auto__;
    }
  }())) {
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("k must be namespaced keyword or resolveable symbol"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(c/and (ident? k) (namespace k))")].join(""));
  }
  var spec__$1 = cljs.core.truth_(function() {
    var or__7260__auto__ = cljs.spec.spec_QMARK_.call(null, spec);
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      var or__7260__auto____$1 = cljs.spec.regex_QMARK_.call(null, spec);
      if (cljs.core.truth_(or__7260__auto____$1)) {
        return or__7260__auto____$1;
      } else {
        return cljs.core.get.call(null, cljs.core.deref.call(null, cljs.spec.registry_ref), spec);
      }
    }
  }()) ? spec : cljs.spec.spec_impl.call(null, form, spec, null, null);
  cljs.core.swap_BANG_.call(null, cljs.spec.registry_ref, cljs.core.assoc, k, cljs.spec.with_name.call(null, spec__$1, k));
  return k;
};
cljs.spec.registry = function cljs$spec$registry() {
  return cljs.core.deref.call(null, cljs.spec.registry_ref);
};
cljs.spec.__GT_sym = function cljs$spec$__GT_sym(x) {
  if (cljs.core.var_QMARK_.call(null, x)) {
    return x.sym;
  } else {
    return x;
  }
};
cljs.spec.get_spec = function cljs$spec$get_spec(k) {
  return cljs.core.get.call(null, cljs.spec.registry.call(null), k instanceof cljs.core.Keyword ? k : cljs.spec.__GT_sym.call(null, k));
};
cljs.spec.macroexpand_check = function cljs$spec$macroexpand_check(v, args) {
  var specs = cljs.spec.get_spec.call(null, v);
  var temp__4657__auto__ = (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(specs);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var arg_spec = temp__4657__auto__;
    if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, cljs.spec.conform.call(null, arg_spec, args)))) {
      var ed = cljs.core.assoc.call(null, cljs.spec.explain_data_STAR_.call(null, arg_spec, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "args", "args", 1315556576)], null), function() {
        var temp__4655__auto__ = cljs.spec.spec_name.call(null, arg_spec);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var name = temp__4655__auto__;
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name], null);
        } else {
          return cljs.core.PersistentVector.EMPTY;
        }
      }(), cljs.core.PersistentVector.EMPTY, args), new cljs.core.Keyword("cljs.spec", "args", "cljs.spec/args", -367019609), args);
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Call to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.spec.__GT_sym.call(null, v)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" did not conform to spec:\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__8254__auto__ = new goog.string.StringBuffer;
        var _STAR_print_newline_STAR_10546_10548 = cljs.core._STAR_print_newline_STAR_;
        var _STAR_print_fn_STAR_10547_10549 = cljs.core._STAR_print_fn_STAR_;
        cljs.core._STAR_print_newline_STAR_ = true;
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_10546_10548, _STAR_print_fn_STAR_10547_10549, sb__8254__auto__, ed, arg_spec, temp__4657__auto__, specs) {
          return function(x__8255__auto__) {
            return sb__8254__auto__.append(x__8255__auto__);
          };
        }(_STAR_print_newline_STAR_10546_10548, _STAR_print_fn_STAR_10547_10549, sb__8254__auto__, ed, arg_spec, temp__4657__auto__, specs);
        try {
          cljs.spec.explain_out.call(null, ed);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10547_10549;
          cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10546_10548;
        }
        return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8254__auto__)].join("");
      }())].join(""));
    } else {
      return null;
    }
  } else {
    return null;
  }
};
cljs.spec.recur_limit_QMARK_ = function cljs$spec$recur_limit_QMARK_(rmap, id, path, k) {
  return cljs.core.get.call(null, rmap, id) > (new cljs.core.Keyword("cljs.spec", "recursion-limit", "cljs.spec/recursion-limit", -630131086)).cljs$core$IFn$_invoke$arity$1(rmap) && cljs.core.contains_QMARK_.call(null, cljs.core.set.call(null, path), k);
};
cljs.spec.inck = function cljs$spec$inck(m, k) {
  return cljs.core.assoc.call(null, m, k, function() {
    var or__7260__auto__ = cljs.core.get.call(null, m, k);
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return 0;
    }
  }() + 1);
};
cljs.spec.dt = function cljs$spec$dt(var_args) {
  var args10550 = [];
  var len__8373__auto___10553 = arguments.length;
  var i__8374__auto___10554 = 0;
  while (true) {
    if (i__8374__auto___10554 < len__8373__auto___10553) {
      args10550.push(arguments[i__8374__auto___10554]);
      var G__10555 = i__8374__auto___10554 + 1;
      i__8374__auto___10554 = G__10555;
      continue;
    } else {
    }
    break;
  }
  var G__10552 = args10550.length;
  switch(G__10552) {
    case 3:
      return cljs.spec.dt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.spec.dt.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10550.length)].join(""));
  }
};
cljs.spec.dt.cljs$core$IFn$_invoke$arity$3 = function(pred, x, form) {
  return cljs.spec.dt.call(null, pred, x, form, null);
};
cljs.spec.dt.cljs$core$IFn$_invoke$arity$4 = function(pred, x, form, cpred_QMARK_) {
  if (cljs.core.truth_(pred)) {
    var temp__4655__auto__ = cljs.spec.the_spec.call(null, pred);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var spec = temp__4655__auto__;
      return cljs.spec.conform.call(null, spec, x);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, pred)) {
        if (cljs.core.truth_(cpred_QMARK_)) {
          return pred.call(null, x);
        } else {
          if (cljs.core.truth_(pred.call(null, x))) {
            return x;
          } else {
            return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
          }
        }
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, form)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is not a fn, expected predicate fn")].join(""));
      }
    }
  } else {
    return x;
  }
};
cljs.spec.dt.cljs$lang$maxFixedArity = 4;
cljs.spec.valid_QMARK_ = function cljs$spec$valid_QMARK_(var_args) {
  var args10557 = [];
  var len__8373__auto___10560 = arguments.length;
  var i__8374__auto___10561 = 0;
  while (true) {
    if (i__8374__auto___10561 < len__8373__auto___10560) {
      args10557.push(arguments[i__8374__auto___10561]);
      var G__10562 = i__8374__auto___10561 + 1;
      i__8374__auto___10561 = G__10562;
      continue;
    } else {
    }
    break;
  }
  var G__10559 = args10557.length;
  switch(G__10559) {
    case 2:
      return cljs.spec.valid_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.spec.valid_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10557.length)].join(""));
  }
};
cljs.spec.valid_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(spec, x) {
  var spec__$1 = cljs.spec.specize.call(null, spec);
  return cljs.core.not.call(null, cljs.spec.invalid_QMARK_.call(null, cljs.spec.conform_STAR_.call(null, spec__$1, x)));
};
cljs.spec.valid_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(spec, x, form) {
  var spec__$1 = cljs.spec.specize.call(null, spec, form);
  return cljs.core.not.call(null, cljs.spec.invalid_QMARK_.call(null, cljs.spec.conform_STAR_.call(null, spec__$1, x)));
};
cljs.spec.valid_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.spec.pvalid_QMARK_ = function cljs$spec$pvalid_QMARK_(var_args) {
  var args10564 = [];
  var len__8373__auto___10567 = arguments.length;
  var i__8374__auto___10568 = 0;
  while (true) {
    if (i__8374__auto___10568 < len__8373__auto___10567) {
      args10564.push(arguments[i__8374__auto___10568]);
      var G__10569 = i__8374__auto___10568 + 1;
      i__8374__auto___10568 = G__10569;
      continue;
    } else {
    }
    break;
  }
  var G__10566 = args10564.length;
  switch(G__10566) {
    case 2:
      return cljs.spec.pvalid_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.spec.pvalid_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10564.length)].join(""));
  }
};
cljs.spec.pvalid_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(pred, x) {
  return cljs.core.not.call(null, cljs.spec.invalid_QMARK_.call(null, cljs.spec.dt.call(null, pred, x, new cljs.core.Keyword("cljs.spec", "unknown", "cljs.spec/unknown", -1620309582))));
};
cljs.spec.pvalid_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(pred, x, form) {
  return cljs.core.not.call(null, cljs.spec.invalid_QMARK_.call(null, cljs.spec.dt.call(null, pred, x, form)));
};
cljs.spec.pvalid_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.spec.explain_1 = function cljs$spec$explain_1(form, pred, path, via, in$, v) {
  var pred__$1 = cljs.spec.maybe_spec.call(null, pred);
  if (cljs.core.truth_(cljs.spec.spec_QMARK_.call(null, pred__$1))) {
    return cljs.spec.explain_STAR_.call(null, pred__$1, path, function() {
      var temp__4655__auto__ = cljs.spec.spec_name.call(null, pred__$1);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var name = temp__4655__auto__;
        return cljs.core.conj.call(null, via, name);
      } else {
        return via;
      }
    }(), in$, v);
  } else {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.spec.abbrev.call(null, form), new cljs.core.Keyword(null, "val", "val", 128701612), v, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null)], null);
  }
};
cljs.spec.map_spec_impl = function cljs$spec$map_spec_impl(p__10574) {
  var map__10614 = p__10574;
  var map__10614__$1 = (!(map__10614 == null) ? map__10614.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10614.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10614) : map__10614;
  var argm = map__10614__$1;
  var opt = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "opt", "opt", -794706369));
  var req_un = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "req-un", "req-un", 1074571008));
  var opt_un = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "opt-un", "opt-un", 883442496));
  var gfn = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "gfn", "gfn", 791517474));
  var pred_exprs = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "pred-exprs", "pred-exprs", 1792271395));
  var keys_pred = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "keys-pred", "keys-pred", 858984739));
  var opt_keys = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "opt-keys", "opt-keys", 1262688261));
  var req_specs = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "req-specs", "req-specs", 553962313));
  var req = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "req", "req", -326448303));
  var req_keys = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "req-keys", "req-keys", 514319221));
  var opt_specs = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "opt-specs", "opt-specs", -384905450));
  var pred_forms = cljs.core.get.call(null, map__10614__$1, new cljs.core.Keyword(null, "pred-forms", "pred-forms", 172611832));
  var k__GT_s = cljs.core.zipmap.call(null, cljs.core.concat.call(null, req_keys, opt_keys), cljs.core.concat.call(null, req_specs, opt_specs));
  var keys__GT_specnames = function(k__GT_s, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
    return function(p1__10571_SHARP_) {
      var or__7260__auto__ = k__GT_s.call(null, p1__10571_SHARP_);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return p1__10571_SHARP_;
      }
    };
  }(k__GT_s, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
  var id = cljs.core.random_uuid.call(null);
  if (typeof cljs.spec.t_cljs$spec10616 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec10616 = function(keys__GT_specnames, opt, req_un, opt_un, p__10574, map__10614, gfn, pred_exprs, keys_pred, argm, opt_keys, req_specs, req, id, req_keys, opt_specs, k__GT_s, pred_forms, meta10617) {
      this.keys__GT_specnames = keys__GT_specnames;
      this.opt = opt;
      this.req_un = req_un;
      this.opt_un = opt_un;
      this.p__10574 = p__10574;
      this.map__10614 = map__10614;
      this.gfn = gfn;
      this.pred_exprs = pred_exprs;
      this.keys_pred = keys_pred;
      this.argm = argm;
      this.opt_keys = opt_keys;
      this.req_specs = req_specs;
      this.req = req;
      this.id = id;
      this.req_keys = req_keys;
      this.opt_specs = opt_specs;
      this.k__GT_s = k__GT_s;
      this.pred_forms = pred_forms;
      this.meta10617 = meta10617;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec10616.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(_10618, meta10617__$1) {
        var self__ = this;
        var _10618__$1 = this;
        return new cljs.spec.t_cljs$spec10616(self__.keys__GT_specnames, self__.opt, self__.req_un, self__.opt_un, self__.p__10574, self__.map__10614, self__.gfn, self__.pred_exprs, self__.keys_pred, self__.argm, self__.opt_keys, self__.req_specs, self__.req, self__.id, self__.req_keys, self__.opt_specs, self__.k__GT_s, self__.pred_forms, meta10617__$1);
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$core$IMeta$_meta$arity$1 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(_10618) {
        var self__ = this;
        var _10618__$1 = this;
        return self__.meta10617;
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(_, m) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.keys_pred.call(null, m))) {
          var reg = cljs.spec.registry.call(null);
          var ret = m;
          var G__10625 = m;
          var vec__10626 = G__10625;
          var seq__10627 = cljs.core.seq.call(null, vec__10626);
          var first__10628 = cljs.core.first.call(null, seq__10627);
          var seq__10627__$1 = cljs.core.next.call(null, seq__10627);
          var vec__10629 = first__10628;
          var k = cljs.core.nth.call(null, vec__10629, 0, null);
          var v = cljs.core.nth.call(null, vec__10629, 1, null);
          var ks = seq__10627__$1;
          var keys = vec__10626;
          var ret__$1 = ret;
          var G__10625__$1 = G__10625;
          while (true) {
            var ret__$2 = ret__$1;
            var vec__10632 = G__10625__$1;
            var seq__10633 = cljs.core.seq.call(null, vec__10632);
            var first__10634 = cljs.core.first.call(null, seq__10633);
            var seq__10633__$1 = cljs.core.next.call(null, seq__10633);
            var vec__10635 = first__10634;
            var k__$1 = cljs.core.nth.call(null, vec__10635, 0, null);
            var v__$1 = cljs.core.nth.call(null, vec__10635, 1, null);
            var ks__$1 = seq__10633__$1;
            var keys__$1 = vec__10632;
            if (cljs.core.truth_(keys__$1)) {
              var sname = self__.keys__GT_specnames.call(null, k__$1);
              var temp__4655__auto__ = cljs.core.get.call(null, reg, sname);
              if (cljs.core.truth_(temp__4655__auto__)) {
                var s = temp__4655__auto__;
                var cv = cljs.spec.conform.call(null, s, v__$1);
                if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, cv))) {
                  return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
                } else {
                  var G__10653 = cv === v__$1 ? ret__$2 : cljs.core.assoc.call(null, ret__$2, k__$1, cv);
                  var G__10654 = ks__$1;
                  ret__$1 = G__10653;
                  G__10625__$1 = G__10654;
                  continue;
                }
              } else {
                var G__10655 = ret__$2;
                var G__10656 = ks__$1;
                ret__$1 = G__10655;
                G__10625__$1 = G__10656;
                continue;
              }
            } else {
              return ret__$2;
            }
            break;
          }
        } else {
          return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
        }
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(_, m) {
        var self__ = this;
        var ___$1 = this;
        var reg = cljs.spec.registry.call(null);
        var ret = m;
        var G__10641 = cljs.core.keys.call(null, m);
        var vec__10642 = G__10641;
        var seq__10643 = cljs.core.seq.call(null, vec__10642);
        var first__10644 = cljs.core.first.call(null, seq__10643);
        var seq__10643__$1 = cljs.core.next.call(null, seq__10643);
        var k = first__10644;
        var ks = seq__10643__$1;
        var keys = vec__10642;
        var ret__$1 = ret;
        var G__10641__$1 = G__10641;
        while (true) {
          var ret__$2 = ret__$1;
          var vec__10645 = G__10641__$1;
          var seq__10646 = cljs.core.seq.call(null, vec__10645);
          var first__10647 = cljs.core.first.call(null, seq__10646);
          var seq__10646__$1 = cljs.core.next.call(null, seq__10646);
          var k__$1 = first__10647;
          var ks__$1 = seq__10646__$1;
          var keys__$1 = vec__10645;
          if (cljs.core.truth_(keys__$1)) {
            if (cljs.core.contains_QMARK_.call(null, reg, self__.keys__GT_specnames.call(null, k__$1))) {
              var cv = cljs.core.get.call(null, m, k__$1);
              var v = cljs.spec.unform.call(null, self__.keys__GT_specnames.call(null, k__$1), cv);
              var G__10657 = cv === v ? ret__$2 : cljs.core.assoc.call(null, ret__$2, k__$1, v);
              var G__10658 = ks__$1;
              ret__$1 = G__10657;
              G__10641__$1 = G__10658;
              continue;
            } else {
              var G__10659 = ret__$2;
              var G__10660 = ks__$1;
              ret__$1 = G__10659;
              G__10641__$1 = G__10660;
              continue;
            }
          } else {
            return ret__$2;
          }
          break;
        }
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(_, path, via, in$, x) {
        var self__ = this;
        var ___$1 = this;
        if (!cljs.core.map_QMARK_.call(null, x)) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], 
          null)], null);
        } else {
          var reg = cljs.spec.registry.call(null);
          return cljs.core.apply.call(null, cljs.core.concat, function() {
            var temp__4657__auto__ = cljs.core.seq.call(null, cljs.core.keep.call(null, cljs.core.identity, cljs.core.map.call(null, function(reg, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
              return function(pred, form) {
                if (cljs.core.truth_(pred.call(null, x))) {
                  return null;
                } else {
                  return cljs.spec.abbrev.call(null, form);
                }
              };
            }(reg, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms), self__.pred_exprs, self__.pred_forms)));
            if (temp__4657__auto__) {
              var probs = temp__4657__auto__;
              return cljs.core.map.call(null, function(probs, temp__4657__auto__, reg, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
                return function(p1__10572_SHARP_) {
                  return cljs.core.identity.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), p1__10572_SHARP_, new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null));
                };
              }(probs, temp__4657__auto__, reg, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms), probs);
            } else {
              return null;
            }
          }(), cljs.core.map.call(null, function(reg, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
            return function(p__10648) {
              var vec__10649 = p__10648;
              var k = cljs.core.nth.call(null, vec__10649, 0, null);
              var v = cljs.core.nth.call(null, vec__10649, 1, null);
              if (cljs.core.truth_(function() {
                var or__7260__auto__ = !cljs.core.contains_QMARK_.call(null, reg, self__.keys__GT_specnames.call(null, k));
                if (or__7260__auto__) {
                  return or__7260__auto__;
                } else {
                  return cljs.spec.pvalid_QMARK_.call(null, self__.keys__GT_specnames.call(null, k), v, k);
                }
              }())) {
                return null;
              } else {
                return cljs.spec.explain_1.call(null, self__.keys__GT_specnames.call(null, k), self__.keys__GT_specnames.call(null, k), cljs.core.conj.call(null, path, k), via, cljs.core.conj.call(null, in$, k), v);
              }
            };
          }(reg, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms), cljs.core.seq.call(null, x)));
        }
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(_, overrides, path, rmap) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.gfn)) {
          return self__.gfn.call(null);
        } else {
          var rmap__$1 = cljs.spec.inck.call(null, rmap, self__.id);
          var gen = function(rmap__$1, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
            return function(k, s) {
              return cljs.spec.gensub.call(null, s, overrides, cljs.core.conj.call(null, path, k), rmap__$1, k);
            };
          }(rmap__$1, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
          var ogen = function(rmap__$1, gen, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
            return function(k, s) {
              if (cljs.core.truth_(cljs.spec.recur_limit_QMARK_.call(null, rmap__$1, self__.id, path, k))) {
                return null;
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.spec.impl.gen.delay_impl.call(null, new cljs.core.Delay(function(rmap__$1, gen, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
                  return function() {
                    return cljs.spec.gensub.call(null, s, overrides, cljs.core.conj.call(null, path, k), rmap__$1, k);
                  };
                }(rmap__$1, gen, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms), null))], null);
              }
            };
          }(rmap__$1, gen, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
          var req_gens = cljs.core.map.call(null, gen, self__.req_keys, self__.req_specs);
          var opt_gens = cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, ogen, self__.opt_keys, self__.opt_specs));
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.concat.call(null, req_gens, opt_gens))) {
            var reqs = cljs.core.zipmap.call(null, self__.req_keys, req_gens);
            var opts = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, opt_gens);
            return cljs.spec.impl.gen.bind.call(null, cljs.spec.impl.gen.choose.call(null, 0, cljs.core.count.call(null, opts)), function(reqs, opts, rmap__$1, gen, ogen, req_gens, opt_gens, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
              return function(p1__10573_SHARP_) {
                var args = cljs.core.concat.call(null, cljs.core.seq.call(null, reqs), cljs.core.seq.call(null, opts) ? cljs.core.shuffle.call(null, cljs.core.seq.call(null, opts)) : null);
                return cljs.core.apply.call(null, cljs.spec.impl.gen.hash_map, cljs.core.apply.call(null, cljs.core.concat, cljs.core.take.call(null, p1__10573_SHARP_ + cljs.core.count.call(null, reqs), args)));
              };
            }(reqs, opts, rmap__$1, gen, ogen, req_gens, opt_gens, ___$1, k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms));
          } else {
            return null;
          }
        }
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(_, gfn__$1) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.map_spec_impl.call(null, cljs.core.assoc.call(null, self__.argm, new cljs.core.Keyword(null, "gfn", "gfn", 791517474), gfn__$1));
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.cons.call(null, new cljs.core.Symbol("cljs.spec", "keys", "cljs.spec/keys", -927379584, null), function() {
          var G__10652 = cljs.core.PersistentVector.EMPTY;
          var G__10652__$1 = cljs.core.truth_(self__.req) ? cljs.core.conj.call(null, G__10652, new cljs.core.Keyword(null, "req", "req", -326448303), self__.req) : G__10652;
          var G__10652__$2 = cljs.core.truth_(self__.opt) ? cljs.core.conj.call(null, G__10652__$1, new cljs.core.Keyword(null, "opt", "opt", -794706369), self__.opt) : G__10652__$1;
          var G__10652__$3 = cljs.core.truth_(self__.req_un) ? cljs.core.conj.call(null, G__10652__$2, new cljs.core.Keyword(null, "req-un", "req-un", 1074571008), self__.req_un) : G__10652__$2;
          if (cljs.core.truth_(self__.opt_un)) {
            return cljs.core.conj.call(null, G__10652__$3, new cljs.core.Keyword(null, "opt-un", "opt-un", 883442496), self__.opt_un);
          } else {
            return G__10652__$3;
          }
        }());
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.getBasis = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function() {
        return new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "keys-\x3especnames", "keys-\x3especnames", 1791294693, null), new cljs.core.Symbol(null, "opt", "opt", 845825158, null), new cljs.core.Symbol(null, "req-un", "req-un", -1579864761, null), new cljs.core.Symbol(null, "opt-un", "opt-un", -1770993273, null), new cljs.core.Symbol(null, "p__10574", "p__10574", -936839801, null), new cljs.core.Symbol(null, "map__10614", "map__10614", 
        -1653816919, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "pred-exprs", "pred-exprs", -862164374, null), new cljs.core.Symbol(null, "keys-pred", "keys-pred", -1795451030, null), new cljs.core.Symbol(null, "argm", "argm", -181546357, null), new cljs.core.Symbol(null, "opt-keys", "opt-keys", -1391747508, null), new cljs.core.Symbol(null, "req-specs", "req-specs", -2100473456, null), new cljs.core.Symbol(null, "req", "req", 1314083224, null), 
        new cljs.core.Symbol(null, "id", "id", 252129435, null), new cljs.core.Symbol(null, "req-keys", "req-keys", -2140116548, null), new cljs.core.Symbol(null, "opt-specs", "opt-specs", 1255626077, null), new cljs.core.Symbol(null, "k-\x3es", "k-\x3es", -1685112801, null), new cljs.core.Symbol(null, "pred-forms", "pred-forms", 1813143359, null), new cljs.core.Symbol(null, "meta10617", "meta10617", 681815838, null)], null);
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.t_cljs$spec10616.cljs$lang$type = true;
    cljs.spec.t_cljs$spec10616.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec10616";
    cljs.spec.t_cljs$spec10616.cljs$lang$ctorPrWriter = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec10616");
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
    cljs.spec.__GT_t_cljs$spec10616 = function(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms) {
      return function cljs$spec$map_spec_impl_$___GT_t_cljs$spec10616(keys__GT_specnames__$1, opt__$1, req_un__$1, opt_un__$1, p__10574__$1, map__10614__$2, gfn__$1, pred_exprs__$1, keys_pred__$1, argm__$1, opt_keys__$1, req_specs__$1, req__$1, id__$1, req_keys__$1, opt_specs__$1, k__GT_s__$1, pred_forms__$1, meta10617) {
        return new cljs.spec.t_cljs$spec10616(keys__GT_specnames__$1, opt__$1, req_un__$1, opt_un__$1, p__10574__$1, map__10614__$2, gfn__$1, pred_exprs__$1, keys_pred__$1, argm__$1, opt_keys__$1, req_specs__$1, req__$1, id__$1, req_keys__$1, opt_specs__$1, k__GT_s__$1, pred_forms__$1, meta10617);
      };
    }(k__GT_s, keys__GT_specnames, id, map__10614, map__10614__$1, argm, opt, req_un, opt_un, gfn, pred_exprs, keys_pred, opt_keys, req_specs, req, req_keys, opt_specs, pred_forms);
  }
  return new cljs.spec.t_cljs$spec10616(keys__GT_specnames, opt, req_un, opt_un, p__10574, map__10614__$1, gfn, pred_exprs, keys_pred, argm, opt_keys, req_specs, req, id, req_keys, opt_specs, k__GT_s, pred_forms, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.spec_impl = function cljs$spec$spec_impl(var_args) {
  var args10661 = [];
  var len__8373__auto___10669 = arguments.length;
  var i__8374__auto___10670 = 0;
  while (true) {
    if (i__8374__auto___10670 < len__8373__auto___10669) {
      args10661.push(arguments[i__8374__auto___10670]);
      var G__10671 = i__8374__auto___10670 + 1;
      i__8374__auto___10670 = G__10671;
      continue;
    } else {
    }
    break;
  }
  var G__10663 = args10661.length;
  switch(G__10663) {
    case 4:
      return cljs.spec.spec_impl.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.spec.spec_impl.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10661.length)].join(""));
  }
};
cljs.spec.spec_impl.cljs$core$IFn$_invoke$arity$4 = function(form, pred, gfn, cpred_QMARK_) {
  return cljs.spec.spec_impl.call(null, form, pred, gfn, cpred_QMARK_, null);
};
cljs.spec.spec_impl.cljs$core$IFn$_invoke$arity$5 = function(form, pred, gfn, cpred_QMARK_, unc) {
  if (cljs.core.truth_(cljs.spec.spec_QMARK_.call(null, pred))) {
    var G__10664 = pred;
    if (cljs.core.truth_(gfn)) {
      return cljs.spec.with_gen.call(null, G__10664, gfn);
    } else {
      return G__10664;
    }
  } else {
    if (cljs.core.truth_(cljs.spec.regex_QMARK_.call(null, pred))) {
      return cljs.spec.regex_spec_impl.call(null, pred, gfn);
    } else {
      if (cljs.core.ident_QMARK_.call(null, pred)) {
        var G__10665 = cljs.spec.the_spec.call(null, pred);
        if (cljs.core.truth_(gfn)) {
          return cljs.spec.with_gen.call(null, G__10665, gfn);
        } else {
          return G__10665;
        }
      } else {
        if (typeof cljs.spec.t_cljs$spec10666 !== "undefined") {
        } else {
          cljs.spec.t_cljs$spec10666 = function(form, pred, gfn, cpred_QMARK_, unc, meta10667) {
            this.form = form;
            this.pred = pred;
            this.gfn = gfn;
            this.cpred_QMARK_ = cpred_QMARK_;
            this.unc = unc;
            this.meta10667 = meta10667;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10668, meta10667__$1) {
            var self__ = this;
            var _10668__$1 = this;
            return new cljs.spec.t_cljs$spec10666(self__.form, self__.pred, self__.gfn, self__.cpred_QMARK_, self__.unc, meta10667__$1);
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10668) {
            var self__ = this;
            var _10668__$1 = this;
            return self__.meta10667;
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(s) {
            var self__ = this;
            var s__$1 = this;
            return s__$1;
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(s, _) {
            var self__ = this;
            var s__$1 = this;
            return s__$1;
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(_, x) {
            var self__ = this;
            var ___$1 = this;
            var ret = self__.pred.call(null, x);
            if (cljs.core.truth_(self__.cpred_QMARK_)) {
              return ret;
            } else {
              if (cljs.core.truth_(ret)) {
                return x;
              } else {
                return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
              }
            }
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(_, x) {
            var self__ = this;
            var ___$1 = this;
            if (cljs.core.truth_(self__.cpred_QMARK_)) {
              if (cljs.core.truth_(self__.unc)) {
                return self__.unc.call(null, x);
              } else {
                throw new Error("no unform fn for conformer");
              }
            } else {
              return x;
            }
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(_, path, via, in$, x) {
            var self__ = this;
            var ___$1 = this;
            if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, cljs.spec.dt.call(null, self__.pred, x, self__.form, self__.cpred_QMARK_)))) {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.spec.abbrev.call(null, self__.form), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null)], null);
            } else {
              return null;
            }
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(_, ___$1, ___$2, ___$3) {
            var self__ = this;
            var ___$4 = this;
            if (cljs.core.truth_(self__.gfn)) {
              return self__.gfn.call(null);
            } else {
              return cljs.spec.impl.gen.gen_for_pred.call(null, self__.pred);
            }
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(_, gfn__$1) {
            var self__ = this;
            var ___$1 = this;
            return cljs.spec.spec_impl.call(null, self__.form, self__.pred, gfn__$1, self__.cpred_QMARK_, self__.unc);
          };
          cljs.spec.t_cljs$spec10666.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.form;
          };
          cljs.spec.t_cljs$spec10666.getBasis = function() {
            return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "form", "form", 16469056, null), new cljs.core.Symbol(null, "pred", "pred", -727012372, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "cpred?", "cpred?", 35589515, null), new cljs.core.Symbol(null, "unc", "unc", -465250751, null), new cljs.core.Symbol(null, "meta10667", "meta10667", 990084141, null)], null);
          };
          cljs.spec.t_cljs$spec10666.cljs$lang$type = true;
          cljs.spec.t_cljs$spec10666.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec10666";
          cljs.spec.t_cljs$spec10666.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
            return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec10666");
          };
          cljs.spec.__GT_t_cljs$spec10666 = function cljs$spec$__GT_t_cljs$spec10666(form__$1, pred__$1, gfn__$1, cpred_QMARK___$1, unc__$1, meta10667) {
            return new cljs.spec.t_cljs$spec10666(form__$1, pred__$1, gfn__$1, cpred_QMARK___$1, unc__$1, meta10667);
          };
        }
        return new cljs.spec.t_cljs$spec10666(form, pred, gfn, cpred_QMARK_, unc, cljs.core.PersistentArrayMap.EMPTY);
      }
    }
  }
};
cljs.spec.spec_impl.cljs$lang$maxFixedArity = 5;
cljs.spec.multi_spec_impl = function cljs$spec$multi_spec_impl(var_args) {
  var args10678 = [];
  var len__8373__auto___10692 = arguments.length;
  var i__8374__auto___10693 = 0;
  while (true) {
    if (i__8374__auto___10693 < len__8373__auto___10692) {
      args10678.push(arguments[i__8374__auto___10693]);
      var G__10694 = i__8374__auto___10693 + 1;
      i__8374__auto___10693 = G__10694;
      continue;
    } else {
    }
    break;
  }
  var G__10680 = args10678.length;
  switch(G__10680) {
    case 3:
      return cljs.spec.multi_spec_impl.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.spec.multi_spec_impl.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10678.length)].join(""));
  }
};
cljs.spec.multi_spec_impl.cljs$core$IFn$_invoke$arity$3 = function(form, mmvar, retag) {
  return cljs.spec.multi_spec_impl.call(null, form, mmvar, retag, null);
};
cljs.spec.multi_spec_impl.cljs$core$IFn$_invoke$arity$4 = function(form, mmvar, retag, gfn) {
  var id = cljs.core.random_uuid.call(null);
  var predx = function(id) {
    return function(p1__10673_SHARP_) {
      var mm = cljs.core.deref.call(null, mmvar);
      var and__7248__auto__ = cljs.core._get_method.call(null, mm, cljs.core._dispatch_fn.call(null, mm).call(null, p1__10673_SHARP_));
      if (cljs.core.truth_(and__7248__auto__)) {
        return mm.call(null, p1__10673_SHARP_);
      } else {
        return and__7248__auto__;
      }
    };
  }(id);
  var dval = function(id, predx) {
    return function(p1__10674_SHARP_) {
      return cljs.core._dispatch_fn.call(null, cljs.core.deref.call(null, mmvar)).call(null, p1__10674_SHARP_);
    };
  }(id, predx);
  var tag = retag instanceof cljs.core.Keyword ? function(id, predx, dval) {
    return function(p1__10675_SHARP_, p2__10676_SHARP_) {
      return cljs.core.assoc.call(null, p1__10675_SHARP_, retag, p2__10676_SHARP_);
    };
  }(id, predx, dval) : retag;
  if (typeof cljs.spec.t_cljs$spec10681 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec10681 = function(form, mmvar, retag, gfn, id, predx, dval, tag, meta10682) {
      this.form = form;
      this.mmvar = mmvar;
      this.retag = retag;
      this.gfn = gfn;
      this.id = id;
      this.predx = predx;
      this.dval = dval;
      this.tag = tag;
      this.meta10682 = meta10682;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec10681.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(id, predx, dval, tag) {
      return function(_10683, meta10682__$1) {
        var self__ = this;
        var _10683__$1 = this;
        return new cljs.spec.t_cljs$spec10681(self__.form, self__.mmvar, self__.retag, self__.gfn, self__.id, self__.predx, self__.dval, self__.tag, meta10682__$1);
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$core$IMeta$_meta$arity$1 = function(id, predx, dval, tag) {
      return function(_10683) {
        var self__ = this;
        var _10683__$1 = this;
        return self__.meta10682;
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(id, predx, dval, tag) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(id, predx, dval, tag) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(id, predx, dval, tag) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        var temp__4655__auto__ = self__.predx.call(null, x);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var pred = temp__4655__auto__;
          return cljs.spec.dt.call(null, pred, x, self__.form);
        } else {
          return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
        }
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(id, predx, dval, tag) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        var temp__4655__auto__ = self__.predx.call(null, x);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var pred = temp__4655__auto__;
          return cljs.spec.unform.call(null, pred, x);
        } else {
          throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No method of: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.form), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" for dispatch value: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.dval.call(null, x))].join(""));
        }
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(id, predx, dval, tag) {
      return function(_, path, via, in$, x) {
        var self__ = this;
        var ___$1 = this;
        var dv = self__.dval.call(null, x);
        var path__$1 = cljs.core.conj.call(null, path, dv);
        var temp__4655__auto__ = self__.predx.call(null, x);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var pred = temp__4655__auto__;
          return cljs.spec.explain_1.call(null, self__.form, pred, path__$1, via, in$, x);
        } else {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), path__$1, new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.spec.abbrev.call(null, self__.form), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "reason", "reason", -2070751759), "no method", new cljs.core.Keyword(null, "via", "via", -1904457336), via, 
          new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null)], null);
        }
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(id, predx, dval, tag) {
      return function(_, overrides, path, rmap) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.gfn)) {
          return self__.gfn.call(null);
        } else {
          var gen = function(___$1, id, predx, dval, tag) {
            return function(p__10684) {
              var vec__10685 = p__10684;
              var k = cljs.core.nth.call(null, vec__10685, 0, null);
              var f = cljs.core.nth.call(null, vec__10685, 1, null);
              var p = f.call(null, null);
              var rmap__$1 = cljs.spec.inck.call(null, rmap, self__.id);
              if (cljs.core.truth_(cljs.spec.recur_limit_QMARK_.call(null, rmap__$1, self__.id, path, k))) {
                return null;
              } else {
                return cljs.spec.impl.gen.delay_impl.call(null, new cljs.core.Delay(function(rmap__$1, p, vec__10685, k, f, ___$1, id, predx, dval, tag) {
                  return function() {
                    return cljs.spec.impl.gen.fmap.call(null, function(rmap__$1, p, vec__10685, k, f, ___$1, id, predx, dval, tag) {
                      return function(p1__10677_SHARP_) {
                        return self__.tag.call(null, p1__10677_SHARP_, k);
                      };
                    }(rmap__$1, p, vec__10685, k, f, ___$1, id, predx, dval, tag), cljs.spec.gensub.call(null, p, overrides, cljs.core.conj.call(null, path, k), rmap__$1, cljs.core._conj.call(null, function() {
                      var x__8102__auto__ = self__.form;
                      return cljs.core._conj.call(null, function() {
                        var x__8102__auto____$1 = k;
                        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto____$1);
                      }(), x__8102__auto__);
                    }(), new cljs.core.Symbol(null, "method", "method", 1696235119, null))));
                  };
                }(rmap__$1, p, vec__10685, k, f, ___$1, id, predx, dval, tag), null));
              }
            };
          }(___$1, id, predx, dval, tag);
          var gs = cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, gen, cljs.core.remove.call(null, function(gen, ___$1, id, predx, dval, tag) {
            return function(p__10688) {
              var vec__10689 = p__10688;
              var k = cljs.core.nth.call(null, vec__10689, 0, null);
              return cljs.spec.invalid_QMARK_.call(null, k);
            };
          }(gen, ___$1, id, predx, dval, tag), cljs.core.methods$.call(null, cljs.core.deref.call(null, self__.mmvar)))));
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, gs)) {
            return cljs.spec.impl.gen.one_of.call(null, gs);
          } else {
            return null;
          }
        }
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(id, predx, dval, tag) {
      return function(_, gfn__$1) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.multi_spec_impl.call(null, self__.form, self__.mmvar, self__.retag, gfn__$1);
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(id, predx, dval, tag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "multi-spec", "cljs.spec/multi-spec", -2053297814, null)), function() {
          var x__8102__auto__ = self__.form;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }(), function() {
          var x__8102__auto__ = self__.retag;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }())));
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.getBasis = function(id, predx, dval, tag) {
      return function() {
        return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "form", "form", 16469056, null), new cljs.core.Symbol(null, "mmvar", "mmvar", -1714325675, null), new cljs.core.Symbol(null, "retag", "retag", 528972725, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "id", "id", 252129435, null), new cljs.core.Symbol(null, "predx", "predx", 2063470948, null), new cljs.core.Symbol(null, "dval", 
        "dval", 835211877, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "meta10682", "meta10682", 670581643, null)], null);
      };
    }(id, predx, dval, tag);
    cljs.spec.t_cljs$spec10681.cljs$lang$type = true;
    cljs.spec.t_cljs$spec10681.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec10681";
    cljs.spec.t_cljs$spec10681.cljs$lang$ctorPrWriter = function(id, predx, dval, tag) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec10681");
      };
    }(id, predx, dval, tag);
    cljs.spec.__GT_t_cljs$spec10681 = function(id, predx, dval, tag) {
      return function cljs$spec$__GT_t_cljs$spec10681(form__$1, mmvar__$1, retag__$1, gfn__$1, id__$1, predx__$1, dval__$1, tag__$1, meta10682) {
        return new cljs.spec.t_cljs$spec10681(form__$1, mmvar__$1, retag__$1, gfn__$1, id__$1, predx__$1, dval__$1, tag__$1, meta10682);
      };
    }(id, predx, dval, tag);
  }
  return new cljs.spec.t_cljs$spec10681(form, mmvar, retag, gfn, id, predx, dval, tag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.multi_spec_impl.cljs$lang$maxFixedArity = 4;
cljs.spec.tuple_impl = function cljs$spec$tuple_impl(var_args) {
  var args10696 = [];
  var len__8373__auto___10702 = arguments.length;
  var i__8374__auto___10703 = 0;
  while (true) {
    if (i__8374__auto___10703 < len__8373__auto___10702) {
      args10696.push(arguments[i__8374__auto___10703]);
      var G__10704 = i__8374__auto___10703 + 1;
      i__8374__auto___10703 = G__10704;
      continue;
    } else {
    }
    break;
  }
  var G__10698 = args10696.length;
  switch(G__10698) {
    case 2:
      return cljs.spec.tuple_impl.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.spec.tuple_impl.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10696.length)].join(""));
  }
};
cljs.spec.tuple_impl.cljs$core$IFn$_invoke$arity$2 = function(forms, preds) {
  return cljs.spec.tuple_impl.call(null, forms, preds, null);
};
cljs.spec.tuple_impl.cljs$core$IFn$_invoke$arity$3 = function(forms, preds, gfn) {
  var specs = new cljs.core.Delay(function() {
    return cljs.core.mapv.call(null, cljs.spec.specize, preds, forms);
  }, null);
  var cnt = cljs.core.count.call(null, preds);
  if (typeof cljs.spec.t_cljs$spec10699 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec10699 = function(forms, preds, gfn, specs, cnt, meta10700) {
      this.forms = forms;
      this.preds = preds;
      this.gfn = gfn;
      this.specs = specs;
      this.cnt = cnt;
      this.meta10700 = meta10700;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec10699.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(specs, cnt) {
      return function(_10701, meta10700__$1) {
        var self__ = this;
        var _10701__$1 = this;
        return new cljs.spec.t_cljs$spec10699(self__.forms, self__.preds, self__.gfn, self__.specs, self__.cnt, meta10700__$1);
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$core$IMeta$_meta$arity$1 = function(specs, cnt) {
      return function(_10701) {
        var self__ = this;
        var _10701__$1 = this;
        return self__.meta10700;
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(specs, cnt) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(specs, cnt) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(specs, cnt) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        var specs__$1 = cljs.core.deref.call(null, self__.specs);
        if (!(cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.count.call(null, x), self__.cnt))) {
          return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
        } else {
          var ret = x;
          var i = 0;
          while (true) {
            if (cljs.core._EQ_.call(null, i, self__.cnt)) {
              return ret;
            } else {
              var v = x.call(null, i);
              var cv = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, i), v);
              if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, cv))) {
                return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
              } else {
                var G__10706 = cv === v ? ret : cljs.core.assoc.call(null, ret, i, cv);
                var G__10707 = i + 1;
                ret = G__10706;
                i = G__10707;
                continue;
              }
            }
            break;
          }
        }
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(specs, cnt) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.count.call(null, x), cljs.core.count.call(null, self__.preds))) {
        } else {
          throw new Error("Assert failed: (c/and (vector? x) (\x3d (count x) (count preds)))");
        }
        var ret = x;
        var i = 0;
        while (true) {
          if (cljs.core._EQ_.call(null, i, cljs.core.count.call(null, x))) {
            return ret;
          } else {
            var cv = x.call(null, i);
            var v = cljs.spec.unform.call(null, self__.preds.call(null, i), cv);
            var G__10708 = cv === v ? ret : cljs.core.assoc.call(null, ret, i, v);
            var G__10709 = i + 1;
            ret = G__10708;
            i = G__10709;
            continue;
          }
          break;
        }
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(specs, cnt) {
      return function(_, path, via, in$, x) {
        var self__ = this;
        var ___$1 = this;
        if (!cljs.core.vector_QMARK_.call(null, x)) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), new cljs.core.Symbol(null, "vector?", "vector?", -61367869, null), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), 
          in$], null)], null);
        } else {
          if (cljs.core.not_EQ_.call(null, cljs.core.count.call(null, x), cljs.core.count.call(null, self__.preds))) {
            return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "\x3d", "cljs.core/\x3d", -1891498332, null)), function() {
              var x__8102__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "count", "cljs.core/count", -921270233, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "%", "%", -950237169, null)))));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
            }(), function() {
              var x__8102__auto__ = cljs.core.count.call(null, self__.preds);
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
            }()))), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null)], null);
          } else {
            return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map.call(null, function(___$1, specs, cnt) {
              return function(i, form, pred) {
                var v = x.call(null, i);
                if (cljs.core.truth_(cljs.spec.pvalid_QMARK_.call(null, pred, v))) {
                  return null;
                } else {
                  return cljs.spec.explain_1.call(null, form, pred, cljs.core.conj.call(null, path, i), via, cljs.core.conj.call(null, in$, i), v);
                }
              };
            }(___$1, specs, cnt), cljs.core.range.call(null, cljs.core.count.call(null, self__.preds)), self__.forms, self__.preds));
          }
        }
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(specs, cnt) {
      return function(_, overrides, path, rmap) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.gfn)) {
          return self__.gfn.call(null);
        } else {
          var gen = function(___$1, specs, cnt) {
            return function(i, p, f) {
              return cljs.spec.gensub.call(null, p, overrides, cljs.core.conj.call(null, path, i), rmap, f);
            };
          }(___$1, specs, cnt);
          var gs = cljs.core.map.call(null, gen, cljs.core.range.call(null, cljs.core.count.call(null, self__.preds)), self__.preds, self__.forms);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, gs)) {
            return cljs.core.apply.call(null, cljs.spec.impl.gen.tuple, gs);
          } else {
            return null;
          }
        }
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(specs, cnt) {
      return function(_, gfn__$1) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.tuple_impl.call(null, self__.forms, self__.preds, gfn__$1);
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(specs, cnt) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "tuple", "cljs.spec/tuple", 500419708, null)), self__.forms)));
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.getBasis = function(specs, cnt) {
      return function() {
        return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "forms", "forms", -608443419, null), new cljs.core.Symbol(null, "preds", "preds", 150921777, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "specs", "specs", -1227865028, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta10700", "meta10700", -1861309435, null)], null);
      };
    }(specs, cnt);
    cljs.spec.t_cljs$spec10699.cljs$lang$type = true;
    cljs.spec.t_cljs$spec10699.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec10699";
    cljs.spec.t_cljs$spec10699.cljs$lang$ctorPrWriter = function(specs, cnt) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec10699");
      };
    }(specs, cnt);
    cljs.spec.__GT_t_cljs$spec10699 = function(specs, cnt) {
      return function cljs$spec$__GT_t_cljs$spec10699(forms__$1, preds__$1, gfn__$1, specs__$1, cnt__$1, meta10700) {
        return new cljs.spec.t_cljs$spec10699(forms__$1, preds__$1, gfn__$1, specs__$1, cnt__$1, meta10700);
      };
    }(specs, cnt);
  }
  return new cljs.spec.t_cljs$spec10699(forms, preds, gfn, specs, cnt, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.tuple_impl.cljs$lang$maxFixedArity = 3;
cljs.spec.tagged_ret = function cljs$spec$tagged_ret(v) {
  var x10711 = v;
  x10711.cljs$core$IMapEntry$ = cljs.core.PROTOCOL_SENTINEL;
  x10711.cljs$core$IMapEntry$_key$arity$1 = function(x10711) {
    return function(_) {
      var ___$1 = this;
      return cljs.core._nth.call(null, v, 0);
    };
  }(x10711);
  x10711.cljs$core$IMapEntry$_val$arity$1 = function(x10711) {
    return function(_) {
      var ___$1 = this;
      return cljs.core._nth.call(null, v, 1);
    };
  }(x10711);
  return x10711;
};
cljs.spec.or_spec_impl = function cljs$spec$or_spec_impl(keys, forms, preds, gfn) {
  var id = cljs.core.random_uuid.call(null);
  var kps = cljs.core.zipmap.call(null, keys, preds);
  var specs = new cljs.core.Delay(function(id, kps) {
    return function() {
      return cljs.core.mapv.call(null, cljs.spec.specize, preds, forms);
    };
  }(id, kps), null);
  var cform = function() {
    var G__10720 = cljs.core.count.call(null, preds);
    switch(G__10720) {
      case 2:
        return function(G__10720, id, kps, specs) {
          return function(x) {
            var specs__$1 = cljs.core.deref.call(null, specs);
            var ret = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 0), x);
            if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret))) {
              var ret__$1 = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 1), x);
              if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret__$1))) {
                return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
              } else {
                return cljs.spec.tagged_ret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keys.call(null, 1), ret__$1], null));
              }
            } else {
              return cljs.spec.tagged_ret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keys.call(null, 0), ret], null));
            }
          };
        }(G__10720, id, kps, specs);
        break;
      case 3:
        return function(G__10720, id, kps, specs) {
          return function(x) {
            var specs__$1 = cljs.core.deref.call(null, specs);
            var ret = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 0), x);
            if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret))) {
              var ret__$1 = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 1), x);
              if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret__$1))) {
                var ret__$2 = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 2), x);
                if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret__$2))) {
                  return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
                } else {
                  return cljs.spec.tagged_ret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keys.call(null, 2), ret__$2], null));
                }
              } else {
                return cljs.spec.tagged_ret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keys.call(null, 1), ret__$1], null));
              }
            } else {
              return cljs.spec.tagged_ret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keys.call(null, 0), ret], null));
            }
          };
        }(G__10720, id, kps, specs);
        break;
      default:
        return function(G__10720, id, kps, specs) {
          return function(x) {
            var specs__$1 = cljs.core.deref.call(null, specs);
            var i = 0;
            while (true) {
              if (i < cljs.core.count.call(null, specs__$1)) {
                var spec = specs__$1.call(null, i);
                var ret = cljs.spec.conform_STAR_.call(null, spec, x);
                if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret))) {
                  var G__10729 = i + 1;
                  i = G__10729;
                  continue;
                } else {
                  return cljs.spec.tagged_ret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keys.call(null, i), ret], null));
                }
              } else {
                return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
              }
              break;
            }
          };
        }(G__10720, id, kps, specs);
    }
  }();
  if (typeof cljs.spec.t_cljs$spec10721 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec10721 = function(keys, forms, preds, gfn, id, kps, specs, cform, meta10722) {
      this.keys = keys;
      this.forms = forms;
      this.preds = preds;
      this.gfn = gfn;
      this.id = id;
      this.kps = kps;
      this.specs = specs;
      this.cform = cform;
      this.meta10722 = meta10722;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec10721.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(id, kps, specs, cform) {
      return function(_10723, meta10722__$1) {
        var self__ = this;
        var _10723__$1 = this;
        return new cljs.spec.t_cljs$spec10721(self__.keys, self__.forms, self__.preds, self__.gfn, self__.id, self__.kps, self__.specs, self__.cform, meta10722__$1);
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$core$IMeta$_meta$arity$1 = function(id, kps, specs, cform) {
      return function(_10723) {
        var self__ = this;
        var _10723__$1 = this;
        return self__.meta10722;
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(id, kps, specs, cform) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(id, kps, specs, cform) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(id, kps, specs, cform) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        return self__.cform.call(null, x);
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(id, kps, specs, cform) {
      return function(_, p__10724) {
        var self__ = this;
        var vec__10725 = p__10724;
        var k = cljs.core.nth.call(null, vec__10725, 0, null);
        var x = cljs.core.nth.call(null, vec__10725, 1, null);
        var ___$1 = this;
        return cljs.spec.unform.call(null, self__.kps.call(null, k), x);
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(id, kps, specs, cform) {
      return function(this$, path, via, in$, x) {
        var self__ = this;
        var this$__$1 = this;
        if (cljs.core.truth_(cljs.spec.pvalid_QMARK_.call(null, this$__$1, x))) {
          return null;
        } else {
          return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map.call(null, function(this$__$1, id, kps, specs, cform) {
            return function(k, form, pred) {
              if (cljs.core.truth_(cljs.spec.pvalid_QMARK_.call(null, pred, x))) {
                return null;
              } else {
                return cljs.spec.explain_1.call(null, form, pred, cljs.core.conj.call(null, path, k), via, in$, x);
              }
            };
          }(this$__$1, id, kps, specs, cform), self__.keys, self__.forms, self__.preds));
        }
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(id, kps, specs, cform) {
      return function(_, overrides, path, rmap) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.gfn)) {
          return self__.gfn.call(null);
        } else {
          var gen = function(___$1, id, kps, specs, cform) {
            return function(k, p, f) {
              var rmap__$1 = cljs.spec.inck.call(null, rmap, self__.id);
              if (cljs.core.truth_(cljs.spec.recur_limit_QMARK_.call(null, rmap__$1, self__.id, path, k))) {
                return null;
              } else {
                return cljs.spec.impl.gen.delay_impl.call(null, new cljs.core.Delay(function(rmap__$1, ___$1, id, kps, specs, cform) {
                  return function() {
                    return cljs.spec.gensub.call(null, p, overrides, cljs.core.conj.call(null, path, k), rmap__$1, f);
                  };
                }(rmap__$1, ___$1, id, kps, specs, cform), null));
              }
            };
          }(___$1, id, kps, specs, cform);
          var gs = cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, gen, self__.keys, self__.preds, self__.forms));
          if (cljs.core.empty_QMARK_.call(null, gs)) {
            return null;
          } else {
            return cljs.spec.impl.gen.one_of.call(null, gs);
          }
        }
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(id, kps, specs, cform) {
      return function(_, gfn__$1) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.or_spec_impl.call(null, self__.keys, self__.forms, self__.preds, gfn__$1);
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(id, kps, specs, cform) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "or", "cljs.spec/or", 1200597689, null)), cljs.core.mapcat.call(null, cljs.core.vector, self__.keys, self__.forms))));
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.getBasis = function(id, kps, specs, cform) {
      return function() {
        return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "forms", "forms", -608443419, null), new cljs.core.Symbol(null, "preds", "preds", 150921777, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "id", "id", 252129435, null), new cljs.core.Symbol(null, "kps", "kps", -1157342767, null), new cljs.core.Symbol(null, "specs", 
        "specs", -1227865028, null), new cljs.core.Symbol(null, "cform", "cform", 1319506748, null), new cljs.core.Symbol(null, "meta10722", "meta10722", -190068941, null)], null);
      };
    }(id, kps, specs, cform);
    cljs.spec.t_cljs$spec10721.cljs$lang$type = true;
    cljs.spec.t_cljs$spec10721.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec10721";
    cljs.spec.t_cljs$spec10721.cljs$lang$ctorPrWriter = function(id, kps, specs, cform) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec10721");
      };
    }(id, kps, specs, cform);
    cljs.spec.__GT_t_cljs$spec10721 = function(id, kps, specs, cform) {
      return function cljs$spec$or_spec_impl_$___GT_t_cljs$spec10721(keys__$1, forms__$1, preds__$1, gfn__$1, id__$1, kps__$1, specs__$1, cform__$1, meta10722) {
        return new cljs.spec.t_cljs$spec10721(keys__$1, forms__$1, preds__$1, gfn__$1, id__$1, kps__$1, specs__$1, cform__$1, meta10722);
      };
    }(id, kps, specs, cform);
  }
  return new cljs.spec.t_cljs$spec10721(keys, forms, preds, gfn, id, kps, specs, cform, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.and_preds = function cljs$spec$and_preds(x, preds, forms) {
  var ret = x;
  var G__10756 = preds;
  var vec__10758 = G__10756;
  var seq__10759 = cljs.core.seq.call(null, vec__10758);
  var first__10760 = cljs.core.first.call(null, seq__10759);
  var seq__10759__$1 = cljs.core.next.call(null, seq__10759);
  var pred = first__10760;
  var preds__$1 = seq__10759__$1;
  var G__10757 = forms;
  var vec__10761 = G__10757;
  var seq__10762 = cljs.core.seq.call(null, vec__10761);
  var first__10763 = cljs.core.first.call(null, seq__10762);
  var seq__10762__$1 = cljs.core.next.call(null, seq__10762);
  var form = first__10763;
  var forms__$1 = seq__10762__$1;
  var ret__$1 = ret;
  var G__10756__$1 = G__10756;
  var G__10757__$1 = G__10757;
  while (true) {
    var ret__$2 = ret__$1;
    var vec__10764 = G__10756__$1;
    var seq__10765 = cljs.core.seq.call(null, vec__10764);
    var first__10766 = cljs.core.first.call(null, seq__10765);
    var seq__10765__$1 = cljs.core.next.call(null, seq__10765);
    var pred__$1 = first__10766;
    var preds__$2 = seq__10765__$1;
    var vec__10767 = G__10757__$1;
    var seq__10768 = cljs.core.seq.call(null, vec__10767);
    var first__10769 = cljs.core.first.call(null, seq__10768);
    var seq__10768__$1 = cljs.core.next.call(null, seq__10768);
    var form__$1 = first__10769;
    var forms__$2 = seq__10768__$1;
    if (cljs.core.truth_(pred__$1)) {
      var nret = cljs.spec.dt.call(null, pred__$1, ret__$2, form__$1);
      if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, nret))) {
        return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
      } else {
        var G__10770 = nret;
        var G__10771 = preds__$2;
        var G__10772 = forms__$2;
        ret__$1 = G__10770;
        G__10756__$1 = G__10771;
        G__10757__$1 = G__10772;
        continue;
      }
    } else {
      return ret__$2;
    }
    break;
  }
};
cljs.spec.explain_pred_list = function cljs$spec$explain_pred_list(forms, preds, path, via, in$, x) {
  var ret = x;
  var G__10799 = forms;
  var vec__10801 = G__10799;
  var seq__10802 = cljs.core.seq.call(null, vec__10801);
  var first__10803 = cljs.core.first.call(null, seq__10802);
  var seq__10802__$1 = cljs.core.next.call(null, seq__10802);
  var form = first__10803;
  var forms__$1 = seq__10802__$1;
  var G__10800 = preds;
  var vec__10804 = G__10800;
  var seq__10805 = cljs.core.seq.call(null, vec__10804);
  var first__10806 = cljs.core.first.call(null, seq__10805);
  var seq__10805__$1 = cljs.core.next.call(null, seq__10805);
  var pred = first__10806;
  var preds__$1 = seq__10805__$1;
  var ret__$1 = ret;
  var G__10799__$1 = G__10799;
  var G__10800__$1 = G__10800;
  while (true) {
    var ret__$2 = ret__$1;
    var vec__10807 = G__10799__$1;
    var seq__10808 = cljs.core.seq.call(null, vec__10807);
    var first__10809 = cljs.core.first.call(null, seq__10808);
    var seq__10808__$1 = cljs.core.next.call(null, seq__10808);
    var form__$1 = first__10809;
    var forms__$2 = seq__10808__$1;
    var vec__10810 = G__10800__$1;
    var seq__10811 = cljs.core.seq.call(null, vec__10810);
    var first__10812 = cljs.core.first.call(null, seq__10811);
    var seq__10811__$1 = cljs.core.next.call(null, seq__10811);
    var pred__$1 = first__10812;
    var preds__$2 = seq__10811__$1;
    if (cljs.core.truth_(pred__$1)) {
      var nret = cljs.spec.dt.call(null, pred__$1, ret__$2, form__$1);
      if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, nret))) {
        return cljs.spec.explain_1.call(null, form__$1, pred__$1, path, via, in$, ret__$2);
      } else {
        var G__10813 = nret;
        var G__10814 = forms__$2;
        var G__10815 = preds__$2;
        ret__$1 = G__10813;
        G__10799__$1 = G__10814;
        G__10800__$1 = G__10815;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.spec.and_spec_impl = function cljs$spec$and_spec_impl(forms, preds, gfn) {
  var specs = new cljs.core.Delay(function() {
    return cljs.core.mapv.call(null, cljs.spec.specize, preds, forms);
  }, null);
  var cform = function() {
    var G__10822 = cljs.core.count.call(null, preds);
    switch(G__10822) {
      case 2:
        return function(G__10822, specs) {
          return function(x) {
            var specs__$1 = cljs.core.deref.call(null, specs);
            var ret = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 0), x);
            if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret))) {
              return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
            } else {
              return cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 1), ret);
            }
          };
        }(G__10822, specs);
        break;
      case 3:
        return function(G__10822, specs) {
          return function(x) {
            var specs__$1 = cljs.core.deref.call(null, specs);
            var ret = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 0), x);
            if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret))) {
              return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
            } else {
              var ret__$1 = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 1), ret);
              if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret__$1))) {
                return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
              } else {
                return cljs.spec.conform_STAR_.call(null, specs__$1.call(null, 2), ret__$1);
              }
            }
          };
        }(G__10822, specs);
        break;
      default:
        return function(G__10822, specs) {
          return function(x) {
            var specs__$1 = cljs.core.deref.call(null, specs);
            var ret = x;
            var i = 0;
            while (true) {
              if (i < cljs.core.count.call(null, specs__$1)) {
                var nret = cljs.spec.conform_STAR_.call(null, specs__$1.call(null, i), ret);
                if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, nret))) {
                  return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
                } else {
                  var G__10827 = nret;
                  var G__10828 = i + 1;
                  ret = G__10827;
                  i = G__10828;
                  continue;
                }
              } else {
                return ret;
              }
              break;
            }
          };
        }(G__10822, specs);
    }
  }();
  if (typeof cljs.spec.t_cljs$spec10823 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec10823 = function(forms, preds, gfn, specs, cform, meta10824) {
      this.forms = forms;
      this.preds = preds;
      this.gfn = gfn;
      this.specs = specs;
      this.cform = cform;
      this.meta10824 = meta10824;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec10823.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(specs, cform) {
      return function(_10825, meta10824__$1) {
        var self__ = this;
        var _10825__$1 = this;
        return new cljs.spec.t_cljs$spec10823(self__.forms, self__.preds, self__.gfn, self__.specs, self__.cform, meta10824__$1);
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$core$IMeta$_meta$arity$1 = function(specs, cform) {
      return function(_10825) {
        var self__ = this;
        var _10825__$1 = this;
        return self__.meta10824;
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(specs, cform) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(specs, cform) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(specs, cform) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        return self__.cform.call(null, x);
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(specs, cform) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.reduce.call(null, function(___$1, specs, cform) {
          return function(p1__10817_SHARP_, p2__10816_SHARP_) {
            return cljs.spec.unform.call(null, p2__10816_SHARP_, p1__10817_SHARP_);
          };
        }(___$1, specs, cform), x, cljs.core.reverse.call(null, self__.preds));
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(specs, cform) {
      return function(_, path, via, in$, x) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.explain_pred_list.call(null, self__.forms, self__.preds, path, via, in$, x);
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(specs, cform) {
      return function(_, overrides, path, rmap) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.gfn)) {
          return self__.gfn.call(null);
        } else {
          return cljs.spec.gensub.call(null, cljs.core.first.call(null, self__.preds), overrides, path, rmap, cljs.core.first.call(null, self__.forms));
        }
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(specs, cform) {
      return function(_, gfn__$1) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.and_spec_impl.call(null, self__.forms, self__.preds, gfn__$1);
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(specs, cform) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "and", "cljs.spec/and", -7296553, null)), self__.forms)));
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.getBasis = function(specs, cform) {
      return function() {
        return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "forms", "forms", -608443419, null), new cljs.core.Symbol(null, "preds", "preds", 150921777, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "specs", "specs", -1227865028, null), new cljs.core.Symbol(null, "cform", "cform", 1319506748, null), new cljs.core.Symbol(null, "meta10824", "meta10824", 1025214661, null)], null);
      };
    }(specs, cform);
    cljs.spec.t_cljs$spec10823.cljs$lang$type = true;
    cljs.spec.t_cljs$spec10823.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec10823";
    cljs.spec.t_cljs$spec10823.cljs$lang$ctorPrWriter = function(specs, cform) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec10823");
      };
    }(specs, cform);
    cljs.spec.__GT_t_cljs$spec10823 = function(specs, cform) {
      return function cljs$spec$and_spec_impl_$___GT_t_cljs$spec10823(forms__$1, preds__$1, gfn__$1, specs__$1, cform__$1, meta10824) {
        return new cljs.spec.t_cljs$spec10823(forms__$1, preds__$1, gfn__$1, specs__$1, cform__$1, meta10824);
      };
    }(specs, cform);
  }
  return new cljs.spec.t_cljs$spec10823(forms, preds, gfn, specs, cform, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.coll_prob = function cljs$spec$coll_prob(x, kfn, kform, distinct, count, min_count, max_count, path, via, in$) {
  var pred = function() {
    var or__7260__auto__ = kfn;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return cljs.core.coll_QMARK_;
    }
  }();
  var kform__$1 = function() {
    var or__7260__auto__ = kform;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return new cljs.core.Symbol("cljs.core", "coll?", "cljs.core/coll?", 1208130522, null);
    }
  }();
  if (cljs.core.not.call(null, cljs.spec.pvalid_QMARK_.call(null, pred, x))) {
    return cljs.spec.explain_1.call(null, kform__$1, pred, path, via, in$, x);
  } else {
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = count;
      if (cljs.core.truth_(and__7248__auto__)) {
        return cljs.core.not_EQ_.call(null, count, cljs.core.bounded_count.call(null, count, x));
      } else {
        return and__7248__auto__;
      }
    }())) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "\x3d", "cljs.core/\x3d", -1891498332, null)), function() {
        var x__8102__auto__ = count;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
      }(), function() {
        var x__8102__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "count", "cljs.core/count", -921270233, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "%", "%", -950237169, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
      }()))), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null)], null);
    } else {
      if (cljs.core.truth_(function() {
        var and__7248__auto__ = function() {
          var or__7260__auto__ = min_count;
          if (cljs.core.truth_(or__7260__auto__)) {
            return or__7260__auto__;
          } else {
            return max_count;
          }
        }();
        if (cljs.core.truth_(and__7248__auto__)) {
          return !(function() {
            var or__7260__auto__ = min_count;
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              return 0;
            }
          }() <= cljs.core.bounded_count.call(null, cljs.core.truth_(max_count) ? max_count + 1 : min_count, x) && cljs.core.bounded_count.call(null, cljs.core.truth_(max_count) ? max_count + 1 : min_count, x) <= function() {
            var or__7260__auto__ = max_count;
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              return cljs.spec.MAX_INT;
            }
          }());
        } else {
          return and__7248__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "\x3c\x3d", "cljs.core/\x3c\x3d", 1677001748, null)), function() {
          var x__8102__auto__ = function() {
            var or__7260__auto__ = min_count;
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              return 0;
            }
          }();
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }(), function() {
          var x__8102__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "count", "cljs.core/count", -921270233, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "%", "%", -950237169, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }(), function() {
          var x__8102__auto__ = function() {
            var or__7260__auto__ = max_count;
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              return cljs.spec.MAX_INT;
            }
          }();
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }()))), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null)], null);
      } else {
        if (cljs.core.truth_(function() {
          var and__7248__auto__ = distinct;
          if (cljs.core.truth_(and__7248__auto__)) {
            return !cljs.core.empty_QMARK_.call(null, x) && cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core.distinct_QMARK_, x));
          } else {
            return and__7248__auto__;
          }
        }())) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), new cljs.core.Symbol(null, "distinct?", "distinct?", -1684357959, null), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), 
          in$], null)], null);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.spec.merge_spec_impl = function cljs$spec$merge_spec_impl(forms, preds, gfn) {
  if (typeof cljs.spec.t_cljs$spec10840 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec10840 = function(forms, preds, gfn, meta10841) {
      this.forms = forms;
      this.preds = preds;
      this.gfn = gfn;
      this.meta10841 = meta10841;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10842, meta10841__$1) {
      var self__ = this;
      var _10842__$1 = this;
      return new cljs.spec.t_cljs$spec10840(self__.forms, self__.preds, self__.gfn, meta10841__$1);
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10842) {
      var self__ = this;
      var _10842__$1 = this;
      return self__.meta10841;
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(s) {
      var self__ = this;
      var s__$1 = this;
      return s__$1;
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(s, _) {
      var self__ = this;
      var s__$1 = this;
      return s__$1;
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(_, x) {
      var self__ = this;
      var ___$1 = this;
      var ms = cljs.core.map.call(null, function(___$1) {
        return function(p1__10829_SHARP_, p2__10830_SHARP_) {
          return cljs.spec.dt.call(null, p1__10829_SHARP_, x, p2__10830_SHARP_);
        };
      }(___$1), self__.preds, self__.forms);
      if (cljs.core.truth_(cljs.core.some.call(null, cljs.spec.invalid_QMARK_, ms))) {
        return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
      } else {
        return cljs.core.apply.call(null, cljs.core.merge, ms);
      }
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(_, x) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.apply.call(null, cljs.core.merge, cljs.core.map.call(null, function(___$1) {
        return function(p1__10831_SHARP_) {
          return cljs.spec.unform.call(null, p1__10831_SHARP_, x);
        };
      }(___$1), cljs.core.reverse.call(null, self__.preds)));
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(_, path, via, in$, x) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map.call(null, function(___$1) {
        return function(p1__10832_SHARP_, p2__10833_SHARP_) {
          return cljs.spec.explain_1.call(null, p1__10832_SHARP_, p2__10833_SHARP_, path, via, in$, x);
        };
      }(___$1), self__.forms, self__.preds));
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(_, overrides, path, rmap) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.gfn)) {
        return self__.gfn.call(null);
      } else {
        return cljs.spec.impl.gen.fmap.call(null, function(___$1) {
          return function(p1__10834_SHARP_) {
            return cljs.core.apply.call(null, cljs.core.merge, p1__10834_SHARP_);
          };
        }(___$1), cljs.core.apply.call(null, cljs.spec.impl.gen.tuple, cljs.core.map.call(null, function(___$1) {
          return function(p1__10835_SHARP_, p2__10836_SHARP_) {
            return cljs.spec.gensub.call(null, p1__10835_SHARP_, overrides, path, rmap, p2__10836_SHARP_);
          };
        }(___$1), self__.preds, self__.forms)));
      }
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(_, gfn__$1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.spec.merge_spec_impl.call(null, self__.forms, self__.preds, gfn__$1);
    };
    cljs.spec.t_cljs$spec10840.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "merge", "cljs.spec/merge", -838422687, null)), self__.forms)));
    };
    cljs.spec.t_cljs$spec10840.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "forms", "forms", -608443419, null), new cljs.core.Symbol(null, "preds", "preds", 150921777, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "meta10841", "meta10841", 2087027736, null)], null);
    };
    cljs.spec.t_cljs$spec10840.cljs$lang$type = true;
    cljs.spec.t_cljs$spec10840.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec10840";
    cljs.spec.t_cljs$spec10840.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec10840");
    };
    cljs.spec.__GT_t_cljs$spec10840 = function cljs$spec$merge_spec_impl_$___GT_t_cljs$spec10840(forms__$1, preds__$1, gfn__$1, meta10841) {
      return new cljs.spec.t_cljs$spec10840(forms__$1, preds__$1, gfn__$1, meta10841);
    };
  }
  return new cljs.spec.t_cljs$spec10840(forms, preds, gfn, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.every_impl = function cljs$spec$every_impl(var_args) {
  var args10847 = [];
  var len__8373__auto___10879 = arguments.length;
  var i__8374__auto___10880 = 0;
  while (true) {
    if (i__8374__auto___10880 < len__8373__auto___10879) {
      args10847.push(arguments[i__8374__auto___10880]);
      var G__10881 = i__8374__auto___10880 + 1;
      i__8374__auto___10880 = G__10881;
      continue;
    } else {
    }
    break;
  }
  var G__10849 = args10847.length;
  switch(G__10849) {
    case 3:
      return cljs.spec.every_impl.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.spec.every_impl.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10847.length)].join(""));
  }
};
cljs.spec.every_impl.cljs$core$IFn$_invoke$arity$3 = function(form, pred, opts) {
  return cljs.spec.every_impl.call(null, form, pred, opts, null);
};
cljs.spec.every_impl.cljs$core$IFn$_invoke$arity$4 = function(form, pred, p__10850, gfn) {
  var map__10851 = p__10850;
  var map__10851__$1 = (!(map__10851 == null) ? map__10851.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10851.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10851) : map__10851;
  var opts = map__10851__$1;
  var max_count = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword(null, "max-count", "max-count", 1539185305));
  var kfn = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword("cljs.spec", "kfn", "cljs.spec/kfn", 293196937));
  var gen_max = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword(null, "gen-max", "gen-max", -793680445), 20);
  var conform_all = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword("cljs.spec", "conform-all", "cljs.spec/conform-all", -1945029907));
  var conform_keys = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword(null, "conform-keys", "conform-keys", -1800041814));
  var describe_form = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword("cljs.spec", "describe", "cljs.spec/describe", 165584687));
  var distinct = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword(null, "distinct", "distinct", -1788879121));
  var kind_form = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword("cljs.spec", "kind-form", "cljs.spec/kind-form", 997489303));
  var gen_into = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword(null, "into", "into", -150836029));
  var count = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword(null, "count", "count", 2139924085));
  var min_count = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword(null, "min-count", "min-count", 1594709013));
  var kind = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword(null, "kind", "kind", -717265803));
  var cpred = cljs.core.get.call(null, map__10851__$1, new cljs.core.Keyword("cljs.spec", "cpred", "cljs.spec/cpred", 1439199454));
  var conform_into = gen_into;
  var spec = new cljs.core.Delay(function(conform_into, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
    return function() {
      return cljs.spec.specize.call(null, pred);
    };
  }(conform_into, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred), null);
  var check_QMARK_ = function(conform_into, spec, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
    return function(p1__10843_SHARP_) {
      return cljs.spec.valid_QMARK_.call(null, cljs.core.deref.call(null, spec), p1__10843_SHARP_);
    };
  }(conform_into, spec, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
  var kfn__$1 = function() {
    var or__7260__auto__ = kfn;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return function(or__7260__auto__, conform_into, spec, check_QMARK_, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
        return function(i, v) {
          return i;
        };
      }(or__7260__auto__, conform_into, spec, check_QMARK_, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    }
  }();
  var addcv = function(conform_into, spec, check_QMARK_, kfn__$1, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
    return function(ret, i, v, cv) {
      return cljs.core.conj.call(null, ret, cv);
    };
  }(conform_into, spec, check_QMARK_, kfn__$1, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
  var cfns = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
    return function(x) {
      if (cljs.core.vector_QMARK_.call(null, x) && (cljs.core.not.call(null, conform_into) || cljs.core.vector_QMARK_.call(null, conform_into))) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.identity, function(conform_into, spec, check_QMARK_, kfn__$1, addcv, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
          return function(ret, i, v, cv) {
            if (v === cv) {
              return ret;
            } else {
              return cljs.core.assoc.call(null, ret, i, cv);
            }
          };
        }(conform_into, spec, check_QMARK_, kfn__$1, addcv, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred), cljs.core.identity], null);
      } else {
        if (cljs.core.truth_(function() {
          var and__7248__auto__ = cljs.core.map_QMARK_.call(null, x);
          if (and__7248__auto__) {
            var or__7260__auto__ = function() {
              var and__7248__auto____$1 = kind;
              if (cljs.core.truth_(and__7248__auto____$1)) {
                return cljs.core.not.call(null, conform_into);
              } else {
                return and__7248__auto____$1;
              }
            }();
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              return cljs.core.map_QMARK_.call(null, conform_into);
            }
          } else {
            return and__7248__auto__;
          }
        }())) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(conform_keys) ? cljs.core.empty : cljs.core.identity, function(conform_into, spec, check_QMARK_, kfn__$1, addcv, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
            return function(ret, i, v, cv) {
              if (v === cv && cljs.core.not.call(null, conform_keys)) {
                return ret;
              } else {
                return cljs.core.assoc.call(null, ret, cljs.core.nth.call(null, cljs.core.truth_(conform_keys) ? cv : v, 0), cljs.core.nth.call(null, cv, 1));
              }
            };
          }(conform_into, spec, check_QMARK_, kfn__$1, addcv, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred), cljs.core.identity], null);
        } else {
          if (cljs.core.list_QMARK_.call(null, conform_into) || cljs.core.seq_QMARK_.call(null, conform_into) || cljs.core.not.call(null, conform_into) && (cljs.core.list_QMARK_.call(null, x) || cljs.core.seq_QMARK_.call(null, x))) {
            return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.empty, addcv, cljs.core.reverse], null);
          } else {
            return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(conform_into, spec, check_QMARK_, kfn__$1, addcv, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
              return function(p1__10844_SHARP_) {
                return cljs.core.empty.call(null, function() {
                  var or__7260__auto__ = conform_into;
                  if (cljs.core.truth_(or__7260__auto__)) {
                    return or__7260__auto__;
                  } else {
                    return p1__10844_SHARP_;
                  }
                }());
              };
            }(conform_into, spec, check_QMARK_, kfn__$1, addcv, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred), addcv, cljs.core.identity], null);
          }
        }
      }
    };
  }(conform_into, spec, check_QMARK_, kfn__$1, addcv, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
  if (typeof cljs.spec.t_cljs$spec10853 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec10853 = function(form, max_count, map__10851, check_QMARK_, gfn, gen_max, p__10850, pred, cpred, conform_keys, kind_form, addcv, cfns, describe_form, distinct, spec, kfn, gen_into, count, min_count, opts, kind, conform_all, conform_into, meta10854) {
      this.form = form;
      this.max_count = max_count;
      this.map__10851 = map__10851;
      this.check_QMARK_ = check_QMARK_;
      this.gfn = gfn;
      this.gen_max = gen_max;
      this.p__10850 = p__10850;
      this.pred = pred;
      this.cpred = cpred;
      this.conform_keys = conform_keys;
      this.kind_form = kind_form;
      this.addcv = addcv;
      this.cfns = cfns;
      this.describe_form = describe_form;
      this.distinct = distinct;
      this.spec = spec;
      this.kfn = kfn;
      this.gen_into = gen_into;
      this.count = count;
      this.min_count = min_count;
      this.opts = opts;
      this.kind = kind;
      this.conform_all = conform_all;
      this.conform_into = conform_into;
      this.meta10854 = meta10854;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec10853.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(_10855, meta10854__$1) {
        var self__ = this;
        var _10855__$1 = this;
        return new cljs.spec.t_cljs$spec10853(self__.form, self__.max_count, self__.map__10851, self__.check_QMARK_, self__.gfn, self__.gen_max, self__.p__10850, self__.pred, self__.cpred, self__.conform_keys, self__.kind_form, self__.addcv, self__.cfns, self__.describe_form, self__.distinct, self__.spec, self__.kfn, self__.gen_into, self__.count, self__.min_count, self__.opts, self__.kind, self__.conform_all, self__.conform_into, meta10854__$1);
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$core$IMeta$_meta$arity$1 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(_10855) {
        var self__ = this;
        var _10855__$1 = this;
        return self__.meta10854;
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        var spec__$1 = cljs.core.deref.call(null, self__.spec);
        if (cljs.core.not.call(null, self__.cpred.call(null, x))) {
          return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
        } else {
          if (cljs.core.truth_(self__.conform_all)) {
            var vec__10856 = self__.cfns.call(null, x);
            var init = cljs.core.nth.call(null, vec__10856, 0, null);
            var add = cljs.core.nth.call(null, vec__10856, 1, null);
            var complete = cljs.core.nth.call(null, vec__10856, 2, null);
            var ret = init.call(null, x);
            var i = 0;
            var G__10862 = cljs.core.seq.call(null, x);
            var vec__10863 = G__10862;
            var seq__10864 = cljs.core.seq.call(null, vec__10863);
            var first__10865 = cljs.core.first.call(null, seq__10864);
            var seq__10864__$1 = cljs.core.next.call(null, seq__10864);
            var v = first__10865;
            var vs = seq__10864__$1;
            var vseq = vec__10863;
            var ret__$1 = ret;
            var i__$1 = i;
            var G__10862__$1 = G__10862;
            while (true) {
              var ret__$2 = ret__$1;
              var i__$2 = i__$1;
              var vec__10866 = G__10862__$1;
              var seq__10867 = cljs.core.seq.call(null, vec__10866);
              var first__10868 = cljs.core.first.call(null, seq__10867);
              var seq__10867__$1 = cljs.core.next.call(null, seq__10867);
              var v__$1 = first__10868;
              var vs__$1 = seq__10867__$1;
              var vseq__$1 = vec__10866;
              if (vseq__$1) {
                var cv = cljs.spec.conform_STAR_.call(null, spec__$1, v__$1);
                if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, cv))) {
                  return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
                } else {
                  var G__10883 = add.call(null, ret__$2, i__$2, v__$1, cv);
                  var G__10884 = i__$2 + 1;
                  var G__10885 = vs__$1;
                  ret__$1 = G__10883;
                  i__$1 = G__10884;
                  G__10862__$1 = G__10885;
                  continue;
                }
              } else {
                return complete.call(null, ret__$2);
              }
              break;
            }
          } else {
            if (cljs.core.indexed_QMARK_.call(null, x)) {
              var step = function() {
                var x__7596__auto__ = 1;
                var y__7597__auto__ = cljs.core.long$.call(null, cljs.core.count.call(null, x) / cljs.spec._STAR_coll_check_limit_STAR_);
                return x__7596__auto__ > y__7597__auto__ ? x__7596__auto__ : y__7597__auto__;
              }();
              var i = 0;
              while (true) {
                if (i >= cljs.core.count.call(null, x)) {
                  return x;
                } else {
                  if (cljs.core.truth_(cljs.spec.valid_QMARK_.call(null, spec__$1, cljs.core.nth.call(null, x, i)))) {
                    var G__10886 = i + step;
                    i = G__10886;
                    continue;
                  } else {
                    return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
                  }
                }
                break;
              }
            } else {
              var limit = cljs.spec._STAR_coll_check_limit_STAR_;
              var i = 0;
              var G__10872 = cljs.core.seq.call(null, x);
              var vec__10873 = G__10872;
              var seq__10874 = cljs.core.seq.call(null, vec__10873);
              var first__10875 = cljs.core.first.call(null, seq__10874);
              var seq__10874__$1 = cljs.core.next.call(null, seq__10874);
              var v = first__10875;
              var vs = seq__10874__$1;
              var vseq = vec__10873;
              var i__$1 = i;
              var G__10872__$1 = G__10872;
              while (true) {
                var i__$2 = i__$1;
                var vec__10876 = G__10872__$1;
                var seq__10877 = cljs.core.seq.call(null, vec__10876);
                var first__10878 = cljs.core.first.call(null, seq__10877);
                var seq__10877__$1 = cljs.core.next.call(null, seq__10877);
                var v__$1 = first__10878;
                var vs__$1 = seq__10877__$1;
                var vseq__$1 = vec__10876;
                if (vseq__$1 == null || cljs.core._EQ_.call(null, i__$2, limit)) {
                  return x;
                } else {
                  if (cljs.core.truth_(cljs.spec.valid_QMARK_.call(null, spec__$1, v__$1))) {
                    var G__10887 = i__$2 + 1;
                    var G__10888 = vs__$1;
                    i__$1 = G__10887;
                    G__10872__$1 = G__10888;
                    continue;
                  } else {
                    return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
                  }
                }
                break;
              }
            }
          }
        }
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        return x;
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(_, path, via, in$, x) {
        var self__ = this;
        var ___$1 = this;
        var or__7260__auto__ = cljs.spec.coll_prob.call(null, x, self__.kind, self__.kind_form, self__.distinct, self__.count, self__.min_count, self__.max_count, path, via, in$);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return cljs.core.apply.call(null, cljs.core.concat, (cljs.core.truth_(self__.conform_all) ? cljs.core.identity : cljs.core.partial.call(null, cljs.core.take, cljs.spec._STAR_coll_error_limit_STAR_)).call(null, cljs.core.keep.call(null, cljs.core.identity, cljs.core.map.call(null, function(or__7260__auto__, ___$1, conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, 
          gen_into, count, min_count, kind, cpred) {
            return function(i, v) {
              var k = self__.kfn.call(null, i, v);
              if (cljs.core.truth_(self__.check_QMARK_.call(null, v))) {
                return null;
              } else {
                var prob = cljs.spec.explain_1.call(null, self__.form, self__.pred, path, via, cljs.core.conj.call(null, in$, k), v);
                return prob;
              }
            };
          }(or__7260__auto__, ___$1, conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred), cljs.core.range.call(null), x))));
        }
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(_, overrides, path, rmap) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.gfn)) {
          return self__.gfn.call(null);
        } else {
          var pgen = cljs.spec.gensub.call(null, self__.pred, overrides, path, rmap, self__.form);
          return cljs.spec.impl.gen.bind.call(null, cljs.core.truth_(self__.gen_into) ? cljs.spec.impl.gen.return$.call(null, cljs.core.empty.call(null, self__.gen_into)) : cljs.core.truth_(self__.kind) ? cljs.spec.impl.gen.fmap.call(null, function(pgen, ___$1, conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
            return function(p1__10845_SHARP_) {
              if (cljs.core.empty_QMARK_.call(null, p1__10845_SHARP_)) {
                return p1__10845_SHARP_;
              } else {
                return cljs.core.empty.call(null, p1__10845_SHARP_);
              }
            };
          }(pgen, ___$1, conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred), cljs.spec.gensub.call(null, self__.kind, overrides, path, rmap, self__.form)) : cljs.spec.impl.gen.return$.call(null, cljs.core.PersistentVector.EMPTY), function(pgen, ___$1, conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, 
          opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
            return function(init) {
              return cljs.spec.impl.gen.fmap.call(null, function(pgen, ___$1, conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
                return function(p1__10846_SHARP_) {
                  if (cljs.core.vector_QMARK_.call(null, init)) {
                    return p1__10846_SHARP_;
                  } else {
                    return cljs.core.into.call(null, init, p1__10846_SHARP_);
                  }
                };
              }(pgen, ___$1, conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred), cljs.core.truth_(self__.distinct) ? cljs.core.truth_(self__.count) ? cljs.spec.impl.gen.vector_distinct.call(null, pgen, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "num-elements", "num-elements", 1960422107), self__.count, new cljs.core.Keyword(null, 
              "max-tries", "max-tries", -1824441792), 100], null)) : cljs.spec.impl.gen.vector_distinct.call(null, pgen, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "min-elements", "min-elements", 949370780), function() {
                var or__7260__auto__ = self__.min_count;
                if (cljs.core.truth_(or__7260__auto__)) {
                  return or__7260__auto__;
                } else {
                  return 0;
                }
              }(), new cljs.core.Keyword(null, "max-elements", "max-elements", 433034073), function() {
                var or__7260__auto__ = self__.max_count;
                if (cljs.core.truth_(or__7260__auto__)) {
                  return or__7260__auto__;
                } else {
                  var x__7596__auto__ = self__.gen_max;
                  var y__7597__auto__ = 2 * function() {
                    var or__7260__auto____$1 = self__.min_count;
                    if (cljs.core.truth_(or__7260__auto____$1)) {
                      return or__7260__auto____$1;
                    } else {
                      return 0;
                    }
                  }();
                  return x__7596__auto__ > y__7597__auto__ ? x__7596__auto__ : y__7597__auto__;
                }
              }(), new cljs.core.Keyword(null, "max-tries", "max-tries", -1824441792), 100], null)) : cljs.core.truth_(self__.count) ? cljs.spec.impl.gen.vector.call(null, pgen, self__.count) : cljs.core.truth_(function() {
                var or__7260__auto__ = self__.min_count;
                if (cljs.core.truth_(or__7260__auto__)) {
                  return or__7260__auto__;
                } else {
                  return self__.max_count;
                }
              }()) ? cljs.spec.impl.gen.vector.call(null, pgen, function() {
                var or__7260__auto__ = self__.min_count;
                if (cljs.core.truth_(or__7260__auto__)) {
                  return or__7260__auto__;
                } else {
                  return 0;
                }
              }(), function() {
                var or__7260__auto__ = self__.max_count;
                if (cljs.core.truth_(or__7260__auto__)) {
                  return or__7260__auto__;
                } else {
                  var x__7596__auto__ = self__.gen_max;
                  var y__7597__auto__ = 2 * function() {
                    var or__7260__auto____$1 = self__.min_count;
                    if (cljs.core.truth_(or__7260__auto____$1)) {
                      return or__7260__auto____$1;
                    } else {
                      return 0;
                    }
                  }();
                  return x__7596__auto__ > y__7597__auto__ ? x__7596__auto__ : y__7597__auto__;
                }
              }()) : cljs.spec.impl.gen.vector.call(null, pgen, 0, self__.gen_max));
            };
          }(pgen, ___$1, conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred));
        }
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(_, gfn__$1) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.every_impl.call(null, self__.form, self__.pred, self__.opts, gfn__$1);
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        var or__7260__auto__ = self__.describe_form;
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "every", "cljs.spec/every", -1899705480, null)), function() {
            var x__8102__auto__ = self__.form;
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
          }(), cljs.core.mapcat.call(null, cljs.core.identity, self__.opts))));
        }
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.getBasis = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function() {
        return new cljs.core.PersistentVector(null, 25, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "form", "form", 16469056, null), new cljs.core.Symbol(null, "max-count", "max-count", -1115250464, null), new cljs.core.Symbol(null, "map__10851", "map__10851", 537256900, null), new cljs.core.Symbol(null, "check?", "check?", 409539557, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "gen-max", "gen-max", 846851082, null), new cljs.core.Symbol(null, 
        "p__10850", "p__10850", -144573972, null), new cljs.core.Symbol(null, "pred", "pred", -727012372, null), new cljs.core.Symbol(null, "cpred", "cpred", -540353554, null), new cljs.core.Symbol(null, "conform-keys", "conform-keys", -159510287, null), new cljs.core.Symbol(null, "kind-form", "kind-form", 1155997457, null), new cljs.core.Symbol(null, "addcv", "addcv", -1552991247, null), new cljs.core.Symbol(null, "cfns", "cfns", 1335482066, null), new cljs.core.Symbol(null, "describe-form", "describe-form", 
        -1410156588, null), new cljs.core.Symbol(null, "distinct", "distinct", -148347594, null), new cljs.core.Symbol(null, "spec", "spec", 1988051928, null), new cljs.core.Symbol(null, "kfn", "kfn", 729311001, null), new cljs.core.Symbol(null, "gen-into", "gen-into", 592640985, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "min-count", "min-count", -1059726756, null), new cljs.core.Symbol(null, "opts", "opts", 1795607228, null), new cljs.core.Symbol(null, 
        "kind", "kind", 923265724, null), new cljs.core.Symbol(null, "conform-all", "conform-all", -980179459, null), new cljs.core.Symbol(null, "conform-into", "conform-into", -1039113729, null), new cljs.core.Symbol(null, "meta10854", "meta10854", -282943650, null)], null);
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.t_cljs$spec10853.cljs$lang$type = true;
    cljs.spec.t_cljs$spec10853.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec10853";
    cljs.spec.t_cljs$spec10853.cljs$lang$ctorPrWriter = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec10853");
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
    cljs.spec.__GT_t_cljs$spec10853 = function(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred) {
      return function cljs$spec$__GT_t_cljs$spec10853(form__$1, max_count__$1, map__10851__$2, check_QMARK___$1, gfn__$1, gen_max__$1, p__10850__$1, pred__$1, cpred__$1, conform_keys__$1, kind_form__$1, addcv__$1, cfns__$1, describe_form__$1, distinct__$1, spec__$1, kfn__$2, gen_into__$1, count__$1, min_count__$1, opts__$1, kind__$1, conform_all__$1, conform_into__$1, meta10854) {
        return new cljs.spec.t_cljs$spec10853(form__$1, max_count__$1, map__10851__$2, check_QMARK___$1, gfn__$1, gen_max__$1, p__10850__$1, pred__$1, cpred__$1, conform_keys__$1, kind_form__$1, addcv__$1, cfns__$1, describe_form__$1, distinct__$1, spec__$1, kfn__$2, gen_into__$1, count__$1, min_count__$1, opts__$1, kind__$1, conform_all__$1, conform_into__$1, meta10854);
      };
    }(conform_into, spec, check_QMARK_, kfn__$1, addcv, cfns, map__10851, map__10851__$1, opts, max_count, kfn, gen_max, conform_all, conform_keys, describe_form, distinct, kind_form, gen_into, count, min_count, kind, cpred);
  }
  return new cljs.spec.t_cljs$spec10853(form, max_count, map__10851__$1, check_QMARK_, gfn, gen_max, p__10850, pred, cpred, conform_keys, kind_form, addcv, cfns, describe_form, distinct, spec, kfn__$1, gen_into, count, min_count, opts, kind, conform_all, conform_into, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.every_impl.cljs$lang$maxFixedArity = 4;
cljs.spec.accept = function cljs$spec$accept(x) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204), new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), new cljs.core.Keyword(null, "ret", "ret", -468222814), x], null);
};
cljs.spec.accept_QMARK_ = function cljs$spec$accept_QMARK_(p__10889) {
  var map__10892 = p__10889;
  var map__10892__$1 = (!(map__10892 == null) ? map__10892.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10892.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10892) : map__10892;
  var op = cljs.core.get.call(null, map__10892__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  return cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), op);
};
cljs.spec.pcat_STAR_ = function cljs$spec$pcat_STAR_(p__10894) {
  var map__10906 = p__10894;
  var map__10906__$1 = (!(map__10906 == null) ? map__10906.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10906.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10906) : map__10906;
  var vec__10907 = cljs.core.get.call(null, map__10906__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var seq__10908 = cljs.core.seq.call(null, vec__10907);
  var first__10909 = cljs.core.first.call(null, seq__10908);
  var seq__10908__$1 = cljs.core.next.call(null, seq__10908);
  var p1 = first__10909;
  var pr = seq__10908__$1;
  var ps = vec__10907;
  var vec__10910 = cljs.core.get.call(null, map__10906__$1, new cljs.core.Keyword(null, "ks", "ks", 1900203942));
  var seq__10911 = cljs.core.seq.call(null, vec__10910);
  var first__10912 = cljs.core.first.call(null, seq__10911);
  var seq__10911__$1 = cljs.core.next.call(null, seq__10911);
  var k1 = first__10912;
  var kr = seq__10911__$1;
  var ks = vec__10910;
  var vec__10913 = cljs.core.get.call(null, map__10906__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350));
  var seq__10914 = cljs.core.seq.call(null, vec__10913);
  var first__10915 = cljs.core.first.call(null, seq__10914);
  var seq__10914__$1 = cljs.core.next.call(null, seq__10914);
  var f1 = first__10915;
  var fr = seq__10914__$1;
  var forms = vec__10913;
  var ret = cljs.core.get.call(null, map__10906__$1, new cljs.core.Keyword(null, "ret", "ret", -468222814));
  var rep_PLUS_ = cljs.core.get.call(null, map__10906__$1, new cljs.core.Keyword(null, "rep+", "rep+", -281382396));
  if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ps)) {
    if (cljs.core.truth_(cljs.spec.accept_QMARK_.call(null, p1))) {
      var rp = (new cljs.core.Keyword(null, "ret", "ret", -468222814)).cljs$core$IFn$_invoke$arity$1(p1);
      var ret__$1 = cljs.core.conj.call(null, ret, cljs.core.truth_(ks) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([k1, rp]) : rp);
      if (pr) {
        return cljs.spec.pcat_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "ps", "ps", 292358046), pr, new cljs.core.Keyword(null, "ks", "ks", 1900203942), kr, new cljs.core.Keyword(null, "forms", "forms", 2045992350), fr, new cljs.core.Keyword(null, "ret", "ret", -468222814), ret__$1], null));
      } else {
        return cljs.spec.accept.call(null, ret__$1);
      }
    } else {
      return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204), new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), new cljs.core.Keyword(null, "ps", "ps", 292358046), ps, new cljs.core.Keyword(null, "ret", "ret", -468222814), ret, new cljs.core.Keyword(null, "ks", "ks", 1900203942), ks, new cljs.core.Keyword(null, "forms", "forms", 2045992350), forms, new cljs.core.Keyword(null, "rep+", "rep+", -281382396), rep_PLUS_], 
      null);
    }
  } else {
    return null;
  }
};
cljs.spec.pcat = function cljs$spec$pcat(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___10918 = arguments.length;
  var i__8374__auto___10919 = 0;
  while (true) {
    if (i__8374__auto___10919 < len__8373__auto___10918) {
      args__8380__auto__.push(arguments[i__8374__auto___10919]);
      var G__10920 = i__8374__auto___10919 + 1;
      i__8374__auto___10919 = G__10920;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.spec.pcat.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.spec.pcat.cljs$core$IFn$_invoke$arity$variadic = function(ps) {
  return cljs.spec.pcat_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ps", "ps", 292358046), ps, new cljs.core.Keyword(null, "ret", "ret", -468222814), cljs.core.PersistentVector.EMPTY], null));
};
cljs.spec.pcat.cljs$lang$maxFixedArity = 0;
cljs.spec.pcat.cljs$lang$applyTo = function(seq10917) {
  return cljs.spec.pcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10917));
};
cljs.spec.cat_impl = function cljs$spec$cat_impl(ks, ps, forms) {
  return cljs.spec.pcat_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "ks", "ks", 1900203942), ks, new cljs.core.Keyword(null, "ps", "ps", 292358046), ps, new cljs.core.Keyword(null, "forms", "forms", 2045992350), forms, new cljs.core.Keyword(null, "ret", "ret", -468222814), cljs.core.PersistentArrayMap.EMPTY], null));
};
cljs.spec.rep_STAR_ = function cljs$spec$rep_STAR_(p1, p2, ret, splice, form) {
  if (cljs.core.truth_(p1)) {
    var r = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204), new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), new cljs.core.Keyword(null, "p2", "p2", 905500641), p2, new cljs.core.Keyword(null, "splice", "splice", 449588165), splice, new cljs.core.Keyword(null, "forms", "forms", 2045992350), form, new cljs.core.Keyword(null, "id", "id", -1388402092), cljs.core.random_uuid.call(null)], null);
    if (cljs.core.truth_(cljs.spec.accept_QMARK_.call(null, p1))) {
      return cljs.core.assoc.call(null, r, new cljs.core.Keyword(null, "p1", "p1", -936759954), p2, new cljs.core.Keyword(null, "ret", "ret", -468222814), cljs.core.conj.call(null, ret, (new cljs.core.Keyword(null, "ret", "ret", -468222814)).cljs$core$IFn$_invoke$arity$1(p1)));
    } else {
      return cljs.core.assoc.call(null, r, new cljs.core.Keyword(null, "p1", "p1", -936759954), p1, new cljs.core.Keyword(null, "ret", "ret", -468222814), ret);
    }
  } else {
    return null;
  }
};
cljs.spec.rep_impl = function cljs$spec$rep_impl(form, p) {
  return cljs.spec.rep_STAR_.call(null, p, p, cljs.core.PersistentVector.EMPTY, false, form);
};
cljs.spec.rep_PLUS_impl = function cljs$spec$rep_PLUS_impl(form, p) {
  return cljs.spec.pcat_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "ps", "ps", 292358046), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p, cljs.spec.rep_STAR_.call(null, p, p, cljs.core.PersistentVector.EMPTY, true, form)], null), new cljs.core.Keyword(null, "forms", "forms", 2045992350), cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8102__auto__ = form;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
  }(), function() {
    var x__8102__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "*", "cljs.spec/*", -858366320, null)), function() {
      var x__8102__auto__ = form;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
  }())))), new cljs.core.Keyword(null, "ret", "ret", -468222814), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "rep+", "rep+", -281382396), form], null));
};
cljs.spec.amp_impl = function cljs$spec$amp_impl(re, preds, pred_forms) {
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204), new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), new cljs.core.Keyword(null, "p1", "p1", -936759954), re, new cljs.core.Keyword(null, "ps", "ps", 292358046), preds, new cljs.core.Keyword(null, "forms", "forms", 2045992350), pred_forms], null);
};
cljs.spec.filter_alt = function cljs$spec$filter_alt(ps, ks, forms, f) {
  if (cljs.core.truth_(function() {
    var or__7260__auto__ = ks;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return forms;
    }
  }())) {
    var pks = cljs.core.filter.call(null, function(p1__10921_SHARP_) {
      return f.call(null, cljs.core.first.call(null, p1__10921_SHARP_));
    }, cljs.core.map.call(null, cljs.core.vector, ps, function() {
      var or__7260__auto__ = cljs.core.seq.call(null, ks);
      if (or__7260__auto__) {
        return or__7260__auto__;
      } else {
        return cljs.core.repeat.call(null, null);
      }
    }(), function() {
      var or__7260__auto__ = cljs.core.seq.call(null, forms);
      if (or__7260__auto__) {
        return or__7260__auto__;
      } else {
        return cljs.core.repeat.call(null, null);
      }
    }()));
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.first, pks)), cljs.core.truth_(ks) ? cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.second, pks)) : null, cljs.core.truth_(forms) ? cljs.core.seq.call(null, cljs.core.map.call(null, function(pks) {
      return function(p1__10922_SHARP_) {
        return cljs.core.nth.call(null, p1__10922_SHARP_, 2);
      };
    }(pks), pks)) : null], null);
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq.call(null, cljs.core.filter.call(null, f, ps)), ks, forms], null);
  }
};
cljs.spec.alt_STAR_ = function cljs$spec$alt_STAR_(ps, ks, forms) {
  var vec__10932 = cljs.spec.filter_alt.call(null, ps, ks, forms, cljs.core.identity);
  var vec__10935 = cljs.core.nth.call(null, vec__10932, 0, null);
  var seq__10936 = cljs.core.seq.call(null, vec__10935);
  var first__10937 = cljs.core.first.call(null, seq__10936);
  var seq__10936__$1 = cljs.core.next.call(null, seq__10936);
  var p1 = first__10937;
  var pr = seq__10936__$1;
  var ps__$1 = vec__10935;
  var vec__10938 = cljs.core.nth.call(null, vec__10932, 1, null);
  var k1 = cljs.core.nth.call(null, vec__10938, 0, null);
  var ks__$1 = vec__10938;
  var forms__$1 = cljs.core.nth.call(null, vec__10932, 2, null);
  if (cljs.core.truth_(ps__$1)) {
    var ret = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204), new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), new cljs.core.Keyword(null, "ps", "ps", 292358046), ps__$1, new cljs.core.Keyword(null, "ks", "ks", 1900203942), ks__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350), forms__$1], null);
    if (pr == null) {
      if (cljs.core.truth_(k1)) {
        if (cljs.core.truth_(cljs.spec.accept_QMARK_.call(null, p1))) {
          return cljs.spec.accept.call(null, cljs.spec.tagged_ret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k1, (new cljs.core.Keyword(null, "ret", "ret", -468222814)).cljs$core$IFn$_invoke$arity$1(p1)], null)));
        } else {
          return ret;
        }
      } else {
        return p1;
      }
    } else {
      return ret;
    }
  } else {
    return null;
  }
};
cljs.spec.alts = function cljs$spec$alts(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___10942 = arguments.length;
  var i__8374__auto___10943 = 0;
  while (true) {
    if (i__8374__auto___10943 < len__8373__auto___10942) {
      args__8380__auto__.push(arguments[i__8374__auto___10943]);
      var G__10944 = i__8374__auto___10943 + 1;
      i__8374__auto___10943 = G__10944;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return cljs.spec.alts.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
cljs.spec.alts.cljs$core$IFn$_invoke$arity$variadic = function(ps) {
  return cljs.spec.alt_STAR_.call(null, ps, null, null);
};
cljs.spec.alts.cljs$lang$maxFixedArity = 0;
cljs.spec.alts.cljs$lang$applyTo = function(seq10941) {
  return cljs.spec.alts.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq10941));
};
cljs.spec.alt2 = function cljs$spec$alt2(p1, p2) {
  if (cljs.core.truth_(function() {
    var and__7248__auto__ = p1;
    if (cljs.core.truth_(and__7248__auto__)) {
      return p2;
    } else {
      return and__7248__auto__;
    }
  }())) {
    return cljs.spec.alts.call(null, p1, p2);
  } else {
    var or__7260__auto__ = p1;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return p2;
    }
  }
};
cljs.spec.alt_impl = function cljs$spec$alt_impl(ks, ps, forms) {
  return cljs.core.assoc.call(null, cljs.spec.alt_STAR_.call(null, ps, ks, forms), new cljs.core.Keyword(null, "id", "id", -1388402092), cljs.core.random_uuid.call(null));
};
cljs.spec.maybe_impl = function cljs$spec$maybe_impl(p, form) {
  return cljs.core.assoc.call(null, cljs.spec.alt_STAR_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p, cljs.spec.accept.call(null, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718))], null), null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [form, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718)], null)), new cljs.core.Keyword(null, "maybe", "maybe", -314397560), form);
};
cljs.spec.noret_QMARK_ = function cljs$spec$noret_QMARK_(p1, pret) {
  var or__7260__auto__ = cljs.core._EQ_.call(null, pret, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718));
  if (or__7260__auto__) {
    return or__7260__auto__;
  } else {
    var or__7260__auto____$1 = function() {
      var and__7248__auto__ = (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), null], null), null)).call(null, (new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204)).cljs$core$IFn$_invoke$arity$1(cljs.spec.reg_resolve_BANG_.call(null, p1)));
      if (cljs.core.truth_(and__7248__auto__)) {
        return cljs.core.empty_QMARK_.call(null, pret);
      } else {
        return and__7248__auto__;
      }
    }();
    if (cljs.core.truth_(or__7260__auto____$1)) {
      return or__7260__auto____$1;
    } else {
      return null;
    }
  }
};
cljs.spec.accept_nil_QMARK_ = function cljs$spec$accept_nil_QMARK_(p) {
  var map__10948 = cljs.spec.reg_resolve_BANG_.call(null, p);
  var map__10948__$1 = (!(map__10948 == null) ? map__10948.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10948.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10948) : map__10948;
  var p__$1 = map__10948__$1;
  var op = cljs.core.get.call(null, map__10948__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  var ps = cljs.core.get.call(null, map__10948__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var p1 = cljs.core.get.call(null, map__10948__$1, new cljs.core.Keyword(null, "p1", "p1", -936759954));
  var p2 = cljs.core.get.call(null, map__10948__$1, new cljs.core.Keyword(null, "p2", "p2", 905500641));
  var forms = cljs.core.get.call(null, map__10948__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350));
  var G__10950 = op;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), G__10950)) {
    return true;
  } else {
    if (cljs.core._EQ_.call(null, null, G__10950)) {
      return null;
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), G__10950)) {
        var and__7248__auto__ = cljs.spec.accept_nil_QMARK_.call(null, p1);
        if (cljs.core.truth_(and__7248__auto__)) {
          var or__7260__auto__ = cljs.spec.noret_QMARK_.call(null, p1, cljs.spec.preturn.call(null, p1));
          if (cljs.core.truth_(or__7260__auto__)) {
            return or__7260__auto__;
          } else {
            var ret = cljs.spec.and_preds.call(null, cljs.spec.preturn.call(null, p1), ps, cljs.core.next.call(null, forms));
            return cljs.core.not.call(null, cljs.spec.invalid_QMARK_.call(null, ret));
          }
        } else {
          return and__7248__auto__;
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), G__10950)) {
          var or__7260__auto__ = p1 === p2;
          if (or__7260__auto__) {
            return or__7260__auto__;
          } else {
            return cljs.spec.accept_nil_QMARK_.call(null, p1);
          }
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), G__10950)) {
            return cljs.core.every_QMARK_.call(null, cljs.spec.accept_nil_QMARK_, ps);
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), G__10950)) {
              return cljs.core.some.call(null, cljs.spec.accept_nil_QMARK_, ps);
            } else {
              throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.spec.preturn = function cljs$spec$preturn(p) {
  var map__10969 = cljs.spec.reg_resolve_BANG_.call(null, p);
  var map__10969__$1 = (!(map__10969 == null) ? map__10969.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10969.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10969) : map__10969;
  var p__$1 = map__10969__$1;
  var vec__10970 = cljs.core.get.call(null, map__10969__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var seq__10971 = cljs.core.seq.call(null, vec__10970);
  var first__10972 = cljs.core.first.call(null, seq__10971);
  var seq__10971__$1 = cljs.core.next.call(null, seq__10971);
  var p0 = first__10972;
  var pr = seq__10971__$1;
  var ps = vec__10970;
  var vec__10973 = cljs.core.get.call(null, map__10969__$1, new cljs.core.Keyword(null, "ks", "ks", 1900203942));
  var k = cljs.core.nth.call(null, vec__10973, 0, null);
  var ks = vec__10973;
  var op = cljs.core.get.call(null, map__10969__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  var p1 = cljs.core.get.call(null, map__10969__$1, new cljs.core.Keyword(null, "p1", "p1", -936759954));
  var ret = cljs.core.get.call(null, map__10969__$1, new cljs.core.Keyword(null, "ret", "ret", -468222814));
  var forms = cljs.core.get.call(null, map__10969__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350));
  var G__10977 = op;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), G__10977)) {
    return ret;
  } else {
    if (cljs.core._EQ_.call(null, null, G__10977)) {
      return null;
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), G__10977)) {
        var pret = cljs.spec.preturn.call(null, p1);
        if (cljs.core.truth_(cljs.spec.noret_QMARK_.call(null, p1, pret))) {
          return new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718);
        } else {
          return cljs.spec.and_preds.call(null, pret, ps, forms);
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), G__10977)) {
          return cljs.spec.add_ret.call(null, p1, ret, k);
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), G__10977)) {
            return cljs.spec.add_ret.call(null, p0, ret, k);
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), G__10977)) {
              var vec__10978 = cljs.spec.filter_alt.call(null, ps, ks, forms, cljs.spec.accept_nil_QMARK_);
              var vec__10981 = cljs.core.nth.call(null, vec__10978, 0, null);
              var p0__$1 = cljs.core.nth.call(null, vec__10981, 0, null);
              var vec__10984 = cljs.core.nth.call(null, vec__10978, 1, null);
              var k0 = cljs.core.nth.call(null, vec__10984, 0, null);
              var r = p0__$1 == null ? new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718) : cljs.spec.preturn.call(null, p0__$1);
              if (cljs.core.truth_(k0)) {
                return cljs.spec.tagged_ret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k0, r], null));
              } else {
                return r;
              }
            } else {
              throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.spec.op_unform = function cljs$spec$op_unform(p, x) {
  var map__11003 = cljs.spec.reg_resolve_BANG_.call(null, p);
  var map__11003__$1 = (!(map__11003 == null) ? map__11003.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11003.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11003) : map__11003;
  var p__$1 = map__11003__$1;
  var vec__11004 = cljs.core.get.call(null, map__11003__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var seq__11005 = cljs.core.seq.call(null, vec__11004);
  var first__11006 = cljs.core.first.call(null, seq__11005);
  var seq__11005__$1 = cljs.core.next.call(null, seq__11005);
  var p0 = first__11006;
  var pr = seq__11005__$1;
  var ps = vec__11004;
  var vec__11007 = cljs.core.get.call(null, map__11003__$1, new cljs.core.Keyword(null, "ks", "ks", 1900203942));
  var k = cljs.core.nth.call(null, vec__11007, 0, null);
  var ks = vec__11007;
  var op = cljs.core.get.call(null, map__11003__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  var p1 = cljs.core.get.call(null, map__11003__$1, new cljs.core.Keyword(null, "p1", "p1", -936759954));
  var ret = cljs.core.get.call(null, map__11003__$1, new cljs.core.Keyword(null, "ret", "ret", -468222814));
  var forms = cljs.core.get.call(null, map__11003__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350));
  var rep_PLUS_ = cljs.core.get.call(null, map__11003__$1, new cljs.core.Keyword(null, "rep+", "rep+", -281382396));
  var maybe = cljs.core.get.call(null, map__11003__$1, new cljs.core.Keyword(null, "maybe", "maybe", -314397560));
  var kps = cljs.core.zipmap.call(null, ks, ps);
  var G__11011 = op;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), G__11011)) {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ret], null);
  } else {
    if (cljs.core._EQ_.call(null, null, G__11011)) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.unform.call(null, p__$1, x)], null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), G__11011)) {
        var px = cljs.core.reduce.call(null, function(G__11011, map__11003, map__11003__$1, p__$1, vec__11004, seq__11005, first__11006, seq__11005__$1, p0, pr, ps, vec__11007, k, ks, op, p1, ret, forms, rep_PLUS_, maybe, kps) {
          return function(p1__10988_SHARP_, p2__10987_SHARP_) {
            return cljs.spec.unform.call(null, p2__10987_SHARP_, p1__10988_SHARP_);
          };
        }(G__11011, map__11003, map__11003__$1, p__$1, vec__11004, seq__11005, first__11006, seq__11005__$1, p0, pr, ps, vec__11007, k, ks, op, p1, ret, forms, rep_PLUS_, maybe, kps), x, cljs.core.reverse.call(null, ps));
        return cljs.spec.op_unform.call(null, p1, px);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), G__11011)) {
          return cljs.core.mapcat.call(null, function(G__11011, map__11003, map__11003__$1, p__$1, vec__11004, seq__11005, first__11006, seq__11005__$1, p0, pr, ps, vec__11007, k, ks, op, p1, ret, forms, rep_PLUS_, maybe, kps) {
            return function(p1__10989_SHARP_) {
              return cljs.spec.op_unform.call(null, p1, p1__10989_SHARP_);
            };
          }(G__11011, map__11003, map__11003__$1, p__$1, vec__11004, seq__11005, first__11006, seq__11005__$1, p0, pr, ps, vec__11007, k, ks, op, p1, ret, forms, rep_PLUS_, maybe, kps), x);
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), G__11011)) {
            if (cljs.core.truth_(rep_PLUS_)) {
              return cljs.core.mapcat.call(null, function(G__11011, map__11003, map__11003__$1, p__$1, vec__11004, seq__11005, first__11006, seq__11005__$1, p0, pr, ps, vec__11007, k, ks, op, p1, ret, forms, rep_PLUS_, maybe, kps) {
                return function(p1__10990_SHARP_) {
                  return cljs.spec.op_unform.call(null, p0, p1__10990_SHARP_);
                };
              }(G__11011, map__11003, map__11003__$1, p__$1, vec__11004, seq__11005, first__11006, seq__11005__$1, p0, pr, ps, vec__11007, k, ks, op, p1, ret, forms, rep_PLUS_, maybe, kps), x);
            } else {
              return cljs.core.mapcat.call(null, function(G__11011, map__11003, map__11003__$1, p__$1, vec__11004, seq__11005, first__11006, seq__11005__$1, p0, pr, ps, vec__11007, k, ks, op, p1, ret, forms, rep_PLUS_, maybe, kps) {
                return function(k__$1) {
                  if (cljs.core.contains_QMARK_.call(null, x, k__$1)) {
                    return cljs.spec.op_unform.call(null, kps.call(null, k__$1), cljs.core.get.call(null, x, k__$1));
                  } else {
                    return null;
                  }
                };
              }(G__11011, map__11003, map__11003__$1, p__$1, vec__11004, seq__11005, first__11006, seq__11005__$1, p0, pr, ps, vec__11007, k, ks, op, p1, ret, forms, rep_PLUS_, maybe, kps), ks);
            }
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), G__11011)) {
              if (cljs.core.truth_(maybe)) {
                return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.unform.call(null, p0, x)], null);
              } else {
                var vec__11012 = x;
                var k__$1 = cljs.core.nth.call(null, vec__11012, 0, null);
                var v = cljs.core.nth.call(null, vec__11012, 1, null);
                return cljs.spec.op_unform.call(null, kps.call(null, k__$1), v);
              }
            } else {
              throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.spec.add_ret = function cljs$spec$add_ret(p, r, k) {
  var map__11018 = cljs.spec.reg_resolve_BANG_.call(null, p);
  var map__11018__$1 = (!(map__11018 == null) ? map__11018.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11018.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11018) : map__11018;
  var p__$1 = map__11018__$1;
  var op = cljs.core.get.call(null, map__11018__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  var ps = cljs.core.get.call(null, map__11018__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var splice = cljs.core.get.call(null, map__11018__$1, new cljs.core.Keyword(null, "splice", "splice", 449588165));
  var prop = function(map__11018, map__11018__$1, p__$1, op, ps, splice) {
    return function() {
      var ret = cljs.spec.preturn.call(null, p__$1);
      if (cljs.core.empty_QMARK_.call(null, ret)) {
        return r;
      } else {
        return (cljs.core.truth_(splice) ? cljs.core.into : cljs.core.conj).call(null, r, cljs.core.truth_(k) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([k, ret]) : ret);
      }
    };
  }(map__11018, map__11018__$1, p__$1, op, ps, splice);
  var G__11020 = op;
  if (cljs.core._EQ_.call(null, null, G__11020)) {
    return r;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), G__11020)) {
      var ret = cljs.spec.preturn.call(null, p__$1);
      if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718))) {
        return r;
      } else {
        return cljs.core.conj.call(null, r, cljs.core.truth_(k) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([k, ret]) : ret);
      }
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), G__11020)) {
        var ret = cljs.spec.preturn.call(null, p__$1);
        if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718))) {
          return r;
        } else {
          return cljs.core.conj.call(null, r, cljs.core.truth_(k) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([k, ret]) : ret);
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), G__11020)) {
          var ret = cljs.spec.preturn.call(null, p__$1);
          if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718))) {
            return r;
          } else {
            return cljs.core.conj.call(null, r, cljs.core.truth_(k) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([k, ret]) : ret);
          }
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), G__11020)) {
            return prop.call(null);
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), G__11020)) {
              return prop.call(null);
            } else {
              throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.spec.deriv = function cljs$spec$deriv(p, x) {
  var map__11031 = cljs.spec.reg_resolve_BANG_.call(null, p);
  var map__11031__$1 = (!(map__11031 == null) ? map__11031.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11031.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11031) : map__11031;
  var p__$1 = map__11031__$1;
  var vec__11032 = cljs.core.get.call(null, map__11031__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var seq__11033 = cljs.core.seq.call(null, vec__11032);
  var first__11034 = cljs.core.first.call(null, seq__11033);
  var seq__11033__$1 = cljs.core.next.call(null, seq__11033);
  var p0 = first__11034;
  var pr = seq__11033__$1;
  var ps = vec__11032;
  var vec__11035 = cljs.core.get.call(null, map__11031__$1, new cljs.core.Keyword(null, "ks", "ks", 1900203942));
  var seq__11036 = cljs.core.seq.call(null, vec__11035);
  var first__11037 = cljs.core.first.call(null, seq__11036);
  var seq__11036__$1 = cljs.core.next.call(null, seq__11036);
  var k0 = first__11037;
  var kr = seq__11036__$1;
  var ks = vec__11035;
  var op = cljs.core.get.call(null, map__11031__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  var p1 = cljs.core.get.call(null, map__11031__$1, new cljs.core.Keyword(null, "p1", "p1", -936759954));
  var p2 = cljs.core.get.call(null, map__11031__$1, new cljs.core.Keyword(null, "p2", "p2", 905500641));
  var ret = cljs.core.get.call(null, map__11031__$1, new cljs.core.Keyword(null, "ret", "ret", -468222814));
  var splice = cljs.core.get.call(null, map__11031__$1, new cljs.core.Keyword(null, "splice", "splice", 449588165));
  var forms = cljs.core.get.call(null, map__11031__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350));
  if (cljs.core.truth_(p__$1)) {
    var G__11039 = op;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), G__11039)) {
      return null;
    } else {
      if (cljs.core._EQ_.call(null, null, G__11039)) {
        var ret__$1 = cljs.spec.dt.call(null, p__$1, x, p__$1);
        if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret__$1))) {
          return null;
        } else {
          return cljs.spec.accept.call(null, ret__$1);
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), G__11039)) {
          var temp__4657__auto__ = cljs.spec.deriv.call(null, p1, x);
          if (cljs.core.truth_(temp__4657__auto__)) {
            var p1__$1 = temp__4657__auto__;
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), (new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204)).cljs$core$IFn$_invoke$arity$1(p1__$1))) {
              var ret__$1 = cljs.spec.and_preds.call(null, cljs.spec.preturn.call(null, p1__$1), ps, cljs.core.next.call(null, forms));
              if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret__$1))) {
                return null;
              } else {
                return cljs.spec.accept.call(null, ret__$1);
              }
            } else {
              return cljs.spec.amp_impl.call(null, p1__$1, ps, forms);
            }
          } else {
            return null;
          }
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), G__11039)) {
            return cljs.spec.alt2.call(null, cljs.spec.pcat_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "ps", "ps", 292358046), cljs.core.cons.call(null, cljs.spec.deriv.call(null, p0, x), pr), new cljs.core.Keyword(null, "ks", "ks", 1900203942), ks, new cljs.core.Keyword(null, "forms", "forms", 2045992350), forms, new cljs.core.Keyword(null, "ret", "ret", -468222814), ret], null)), cljs.core.truth_(cljs.spec.accept_nil_QMARK_.call(null, p0)) ? cljs.spec.deriv.call(null, 
            cljs.spec.pcat_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "ps", "ps", 292358046), pr, new cljs.core.Keyword(null, "ks", "ks", 1900203942), kr, new cljs.core.Keyword(null, "forms", "forms", 2045992350), cljs.core.next.call(null, forms), new cljs.core.Keyword(null, "ret", "ret", -468222814), cljs.spec.add_ret.call(null, p0, ret, k0)], null)), x) : null);
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), G__11039)) {
              return cljs.spec.alt_STAR_.call(null, cljs.core.map.call(null, function(G__11039, map__11031, map__11031__$1, p__$1, vec__11032, seq__11033, first__11034, seq__11033__$1, p0, pr, ps, vec__11035, seq__11036, first__11037, seq__11036__$1, k0, kr, ks, op, p1, p2, ret, splice, forms) {
                return function(p1__11021_SHARP_) {
                  return cljs.spec.deriv.call(null, p1__11021_SHARP_, x);
                };
              }(G__11039, map__11031, map__11031__$1, p__$1, vec__11032, seq__11033, first__11034, seq__11033__$1, p0, pr, ps, vec__11035, seq__11036, first__11037, seq__11036__$1, k0, kr, ks, op, p1, p2, ret, splice, forms), ps), ks, forms);
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), G__11039)) {
                return cljs.spec.alt2.call(null, cljs.spec.rep_STAR_.call(null, cljs.spec.deriv.call(null, p1, x), p2, ret, splice, forms), cljs.core.truth_(cljs.spec.accept_nil_QMARK_.call(null, p1)) ? cljs.spec.deriv.call(null, cljs.spec.rep_STAR_.call(null, p2, p2, cljs.spec.add_ret.call(null, p1, ret, null), splice, forms), x) : null);
              } else {
                throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join(""));
              }
            }
          }
        }
      }
    }
  } else {
    return null;
  }
};
cljs.spec.op_describe = function cljs$spec$op_describe(p) {
  var map__11043 = cljs.spec.reg_resolve_BANG_.call(null, p);
  var map__11043__$1 = (!(map__11043 == null) ? map__11043.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11043.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11043) : map__11043;
  var p__$1 = map__11043__$1;
  var op = cljs.core.get.call(null, map__11043__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  var ps = cljs.core.get.call(null, map__11043__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var ks = cljs.core.get.call(null, map__11043__$1, new cljs.core.Keyword(null, "ks", "ks", 1900203942));
  var forms = cljs.core.get.call(null, map__11043__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350));
  var splice = cljs.core.get.call(null, map__11043__$1, new cljs.core.Keyword(null, "splice", "splice", 449588165));
  var p1 = cljs.core.get.call(null, map__11043__$1, new cljs.core.Keyword(null, "p1", "p1", -936759954));
  var rep_PLUS_ = cljs.core.get.call(null, map__11043__$1, new cljs.core.Keyword(null, "rep+", "rep+", -281382396));
  var maybe = cljs.core.get.call(null, map__11043__$1, new cljs.core.Keyword(null, "maybe", "maybe", -314397560));
  if (cljs.core.truth_(p__$1)) {
    var G__11045 = op;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), G__11045)) {
      return null;
    } else {
      if (cljs.core._EQ_.call(null, null, G__11045)) {
        return p__$1;
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), G__11045)) {
          return cljs.core.list_STAR_.call(null, new cljs.core.Symbol("clojure.spec", "\x26", "clojure.spec/\x26", -770935491, null), cljs.spec.op_describe.call(null, p1), forms);
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), G__11045)) {
            if (cljs.core.truth_(rep_PLUS_)) {
              return cljs.core._conj.call(null, function() {
                var x__8102__auto__ = rep_PLUS_;
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
              }(), new cljs.core.Symbol("cljs.spec", "+", "cljs.spec/+", -342318319, null));
            } else {
              return cljs.core.cons.call(null, new cljs.core.Symbol("cljs.spec", "cat", "cljs.spec/cat", 850003863, null), cljs.core.mapcat.call(null, cljs.core.vector, function() {
                var or__7260__auto__ = cljs.core.seq.call(null, ks);
                if (or__7260__auto__) {
                  return or__7260__auto__;
                } else {
                  return cljs.core.repeat.call(null, new cljs.core.Keyword(null, "_", "_", 1453416199));
                }
              }(), forms));
            }
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), G__11045)) {
              if (cljs.core.truth_(maybe)) {
                return cljs.core._conj.call(null, function() {
                  var x__8102__auto__ = maybe;
                  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
                }(), new cljs.core.Symbol("cljs.spec", "?", "cljs.spec/?", -1542560017, null));
              } else {
                return cljs.core.cons.call(null, new cljs.core.Symbol("cljs.spec", "alt", "cljs.spec/alt", 157113396, null), cljs.core.mapcat.call(null, cljs.core.vector, ks, forms));
              }
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), G__11045)) {
                var x__8102__auto__ = cljs.core.truth_(splice) ? new cljs.core.Symbol("cljs.spec", "+", "cljs.spec/+", -342318319, null) : new cljs.core.Symbol("cljs.spec", "*", "cljs.spec/*", -858366320, null);
                return cljs.core._conj.call(null, function() {
                  var x__8102__auto____$1 = forms;
                  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto____$1);
                }(), x__8102__auto__);
              } else {
                throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join(""));
              }
            }
          }
        }
      }
    }
  } else {
    return null;
  }
};
cljs.spec.op_explain = function cljs$spec$op_explain(form, p, path, via, in$, input) {
  var vec__11059 = input;
  var x = cljs.core.nth.call(null, vec__11059, 0, null);
  var input__$1 = vec__11059;
  var map__11062 = cljs.spec.reg_resolve_BANG_.call(null, p);
  var map__11062__$1 = (!(map__11062 == null) ? map__11062.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11062.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11062) : map__11062;
  var p__$1 = map__11062__$1;
  var op = cljs.core.get.call(null, map__11062__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  var ps = cljs.core.get.call(null, map__11062__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var ks = cljs.core.get.call(null, map__11062__$1, new cljs.core.Keyword(null, "ks", "ks", 1900203942));
  var forms = cljs.core.get.call(null, map__11062__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350));
  var splice = cljs.core.get.call(null, map__11062__$1, new cljs.core.Keyword(null, "splice", "splice", 449588165));
  var p1 = cljs.core.get.call(null, map__11062__$1, new cljs.core.Keyword(null, "p1", "p1", -936759954));
  var p2 = cljs.core.get.call(null, map__11062__$1, new cljs.core.Keyword(null, "p2", "p2", 905500641));
  var via__$1 = function() {
    var temp__4655__auto__ = cljs.spec.spec_name.call(null, p__$1);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var name = temp__4655__auto__;
      return cljs.core.conj.call(null, via, name);
    } else {
      return via;
    }
  }();
  var insufficient = function(vec__11059, x, input__$1, map__11062, map__11062__$1, p__$1, op, ps, ks, forms, splice, p1, p2, via__$1) {
    return function(path__$1, form__$1) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), path__$1, new cljs.core.Keyword(null, "reason", "reason", -2070751759), "Insufficient input", new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.spec.abbrev.call(null, form__$1), new cljs.core.Keyword(null, "val", "val", 128701612), cljs.core.List.EMPTY, new cljs.core.Keyword(null, "via", "via", 
      -1904457336), via__$1, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null)], null);
    };
  }(vec__11059, x, input__$1, map__11062, map__11062__$1, p__$1, op, ps, ks, forms, splice, p1, p2, via__$1);
  if (cljs.core.truth_(p__$1)) {
    var G__11064 = op;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), G__11064)) {
      return null;
    } else {
      if (cljs.core._EQ_.call(null, null, G__11064)) {
        if (cljs.core.empty_QMARK_.call(null, input__$1)) {
          return insufficient.call(null, path, form);
        } else {
          return cljs.spec.explain_1.call(null, form, p__$1, path, via__$1, in$, x);
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), G__11064)) {
          if (cljs.core.empty_QMARK_.call(null, input__$1)) {
            if (cljs.core.truth_(cljs.spec.accept_nil_QMARK_.call(null, p1))) {
              return cljs.spec.explain_pred_list.call(null, forms, ps, path, via__$1, in$, cljs.spec.preturn.call(null, p1));
            } else {
              return insufficient.call(null, path, cljs.spec.op_describe.call(null, p1));
            }
          } else {
            var temp__4655__auto__ = cljs.spec.deriv.call(null, p1, x);
            if (cljs.core.truth_(temp__4655__auto__)) {
              var p1__$1 = temp__4655__auto__;
              return cljs.spec.explain_pred_list.call(null, forms, ps, path, via__$1, in$, cljs.spec.preturn.call(null, p1__$1));
            } else {
              return cljs.spec.op_explain.call(null, cljs.spec.op_describe.call(null, p1), p1, path, via__$1, in$, input__$1);
            }
          }
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), G__11064)) {
            var pkfs = cljs.core.map.call(null, cljs.core.vector, ps, function() {
              var or__7260__auto__ = cljs.core.seq.call(null, ks);
              if (or__7260__auto__) {
                return or__7260__auto__;
              } else {
                return cljs.core.repeat.call(null, null);
              }
            }(), function() {
              var or__7260__auto__ = cljs.core.seq.call(null, forms);
              if (or__7260__auto__) {
                return or__7260__auto__;
              } else {
                return cljs.core.repeat.call(null, null);
              }
            }());
            var vec__11065 = cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, pkfs)) ? cljs.core.first.call(null, pkfs) : cljs.core.first.call(null, cljs.core.remove.call(null, function(pkfs, G__11064, vec__11059, x, input__$1, map__11062, map__11062__$1, p__$1, op, ps, ks, forms, splice, p1, p2, via__$1, insufficient) {
              return function(p__11068) {
                var vec__11069 = p__11068;
                var p__$2 = cljs.core.nth.call(null, vec__11069, 0, null);
                return cljs.spec.accept_nil_QMARK_.call(null, p__$2);
              };
            }(pkfs, G__11064, vec__11059, x, input__$1, map__11062, map__11062__$1, p__$1, op, ps, ks, forms, splice, p1, p2, via__$1, insufficient), pkfs));
            var pred = cljs.core.nth.call(null, vec__11065, 0, null);
            var k = cljs.core.nth.call(null, vec__11065, 1, null);
            var form__$1 = cljs.core.nth.call(null, vec__11065, 2, null);
            var path__$1 = cljs.core.truth_(k) ? cljs.core.conj.call(null, path, k) : path;
            var form__$2 = function() {
              var or__7260__auto__ = form__$1;
              if (cljs.core.truth_(or__7260__auto__)) {
                return or__7260__auto__;
              } else {
                return cljs.spec.op_describe.call(null, pred);
              }
            }();
            if (cljs.core.empty_QMARK_.call(null, input__$1) && cljs.core.not.call(null, pred)) {
              return insufficient.call(null, path__$1, form__$2);
            } else {
              return cljs.spec.op_explain.call(null, form__$2, pred, path__$1, via__$1, in$, input__$1);
            }
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), G__11064)) {
              if (cljs.core.empty_QMARK_.call(null, input__$1)) {
                return insufficient.call(null, path, cljs.spec.op_describe.call(null, p__$1));
              } else {
                return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map.call(null, function(G__11064, vec__11059, x, input__$1, map__11062, map__11062__$1, p__$1, op, ps, ks, forms, splice, p1, p2, via__$1, insufficient) {
                  return function(k, form__$1, pred) {
                    return cljs.spec.op_explain.call(null, function() {
                      var or__7260__auto__ = form__$1;
                      if (cljs.core.truth_(or__7260__auto__)) {
                        return or__7260__auto__;
                      } else {
                        return cljs.spec.op_describe.call(null, pred);
                      }
                    }(), pred, cljs.core.truth_(k) ? cljs.core.conj.call(null, path, k) : path, via__$1, in$, input__$1);
                  };
                }(G__11064, vec__11059, x, input__$1, map__11062, map__11062__$1, p__$1, op, ps, ks, forms, splice, p1, p2, via__$1, insufficient), function() {
                  var or__7260__auto__ = cljs.core.seq.call(null, ks);
                  if (or__7260__auto__) {
                    return or__7260__auto__;
                  } else {
                    return cljs.core.repeat.call(null, null);
                  }
                }(), function() {
                  var or__7260__auto__ = cljs.core.seq.call(null, forms);
                  if (or__7260__auto__) {
                    return or__7260__auto__;
                  } else {
                    return cljs.core.repeat.call(null, null);
                  }
                }(), ps));
              }
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), G__11064)) {
                return cljs.spec.op_explain.call(null, p1 === p2 ? forms : cljs.spec.op_describe.call(null, p1), p1, path, via__$1, in$, input__$1);
              } else {
                throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join(""));
              }
            }
          }
        }
      }
    }
  } else {
    return null;
  }
};
cljs.spec.re_gen = function cljs$spec$re_gen(p, overrides, path, rmap, f) {
  var map__11078 = cljs.spec.reg_resolve_BANG_.call(null, p);
  var map__11078__$1 = (!(map__11078 == null) ? map__11078.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11078.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11078) : map__11078;
  var p__$1 = map__11078__$1;
  var ps = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword(null, "ps", "ps", 292358046));
  var forms = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword(null, "forms", "forms", 2045992350));
  var p2 = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword(null, "p2", "p2", 905500641));
  var ret = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword(null, "ret", "ret", -468222814));
  var splice = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword(null, "splice", "splice", 449588165));
  var ks = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword(null, "ks", "ks", 1900203942));
  var p1 = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword(null, "p1", "p1", -936759954));
  var gfn = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword("cljs.spec", "gfn", "cljs.spec/gfn", -432034727));
  var id = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var op = cljs.core.get.call(null, map__11078__$1, new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204));
  var rmap__$1 = cljs.core.truth_(id) ? cljs.spec.inck.call(null, rmap, id) : rmap;
  var ggens = function(map__11078, map__11078__$1, p__$1, ps, forms, p2, ret, splice, ks, p1, gfn, id, op, rmap__$1) {
    return function(ps__$1, ks__$1, forms__$1) {
      var gen = function(map__11078, map__11078__$1, p__$1, ps, forms, p2, ret, splice, ks, p1, gfn, id, op, rmap__$1) {
        return function(p__$2, k, f__$1) {
          if (cljs.core.truth_(function() {
            var and__7248__auto__ = rmap__$1;
            if (cljs.core.truth_(and__7248__auto__)) {
              var and__7248__auto____$1 = id;
              if (cljs.core.truth_(and__7248__auto____$1)) {
                var and__7248__auto____$2 = k;
                if (cljs.core.truth_(and__7248__auto____$2)) {
                  return cljs.spec.recur_limit_QMARK_.call(null, rmap__$1, id, path, k);
                } else {
                  return and__7248__auto____$2;
                }
              } else {
                return and__7248__auto____$1;
              }
            } else {
              return and__7248__auto__;
            }
          }())) {
            return null;
          } else {
            if (cljs.core.truth_(id)) {
              return cljs.spec.impl.gen.delay_impl.call(null, new cljs.core.Delay(function(map__11078, map__11078__$1, p__$1, ps, forms, p2, ret, splice, ks, p1, gfn, id, op, rmap__$1) {
                return function() {
                  return cljs.spec.re_gen.call(null, p__$2, overrides, cljs.core.truth_(k) ? cljs.core.conj.call(null, path, k) : path, rmap__$1, function() {
                    var or__7260__auto__ = f__$1;
                    if (cljs.core.truth_(or__7260__auto__)) {
                      return or__7260__auto__;
                    } else {
                      return p__$2;
                    }
                  }());
                };
              }(map__11078, map__11078__$1, p__$1, ps, forms, p2, ret, splice, ks, p1, gfn, id, op, rmap__$1), null));
            } else {
              return cljs.spec.re_gen.call(null, p__$2, overrides, cljs.core.truth_(k) ? cljs.core.conj.call(null, path, k) : path, rmap__$1, function() {
                var or__7260__auto__ = f__$1;
                if (cljs.core.truth_(or__7260__auto__)) {
                  return or__7260__auto__;
                } else {
                  return p__$2;
                }
              }());
            }
          }
        };
      }(map__11078, map__11078__$1, p__$1, ps, forms, p2, ret, splice, ks, p1, gfn, id, op, rmap__$1);
      return cljs.core.map.call(null, gen, ps__$1, function() {
        var or__7260__auto__ = cljs.core.seq.call(null, ks__$1);
        if (or__7260__auto__) {
          return or__7260__auto__;
        } else {
          return cljs.core.repeat.call(null, null);
        }
      }(), function() {
        var or__7260__auto__ = cljs.core.seq.call(null, forms__$1);
        if (or__7260__auto__) {
          return or__7260__auto__;
        } else {
          return cljs.core.repeat.call(null, null);
        }
      }());
    };
  }(map__11078, map__11078__$1, p__$1, ps, forms, p2, ret, splice, ks, p1, gfn, id, op, rmap__$1);
  var or__7260__auto__ = function() {
    var temp__4657__auto__ = cljs.core.get.call(null, overrides, path);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var g = temp__4657__auto__;
      var G__11081 = op;
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "accept", "accept", 1874130431), G__11081)) {
        return cljs.spec.impl.gen.fmap.call(null, cljs.core.vector, g);
      } else {
        if (cljs.core._EQ_.call(null, null, G__11081)) {
          return cljs.spec.impl.gen.fmap.call(null, cljs.core.vector, g);
        } else {
          return g;
        }
      }
    } else {
      return null;
    }
  }();
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    var or__7260__auto____$1 = cljs.core.truth_(gfn) ? gfn.call(null) : null;
    if (cljs.core.truth_(or__7260__auto____$1)) {
      return or__7260__auto____$1;
    } else {
      if (cljs.core.truth_(p__$1)) {
        var G__11082 = op;
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "accept", "cljs.spec/accept", -1753298186), G__11082)) {
          if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718))) {
            return cljs.spec.impl.gen.return$.call(null, cljs.core.PersistentVector.EMPTY);
          } else {
            return cljs.spec.impl.gen.return$.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ret], null));
          }
        } else {
          if (cljs.core._EQ_.call(null, null, G__11082)) {
            var temp__4657__auto__ = cljs.spec.gensub.call(null, p__$1, overrides, path, rmap__$1, f);
            if (cljs.core.truth_(temp__4657__auto__)) {
              var g = temp__4657__auto__;
              return cljs.spec.impl.gen.fmap.call(null, cljs.core.vector, g);
            } else {
              return null;
            }
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "amp", "cljs.spec/amp", -1217943932), G__11082)) {
              return cljs.spec.re_gen.call(null, p1, overrides, path, rmap__$1, cljs.spec.op_describe.call(null, p1));
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649), G__11082)) {
                var gens = ggens.call(null, ps, ks, forms);
                if (cljs.core.every_QMARK_.call(null, cljs.core.identity, gens)) {
                  return cljs.core.apply.call(null, cljs.spec.impl.gen.cat, gens);
                } else {
                  return null;
                }
              } else {
                if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "alt", "cljs.spec/alt", -1483418131), G__11082)) {
                  var gens = cljs.core.remove.call(null, cljs.core.nil_QMARK_, ggens.call(null, ps, ks, forms));
                  if (cljs.core.empty_QMARK_.call(null, gens)) {
                    return null;
                  } else {
                    return cljs.spec.impl.gen.one_of.call(null, gens);
                  }
                } else {
                  if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.spec", "rep", "cljs.spec/rep", -556916491), G__11082)) {
                    if (cljs.core.truth_(cljs.spec.recur_limit_QMARK_.call(null, rmap__$1, id, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [id], null), id))) {
                      return cljs.spec.impl.gen.return$.call(null, cljs.core.PersistentVector.EMPTY);
                    } else {
                      var temp__4657__auto__ = cljs.spec.re_gen.call(null, p2, overrides, path, rmap__$1, forms);
                      if (cljs.core.truth_(temp__4657__auto__)) {
                        var g = temp__4657__auto__;
                        return cljs.spec.impl.gen.fmap.call(null, function(g, temp__4657__auto__, G__11082, or__7260__auto____$1, or__7260__auto__, map__11078, map__11078__$1, p__$1, ps, forms, p2, ret, splice, ks, p1, gfn, id, op, rmap__$1, ggens) {
                          return function(p1__11072_SHARP_) {
                            return cljs.core.apply.call(null, cljs.core.concat, p1__11072_SHARP_);
                          };
                        }(g, temp__4657__auto__, G__11082, or__7260__auto____$1, or__7260__auto__, map__11078, map__11078__$1, p__$1, ps, forms, p2, ret, splice, ks, p1, gfn, id, op, rmap__$1, ggens), cljs.spec.impl.gen.vector.call(null, g));
                      } else {
                        return null;
                      }
                    }
                  } else {
                    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join(""));
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.spec.re_conform = function cljs$spec$re_conform(p, p__11083) {
  while (true) {
    var vec__11087 = p__11083;
    var seq__11088 = cljs.core.seq.call(null, vec__11087);
    var first__11089 = cljs.core.first.call(null, seq__11088);
    var seq__11088__$1 = cljs.core.next.call(null, seq__11088);
    var x = first__11089;
    var xs = seq__11088__$1;
    var data = vec__11087;
    if (cljs.core.empty_QMARK_.call(null, data)) {
      if (cljs.core.truth_(cljs.spec.accept_nil_QMARK_.call(null, p))) {
        var ret = cljs.spec.preturn.call(null, p);
        if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718))) {
          return null;
        } else {
          return ret;
        }
      } else {
        return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
      }
    } else {
      var temp__4655__auto__ = cljs.spec.deriv.call(null, p, x);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var dp = temp__4655__auto__;
        var G__11090 = dp;
        var G__11091 = xs;
        p = G__11090;
        p__11083 = G__11091;
        continue;
      } else {
        return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
      }
    }
    break;
  }
};
cljs.spec.re_explain = function cljs$spec$re_explain(path, via, in$, re, input) {
  var p = re;
  var G__11105 = input;
  var vec__11106 = G__11105;
  var seq__11107 = cljs.core.seq.call(null, vec__11106);
  var first__11108 = cljs.core.first.call(null, seq__11107);
  var seq__11107__$1 = cljs.core.next.call(null, seq__11107);
  var x = first__11108;
  var xs = seq__11107__$1;
  var data = vec__11106;
  var i = 0;
  var p__$1 = p;
  var G__11105__$1 = G__11105;
  var i__$1 = i;
  while (true) {
    var p__$2 = p__$1;
    var vec__11109 = G__11105__$1;
    var seq__11110 = cljs.core.seq.call(null, vec__11109);
    var first__11111 = cljs.core.first.call(null, seq__11110);
    var seq__11110__$1 = cljs.core.next.call(null, seq__11110);
    var x__$1 = first__11111;
    var xs__$1 = seq__11110__$1;
    var data__$1 = vec__11109;
    var i__$2 = i__$1;
    if (cljs.core.empty_QMARK_.call(null, data__$1)) {
      if (cljs.core.truth_(cljs.spec.accept_nil_QMARK_.call(null, p__$2))) {
        return null;
      } else {
        return cljs.spec.op_explain.call(null, cljs.spec.op_describe.call(null, p__$2), p__$2, path, via, in$, null);
      }
    } else {
      var temp__4655__auto__ = cljs.spec.deriv.call(null, p__$2, x__$1);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var dp = temp__4655__auto__;
        var G__11112 = dp;
        var G__11113 = xs__$1;
        var G__11114 = i__$2 + 1;
        p__$1 = G__11112;
        G__11105__$1 = G__11113;
        i__$1 = G__11114;
        continue;
      } else {
        if (cljs.core.truth_(cljs.spec.accept_QMARK_.call(null, p__$2))) {
          if (cljs.core._EQ_.call(null, (new cljs.core.Keyword("cljs.spec", "op", "cljs.spec/op", 939378204)).cljs$core$IFn$_invoke$arity$1(p__$2), new cljs.core.Keyword("cljs.spec", "pcat", "cljs.spec/pcat", -1959753649))) {
            return cljs.spec.op_explain.call(null, cljs.spec.op_describe.call(null, p__$2), p__$2, path, via, cljs.core.conj.call(null, in$, i__$2), cljs.core.seq.call(null, data__$1));
          } else {
            return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "reason", "reason", -2070751759), "Extra input", new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.spec.abbrev.call(null, cljs.spec.op_describe.call(null, re)), new cljs.core.Keyword(null, "val", "val", 128701612), data__$1, new cljs.core.Keyword(null, 
            "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), cljs.core.conj.call(null, in$, i__$2)], null)], null);
          }
        } else {
          var or__7260__auto__ = cljs.spec.op_explain.call(null, cljs.spec.op_describe.call(null, p__$2), p__$2, path, via, cljs.core.conj.call(null, in$, i__$2), cljs.core.seq.call(null, data__$1));
          if (cljs.core.truth_(or__7260__auto__)) {
            return or__7260__auto__;
          } else {
            return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "reason", "reason", -2070751759), "Extra input", new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.spec.abbrev.call(null, cljs.spec.op_describe.call(null, p__$2)), new cljs.core.Keyword(null, "val", "val", 128701612), data__$1, new cljs.core.Keyword(null, 
            "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), cljs.core.conj.call(null, in$, i__$2)], null)], null);
          }
        }
      }
    }
    break;
  }
};
cljs.spec.regex_spec_impl = function cljs$spec$regex_spec_impl(re, gfn) {
  if (typeof cljs.spec.t_cljs$spec11118 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec11118 = function(re, gfn, meta11119) {
      this.re = re;
      this.gfn = gfn;
      this.meta11119 = meta11119;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11120, meta11119__$1) {
      var self__ = this;
      var _11120__$1 = this;
      return new cljs.spec.t_cljs$spec11118(self__.re, self__.gfn, meta11119__$1);
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11120) {
      var self__ = this;
      var _11120__$1 = this;
      return self__.meta11119;
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(s) {
      var self__ = this;
      var s__$1 = this;
      return s__$1;
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(s, _) {
      var self__ = this;
      var s__$1 = this;
      return s__$1;
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(_, x) {
      var self__ = this;
      var ___$1 = this;
      if (x == null || cljs.core.coll_QMARK_.call(null, x)) {
        return cljs.spec.re_conform.call(null, self__.re, cljs.core.seq.call(null, x));
      } else {
        return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
      }
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(_, x) {
      var self__ = this;
      var ___$1 = this;
      return cljs.spec.op_unform.call(null, self__.re, x);
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(_, path, via, in$, x) {
      var self__ = this;
      var ___$1 = this;
      if (x == null || cljs.core.coll_QMARK_.call(null, x)) {
        return cljs.spec.re_explain.call(null, path, via, in$, self__.re, cljs.core.seq.call(null, x));
      } else {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.spec.abbrev.call(null, cljs.spec.op_describe.call(null, self__.re)), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), 
        in$], null)], null);
      }
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(_, overrides, path, rmap) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.gfn)) {
        return self__.gfn.call(null);
      } else {
        return cljs.spec.re_gen.call(null, self__.re, overrides, path, rmap, cljs.spec.op_describe.call(null, self__.re));
      }
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(_, gfn__$1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.spec.regex_spec_impl.call(null, self__.re, gfn__$1);
    };
    cljs.spec.t_cljs$spec11118.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.spec.op_describe.call(null, self__.re);
    };
    cljs.spec.t_cljs$spec11118.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "re", "re", 1869207729, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "meta11119", "meta11119", 260165545, null)], null);
    };
    cljs.spec.t_cljs$spec11118.cljs$lang$type = true;
    cljs.spec.t_cljs$spec11118.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec11118";
    cljs.spec.t_cljs$spec11118.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec11118");
    };
    cljs.spec.__GT_t_cljs$spec11118 = function cljs$spec$regex_spec_impl_$___GT_t_cljs$spec11118(re__$1, gfn__$1, meta11119) {
      return new cljs.spec.t_cljs$spec11118(re__$1, gfn__$1, meta11119);
    };
  }
  return new cljs.spec.t_cljs$spec11118(re, gfn, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.call_valid_QMARK_ = function cljs$spec$call_valid_QMARK_(f, specs, args) {
  var cargs = cljs.spec.conform.call(null, (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(specs), args);
  if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, cargs))) {
    return null;
  } else {
    var ret = cljs.core.apply.call(null, f, args);
    var cret = cljs.spec.conform.call(null, (new cljs.core.Keyword(null, "ret", "ret", -468222814)).cljs$core$IFn$_invoke$arity$1(specs), ret);
    var and__7248__auto__ = cljs.core.not.call(null, cljs.spec.invalid_QMARK_.call(null, cret));
    if (and__7248__auto__) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "fn", "fn", -1175266204)).cljs$core$IFn$_invoke$arity$1(specs))) {
        return cljs.spec.pvalid_QMARK_.call(null, (new cljs.core.Keyword(null, "fn", "fn", -1175266204)).cljs$core$IFn$_invoke$arity$1(specs), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "args", "args", 1315556576), cargs, new cljs.core.Keyword(null, "ret", "ret", -468222814), cret], null));
      } else {
        return true;
      }
    } else {
      return and__7248__auto__;
    }
  }
};
cljs.spec.validate_fn = function cljs$spec$validate_fn(f, specs, iters) {
  var g = cljs.spec.gen.call(null, (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(specs));
  var prop = cljs.spec.impl.gen.for_all_STAR_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [g], null), function(g) {
    return function(p1__11121_SHARP_) {
      return cljs.spec.call_valid_QMARK_.call(null, f, specs, p1__11121_SHARP_);
    };
  }(g));
  var ret = cljs.spec.impl.gen.quick_check.call(null, iters, prop);
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "smallest", "smallest", -152623883)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "shrunk", "shrunk", -2041664412)).cljs$core$IFn$_invoke$arity$1(ret));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var vec__11125 = temp__4655__auto__;
    var smallest = cljs.core.nth.call(null, vec__11125, 0, null);
    return smallest;
  } else {
    return f;
  }
};
cljs.spec.fspec_impl = function cljs$spec$fspec_impl(argspec, aform, retspec, rform, fnspec, fform, gfn) {
  var specs = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "args", "args", 1315556576), argspec, new cljs.core.Keyword(null, "ret", "ret", -468222814), retspec, new cljs.core.Keyword(null, "fn", "fn", -1175266204), fnspec], null);
  if (typeof cljs.spec.t_cljs$spec11134 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec11134 = function(argspec, aform, retspec, rform, fnspec, fform, gfn, specs, meta11135) {
      this.argspec = argspec;
      this.aform = aform;
      this.retspec = retspec;
      this.rform = rform;
      this.fnspec = fnspec;
      this.fform = fform;
      this.gfn = gfn;
      this.specs = specs;
      this.meta11135 = meta11135;
      this.cljs$lang$protocol_mask$partition0$ = 393472;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec11134.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(specs) {
      return function(_11136, meta11135__$1) {
        var self__ = this;
        var _11136__$1 = this;
        return new cljs.spec.t_cljs$spec11134(self__.argspec, self__.aform, self__.retspec, self__.rform, self__.fnspec, self__.fform, self__.gfn, self__.specs, meta11135__$1);
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$core$IMeta$_meta$arity$1 = function(specs) {
      return function(_11136) {
        var self__ = this;
        var _11136__$1 = this;
        return self__.meta11135;
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$core$ILookup$_lookup$arity$2 = function(specs) {
      return function(this$, k) {
        var self__ = this;
        var this$__$1 = this;
        return cljs.core.get.call(null, self__.specs, k);
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$core$ILookup$_lookup$arity$3 = function(specs) {
      return function(_, k, not_found) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.get.call(null, self__.specs, k, not_found);
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(specs) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(specs) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(specs) {
      return function(_, f) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.ifn_QMARK_.call(null, f)) {
          if (f === cljs.spec.validate_fn.call(null, f, self__.specs, cljs.spec._STAR_fspec_iterations_STAR_)) {
            return f;
          } else {
            return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
          }
        } else {
          return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
        }
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(specs) {
      return function(_, f) {
        var self__ = this;
        var ___$1 = this;
        return f;
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(specs) {
      return function(_, path, via, in$, f) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.ifn_QMARK_.call(null, f)) {
          var args = cljs.spec.validate_fn.call(null, f, self__.specs, 100);
          if (f === args) {
            return null;
          } else {
            var ret = function() {
              try {
                return cljs.core.apply.call(null, f, args);
              } catch (e11137) {
                if (e11137 instanceof Error) {
                  var t = e11137;
                  return t;
                } else {
                  throw e11137;
                }
              }
            }();
            if (ret instanceof Error) {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), cljs.core.list(new cljs.core.Symbol(null, "apply", "apply", -1334050276, null), new cljs.core.Symbol(null, "fn", "fn", 465265323, null)), new cljs.core.Keyword(null, "val", "val", 128701612), args, new cljs.core.Keyword(null, "reason", 
              "reason", -2070751759), ret.message, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null)], null);
            } else {
              var cret = cljs.spec.dt.call(null, self__.retspec, ret, self__.rform);
              if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, cret))) {
                return cljs.spec.explain_1.call(null, self__.rform, self__.retspec, cljs.core.conj.call(null, path, new cljs.core.Keyword(null, "ret", "ret", -468222814)), via, in$, ret);
              } else {
                if (cljs.core.truth_(self__.fnspec)) {
                  var cargs = cljs.spec.conform.call(null, self__.argspec, args);
                  return cljs.spec.explain_1.call(null, self__.fform, self__.fnspec, cljs.core.conj.call(null, path, new cljs.core.Keyword(null, "fn", "fn", -1175266204)), via, in$, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "args", "args", 1315556576), cargs, new cljs.core.Keyword(null, "ret", "ret", -468222814), cret], null));
                } else {
                  return null;
                }
              }
            }
          }
        } else {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "pred", "pred", 1927423397), new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Keyword(null, "val", "val", 128701612), f, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], 
          null)], null);
        }
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(specs) {
      return function(_, overrides, ___$1, ___$2) {
        var self__ = this;
        var ___$3 = this;
        if (cljs.core.truth_(self__.gfn)) {
          return self__.gfn.call(null);
        } else {
          return cljs.spec.impl.gen.return$.call(null, function(___$3, specs) {
            return function() {
              var G__11140__delegate = function(args) {
                if (cljs.core.truth_(cljs.spec.pvalid_QMARK_.call(null, self__.argspec, args))) {
                } else {
                  throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
                    var sb__8254__auto__ = new goog.string.StringBuffer;
                    var _STAR_print_newline_STAR_11138_11141 = cljs.core._STAR_print_newline_STAR_;
                    var _STAR_print_fn_STAR_11139_11142 = cljs.core._STAR_print_fn_STAR_;
                    cljs.core._STAR_print_newline_STAR_ = true;
                    cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_11138_11141, _STAR_print_fn_STAR_11139_11142, sb__8254__auto__, ___$3, specs) {
                      return function(x__8255__auto__) {
                        return sb__8254__auto__.append(x__8255__auto__);
                      };
                    }(_STAR_print_newline_STAR_11138_11141, _STAR_print_fn_STAR_11139_11142, sb__8254__auto__, ___$3, specs);
                    try {
                      cljs.spec.explain.call(null, self__.argspec, args);
                    } finally {
                      cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11139_11142;
                      cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_11138_11141;
                    }
                    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8254__auto__)].join("");
                  }()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(pvalid? argspec args)")].join(""));
                }
                return cljs.spec.impl.gen.generate.call(null, cljs.spec.gen.call(null, self__.retspec, overrides));
              };
              var G__11140 = function(var_args) {
                var args = null;
                if (arguments.length > 0) {
                  var G__11143__i = 0, G__11143__a = new Array(arguments.length - 0);
                  while (G__11143__i < G__11143__a.length) {
                    G__11143__a[G__11143__i] = arguments[G__11143__i + 0];
                    ++G__11143__i;
                  }
                  args = new cljs.core.IndexedSeq(G__11143__a, 0);
                }
                return G__11140__delegate.call(this, args);
              };
              G__11140.cljs$lang$maxFixedArity = 0;
              G__11140.cljs$lang$applyTo = function(arglist__11144) {
                var args = cljs.core.seq(arglist__11144);
                return G__11140__delegate(args);
              };
              G__11140.cljs$core$IFn$_invoke$arity$variadic = G__11140__delegate;
              return G__11140;
            }();
          }(___$3, specs));
        }
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(specs) {
      return function(_, gfn__$1) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.fspec_impl.call(null, self__.argspec, self__.aform, self__.retspec, self__.rform, self__.fnspec, self__.fform, gfn__$1);
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(specs) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "fspec", "cljs.spec/fspec", 982220571, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "args", "args", 1315556576)), function() {
          var x__8102__auto__ = self__.aform;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "ret", "ret", -468222814)), function() {
          var x__8102__auto__ = self__.rform;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "fn", "fn", -1175266204)), function() {
          var x__8102__auto__ = self__.fform;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }())));
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.getBasis = function(specs) {
      return function() {
        return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "argspec", "argspec", -1207762746, null), new cljs.core.Symbol(null, "aform", "aform", 531303525, null), new cljs.core.Symbol(null, "retspec", "retspec", -920025354, null), new cljs.core.Symbol(null, "rform", "rform", -1420499912, null), new cljs.core.Symbol(null, "fnspec", "fnspec", -1865712406, null), new cljs.core.Symbol(null, "fform", "fform", -176049972, null), new cljs.core.Symbol(null, 
        "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "specs", "specs", -1227865028, null), new cljs.core.Symbol(null, "meta11135", "meta11135", -1211129709, null)], null);
      };
    }(specs);
    cljs.spec.t_cljs$spec11134.cljs$lang$type = true;
    cljs.spec.t_cljs$spec11134.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec11134";
    cljs.spec.t_cljs$spec11134.cljs$lang$ctorPrWriter = function(specs) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec11134");
      };
    }(specs);
    cljs.spec.__GT_t_cljs$spec11134 = function(specs) {
      return function cljs$spec$fspec_impl_$___GT_t_cljs$spec11134(argspec__$1, aform__$1, retspec__$1, rform__$1, fnspec__$1, fform__$1, gfn__$1, specs__$1, meta11135) {
        return new cljs.spec.t_cljs$spec11134(argspec__$1, aform__$1, retspec__$1, rform__$1, fnspec__$1, fform__$1, gfn__$1, specs__$1, meta11135);
      };
    }(specs);
  }
  return new cljs.spec.t_cljs$spec11134(argspec, aform, retspec, rform, fnspec, fform, gfn, specs, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.def_impl.call(null, new cljs.core.Keyword("cljs.spec", "kvs-\x3emap", "cljs.spec/kvs-\x3emap", -1189105441), cljs.core.list(new cljs.core.Symbol("cljs.spec", "conformer", "cljs.spec/conformer", -236330417, null), cljs.core.list(new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "p1__11145#", "p1__11145#", -1175708383, null)], null), cljs.core.list(new cljs.core.Symbol("cljs.core", 
"zipmap", "cljs.core/zipmap", -1902130674, null), cljs.core.list(new cljs.core.Symbol("cljs.core", "map", "cljs.core/map", -338988913, null), new cljs.core.Keyword("cljs.spec", "k", "cljs.spec/k", 668466950), new cljs.core.Symbol(null, "p1__11145#", "p1__11145#", -1175708383, null)), cljs.core.list(new cljs.core.Symbol("cljs.core", "map", "cljs.core/map", -338988913, null), new cljs.core.Keyword("cljs.spec", "v", "cljs.spec/v", -1491964132), new cljs.core.Symbol(null, "p1__11145#", "p1__11145#", 
-1175708383, null)))), cljs.core.list(new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "p1__11146#", "p1__11146#", -552772026, null)], null), cljs.core.list(new cljs.core.Symbol("cljs.core", "map", "cljs.core/map", -338988913, null), cljs.core.list(new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "k", "k", -505765866, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null)], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("cljs.spec", "k", "cljs.spec/k", 668466950), new cljs.core.Symbol(null, "k", "k", -505765866, null), new cljs.core.Keyword("cljs.spec", "v", "cljs.spec/v", -1491964132), new cljs.core.Symbol(null, "v", "v", 1661996586, null)], 
null)), new cljs.core.Symbol(null, "p1__11146#", "p1__11146#", -552772026, null)))), cljs.spec.spec_impl.call(null, cljs.core.list(new cljs.core.Symbol("cljs.spec", "conformer", "cljs.spec/conformer", -236330417, null), cljs.core.list(new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "%", "%", -950237169, null)], null), cljs.core.list(new cljs.core.Symbol("cljs.core", 
"zipmap", "cljs.core/zipmap", -1902130674, null), cljs.core.list(new cljs.core.Symbol("cljs.core", "map", "cljs.core/map", -338988913, null), new cljs.core.Keyword("cljs.spec", "k", "cljs.spec/k", 668466950), new cljs.core.Symbol(null, "%", "%", -950237169, null)), cljs.core.list(new cljs.core.Symbol("cljs.core", "map", "cljs.core/map", -338988913, null), new cljs.core.Keyword("cljs.spec", "v", "cljs.spec/v", -1491964132), new cljs.core.Symbol(null, "%", "%", -950237169, null)))), cljs.core.list(new cljs.core.Symbol("cljs.core", 
"fn", "cljs.core/fn", -1065745098, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "%", "%", -950237169, null)], null), cljs.core.list(new cljs.core.Symbol("cljs.core", "map", "cljs.core/map", -338988913, null), cljs.core.list(new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[new cljs.core.Symbol(null, "k", "k", -505765866, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null)], null)], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("cljs.spec", "k", "cljs.spec/k", 668466950), new cljs.core.Symbol(null, "k", "k", -505765866, null), new cljs.core.Keyword("cljs.spec", "v", "cljs.spec/v", -1491964132), new cljs.core.Symbol(null, "v", "v", 1661996586, null)], null)), new cljs.core.Symbol(null, "%", "%", -950237169, null)))), function(p1__11145_SHARP_) {
  return cljs.core.zipmap.call(null, cljs.core.map.call(null, new cljs.core.Keyword("cljs.spec", "k", "cljs.spec/k", 668466950), p1__11145_SHARP_), cljs.core.map.call(null, new cljs.core.Keyword("cljs.spec", "v", "cljs.spec/v", -1491964132), p1__11145_SHARP_));
}, null, true, function(p1__11146_SHARP_) {
  return cljs.core.map.call(null, function(p__11147) {
    var vec__11148 = p__11147;
    var k = cljs.core.nth.call(null, vec__11148, 0, null);
    var v = cljs.core.nth.call(null, vec__11148, 1, null);
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("cljs.spec", "k", "cljs.spec/k", 668466950), k, new cljs.core.Keyword("cljs.spec", "v", "cljs.spec/v", -1491964132), v], null);
  }, p1__11146_SHARP_);
}));
cljs.spec.nonconforming = function cljs$spec$nonconforming(spec) {
  var spec__$1 = cljs.spec.specize.call(null, spec);
  if (typeof cljs.spec.t_cljs$spec11154 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec11154 = function(spec, meta11155) {
      this.spec = spec;
      this.meta11155 = meta11155;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec11154.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(spec__$1) {
      return function(_11156, meta11155__$1) {
        var self__ = this;
        var _11156__$1 = this;
        return new cljs.spec.t_cljs$spec11154(self__.spec, meta11155__$1);
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$core$IMeta$_meta$arity$1 = function(spec__$1) {
      return function(_11156) {
        var self__ = this;
        var _11156__$1 = this;
        return self__.meta11155;
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(spec__$1) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(spec__$1) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(spec__$1) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        var ret = cljs.spec.conform_STAR_.call(null, self__.spec, x);
        if (cljs.core.truth_(cljs.spec.invalid_QMARK_.call(null, ret))) {
          return new cljs.core.Keyword("cljs.spec", "invalid", "cljs.spec/invalid", 551677537);
        } else {
          return x;
        }
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(spec__$1) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.unform_STAR_.call(null, self__.spec, x);
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(spec__$1) {
      return function(_, path, via, in$, x) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.explain_STAR_.call(null, self__.spec, path, via, in$, x);
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(spec__$1) {
      return function(_, overrides, path, rmap) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.gen_STAR_.call(null, self__.spec, overrides, path, rmap);
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(spec__$1) {
      return function(_, gfn) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.nonconforming.call(null, cljs.spec.with_gen_STAR_.call(null, self__.spec, gfn));
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(spec__$1) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "nonconforming", "cljs.spec/nonconforming", 1245350756, null)), function() {
          var x__8102__auto__ = cljs.spec.describe_STAR_.call(null, self__.spec);
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }())));
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.getBasis = function(spec__$1) {
      return function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "spec", "spec", 1988051928, null), new cljs.core.Symbol(null, "meta11155", "meta11155", 2081124379, null)], null);
      };
    }(spec__$1);
    cljs.spec.t_cljs$spec11154.cljs$lang$type = true;
    cljs.spec.t_cljs$spec11154.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec11154";
    cljs.spec.t_cljs$spec11154.cljs$lang$ctorPrWriter = function(spec__$1) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec11154");
      };
    }(spec__$1);
    cljs.spec.__GT_t_cljs$spec11154 = function(spec__$1) {
      return function cljs$spec$nonconforming_$___GT_t_cljs$spec11154(spec__$2, meta11155) {
        return new cljs.spec.t_cljs$spec11154(spec__$2, meta11155);
      };
    }(spec__$1);
  }
  return new cljs.spec.t_cljs$spec11154(spec__$1, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.nilable_impl = function cljs$spec$nilable_impl(form, pred, gfn) {
  var spec = cljs.spec.specize.call(null, pred, form);
  if (typeof cljs.spec.t_cljs$spec11160 !== "undefined") {
  } else {
    cljs.spec.t_cljs$spec11160 = function(form, pred, gfn, spec, meta11161) {
      this.form = form;
      this.pred = pred;
      this.gfn = gfn;
      this.spec = spec;
      this.meta11161 = meta11161;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.spec.t_cljs$spec11160.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(spec) {
      return function(_11162, meta11161__$1) {
        var self__ = this;
        var _11162__$1 = this;
        return new cljs.spec.t_cljs$spec11160(self__.form, self__.pred, self__.gfn, self__.spec, meta11161__$1);
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$core$IMeta$_meta$arity$1 = function(spec) {
      return function(_11162) {
        var self__ = this;
        var _11162__$1 = this;
        return self__.meta11161;
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Specize$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Specize$specize_STAR_$arity$1 = function(spec) {
      return function(s) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Specize$specize_STAR_$arity$2 = function(spec) {
      return function(s, _) {
        var self__ = this;
        var s__$1 = this;
        return s__$1;
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Spec$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Spec$conform_STAR_$arity$2 = function(spec) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        if (x == null) {
          return null;
        } else {
          return cljs.spec.conform_STAR_.call(null, self__.spec, x);
        }
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Spec$unform_STAR_$arity$2 = function(spec) {
      return function(_, x) {
        var self__ = this;
        var ___$1 = this;
        if (x == null) {
          return null;
        } else {
          return cljs.spec.unform_STAR_.call(null, self__.spec, x);
        }
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Spec$explain_STAR_$arity$5 = function(spec) {
      return function(_, path, via, in$, x) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(function() {
          var or__7260__auto__ = cljs.spec.pvalid_QMARK_.call(null, self__.spec, x);
          if (cljs.core.truth_(or__7260__auto__)) {
            return or__7260__auto__;
          } else {
            return x == null;
          }
        }())) {
          return null;
        } else {
          return cljs.core.conj.call(null, cljs.spec.explain_1.call(null, self__.form, self__.pred, cljs.core.conj.call(null, path, new cljs.core.Keyword("cljs.spec", "pred", "cljs.spec/pred", 1523333614)), via, in$, x), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), cljs.core.conj.call(null, path, new cljs.core.Keyword("cljs.spec", "nil", "cljs.spec/nil", 1576652718)), new cljs.core.Keyword(null, "pred", "pred", 1927423397), new cljs.core.Symbol(null, 
          "nil?", "nil?", 1612038930, null), new cljs.core.Keyword(null, "val", "val", 128701612), x, new cljs.core.Keyword(null, "via", "via", -1904457336), via, new cljs.core.Keyword(null, "in", "in", -1531184865), in$], null));
        }
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Spec$gen_STAR_$arity$4 = function(spec) {
      return function(_, overrides, path, rmap) {
        var self__ = this;
        var ___$1 = this;
        if (cljs.core.truth_(self__.gfn)) {
          return self__.gfn.call(null);
        } else {
          return cljs.spec.impl.gen.frequency.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, cljs.spec.impl.gen.delay_impl.call(null, new cljs.core.Delay(function(___$1, spec) {
            return function() {
              return cljs.spec.impl.gen.return$.call(null, null);
            };
          }(___$1, spec), null))], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [9, cljs.spec.impl.gen.delay_impl.call(null, new cljs.core.Delay(function(___$1, spec) {
            return function() {
              return cljs.spec.gensub.call(null, self__.pred, overrides, cljs.core.conj.call(null, path, new cljs.core.Keyword("cljs.spec", "pred", "cljs.spec/pred", 1523333614)), rmap, self__.form);
            };
          }(___$1, spec), null))], null)], null));
        }
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Spec$with_gen_STAR_$arity$2 = function(spec) {
      return function(_, gfn__$1) {
        var self__ = this;
        var ___$1 = this;
        return cljs.spec.nilable_impl.call(null, self__.form, self__.pred, gfn__$1);
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.prototype.cljs$spec$Spec$describe_STAR_$arity$1 = function(spec) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.spec", "nilable", "cljs.spec/nilable", -139722052, null)), function() {
          var x__8102__auto__ = self__.form;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
        }())));
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.getBasis = function(spec) {
      return function() {
        return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "form", "form", 16469056, null), new cljs.core.Symbol(null, "pred", "pred", -727012372, null), new cljs.core.Symbol(null, "gfn", "gfn", -1862918295, null), new cljs.core.Symbol(null, "spec", "spec", 1988051928, null), new cljs.core.Symbol(null, "meta11161", "meta11161", -1706820768, null)], null);
      };
    }(spec);
    cljs.spec.t_cljs$spec11160.cljs$lang$type = true;
    cljs.spec.t_cljs$spec11160.cljs$lang$ctorStr = "cljs.spec/t_cljs$spec11160";
    cljs.spec.t_cljs$spec11160.cljs$lang$ctorPrWriter = function(spec) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.spec/t_cljs$spec11160");
      };
    }(spec);
    cljs.spec.__GT_t_cljs$spec11160 = function(spec) {
      return function cljs$spec$nilable_impl_$___GT_t_cljs$spec11160(form__$1, pred__$1, gfn__$1, spec__$1, meta11161) {
        return new cljs.spec.t_cljs$spec11160(form__$1, pred__$1, gfn__$1, spec__$1, meta11161);
      };
    }(spec);
  }
  return new cljs.spec.t_cljs$spec11160(form, pred, gfn, spec, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.spec.exercise = function cljs$spec$exercise(var_args) {
  var args11164 = [];
  var len__8373__auto___11167 = arguments.length;
  var i__8374__auto___11168 = 0;
  while (true) {
    if (i__8374__auto___11168 < len__8373__auto___11167) {
      args11164.push(arguments[i__8374__auto___11168]);
      var G__11169 = i__8374__auto___11168 + 1;
      i__8374__auto___11168 = G__11169;
      continue;
    } else {
    }
    break;
  }
  var G__11166 = args11164.length;
  switch(G__11166) {
    case 1:
      return cljs.spec.exercise.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.spec.exercise.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.spec.exercise.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11164.length)].join(""));
  }
};
cljs.spec.exercise.cljs$core$IFn$_invoke$arity$1 = function(spec) {
  return cljs.spec.exercise.call(null, spec, 10);
};
cljs.spec.exercise.cljs$core$IFn$_invoke$arity$2 = function(spec, n) {
  return cljs.spec.exercise.call(null, spec, n, null);
};
cljs.spec.exercise.cljs$core$IFn$_invoke$arity$3 = function(spec, n, overrides) {
  return cljs.core.map.call(null, function(p1__11163_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11163_SHARP_, cljs.spec.conform.call(null, spec, p1__11163_SHARP_)], null);
  }, cljs.spec.impl.gen.sample.call(null, cljs.spec.gen.call(null, spec, overrides), n));
};
cljs.spec.exercise.cljs$lang$maxFixedArity = 3;
cljs.spec.inst_in_range_QMARK_ = function cljs$spec$inst_in_range_QMARK_(start, end, inst) {
  var and__7248__auto__ = cljs.core.inst_QMARK_.call(null, inst);
  if (and__7248__auto__) {
    var t = cljs.core.inst_ms.call(null, inst);
    return cljs.core.inst_ms.call(null, start) <= t && t < cljs.core.inst_ms.call(null, end);
  } else {
    return and__7248__auto__;
  }
};
cljs.spec.int_in_range_QMARK_ = function cljs$spec$int_in_range_QMARK_(start, end, val) {
  if (cljs.core.integer_QMARK_.call(null, val)) {
    return start <= val && val < end;
  } else {
    if (val instanceof goog.math.Long) {
      var and__7248__auto__ = start.lessThanOrEqual(val);
      if (cljs.core.truth_(and__7248__auto__)) {
        return val.lessThan(end);
      } else {
        return and__7248__auto__;
      }
    } else {
      if (val instanceof goog.math.Integer) {
        var and__7248__auto__ = start.lessThanOrEqual(val);
        if (cljs.core.truth_(and__7248__auto__)) {
          return val.lessThan(end);
        } else {
          return and__7248__auto__;
        }
      } else {
        return false;
      }
    }
  }
};
if (typeof cljs.spec._STAR_compile_asserts_STAR_ !== "undefined") {
} else {
  cljs.spec._STAR_compile_asserts_STAR_ = true;
}
if (typeof cljs.spec._STAR_runtime_asserts_STAR_ !== "undefined") {
} else {
  cljs.spec._STAR_runtime_asserts_STAR_ = false;
}
cljs.spec.check_asserts_QMARK_ = function cljs$spec$check_asserts_QMARK_() {
  return cljs.spec._STAR_runtime_asserts_STAR_;
};
cljs.spec.check_asserts = function cljs$spec$check_asserts(flag) {
  return cljs.spec._STAR_runtime_asserts_STAR_ = flag;
};
cljs.spec.assert_STAR_ = function cljs$spec$assert_STAR_(spec, x) {
  if (cljs.core.truth_(cljs.spec.valid_QMARK_.call(null, spec, x))) {
    return x;
  } else {
    var ed = cljs.core.merge.call(null, cljs.core.assoc.call(null, cljs.spec.explain_data_STAR_.call(null, spec, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, x), new cljs.core.Keyword("cljs.spec", "failure", "cljs.spec/failure", 1931120592), new cljs.core.Keyword(null, "assertion-failed", "assertion-failed", -970534477)));
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Spec assertion failed\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var sb__8254__auto__ = new goog.string.StringBuffer;
      var _STAR_print_newline_STAR_11173_11175 = cljs.core._STAR_print_newline_STAR_;
      var _STAR_print_fn_STAR_11174_11176 = cljs.core._STAR_print_fn_STAR_;
      cljs.core._STAR_print_newline_STAR_ = true;
      cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_newline_STAR_11173_11175, _STAR_print_fn_STAR_11174_11176, sb__8254__auto__, ed) {
        return function(x__8255__auto__) {
          return sb__8254__auto__.append(x__8255__auto__);
        };
      }(_STAR_print_newline_STAR_11173_11175, _STAR_print_fn_STAR_11174_11176, sb__8254__auto__, ed);
      try {
        cljs.spec.explain_out.call(null, ed);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_11174_11176;
        cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_11173_11175;
      }
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__8254__auto__)].join("");
    }())].join(""));
  }
};
goog.provide("cljs.repl");
goog.require("cljs.core");
goog.require("cljs.spec");
cljs.repl.print_doc = function cljs$repl$print_doc(p__11776) {
  var map__11801 = p__11776;
  var map__11801__$1 = (!(map__11801 == null) ? map__11801.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11801.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11801) : map__11801;
  var m = map__11801__$1;
  var n = cljs.core.get.call(null, map__11801__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var nm = cljs.core.get.call(null, map__11801__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  cljs.core.println.call(null, "-------------------------");
  cljs.core.println.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var ns = temp__4657__auto__;
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns), cljs.core.str.cljs$core$IFn$_invoke$arity$1("/")].join("");
    } else {
      return null;
    }
  }()), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Protocol");
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m))) {
    var seq__11803_11825 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m));
    var chunk__11804_11826 = null;
    var count__11805_11827 = 0;
    var i__11806_11828 = 0;
    while (true) {
      if (i__11806_11828 < count__11805_11827) {
        var f_11829 = cljs.core._nth.call(null, chunk__11804_11826, i__11806_11828);
        cljs.core.println.call(null, "  ", f_11829);
        var G__11830 = seq__11803_11825;
        var G__11831 = chunk__11804_11826;
        var G__11832 = count__11805_11827;
        var G__11833 = i__11806_11828 + 1;
        seq__11803_11825 = G__11830;
        chunk__11804_11826 = G__11831;
        count__11805_11827 = G__11832;
        i__11806_11828 = G__11833;
        continue;
      } else {
        var temp__4657__auto___11834 = cljs.core.seq.call(null, seq__11803_11825);
        if (temp__4657__auto___11834) {
          var seq__11803_11835__$1 = temp__4657__auto___11834;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11803_11835__$1)) {
            var c__8079__auto___11836 = cljs.core.chunk_first.call(null, seq__11803_11835__$1);
            var G__11837 = cljs.core.chunk_rest.call(null, seq__11803_11835__$1);
            var G__11838 = c__8079__auto___11836;
            var G__11839 = cljs.core.count.call(null, c__8079__auto___11836);
            var G__11840 = 0;
            seq__11803_11825 = G__11837;
            chunk__11804_11826 = G__11838;
            count__11805_11827 = G__11839;
            i__11806_11828 = G__11840;
            continue;
          } else {
            var f_11841 = cljs.core.first.call(null, seq__11803_11835__$1);
            cljs.core.println.call(null, "  ", f_11841);
            var G__11842 = cljs.core.next.call(null, seq__11803_11835__$1);
            var G__11843 = null;
            var G__11844 = 0;
            var G__11845 = 0;
            seq__11803_11825 = G__11842;
            chunk__11804_11826 = G__11843;
            count__11805_11827 = G__11844;
            i__11806_11828 = G__11845;
            continue;
          }
        } else {
        }
      }
      break;
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m))) {
      var arglists_11846 = (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(function() {
        var or__7260__auto__ = (new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return (new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m);
        }
      }())) {
        cljs.core.prn.call(null, arglists_11846);
      } else {
        cljs.core.prn.call(null, cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.first.call(null, arglists_11846)) ? cljs.core.second.call(null, arglists_11846) : arglists_11846);
      }
    } else {
    }
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "special-form", "special-form", -1326536374)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Special Form");
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.contains_QMARK_.call(null, m, new cljs.core.Keyword(null, "url", "url", 276297046))) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))) {
        return cljs.core.println.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n  Please see http://clojure.org/"), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
      } else {
        return null;
      }
    } else {
      return cljs.core.println.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n  Please see http://clojure.org/special_forms#"), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "Macro");
    } else {
    }
    if (cljs.core.truth_((new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "REPL Special Function");
    } else {
    }
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
      var seq__11807_11847 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(m));
      var chunk__11808_11848 = null;
      var count__11809_11849 = 0;
      var i__11810_11850 = 0;
      while (true) {
        if (i__11810_11850 < count__11809_11849) {
          var vec__11811_11851 = cljs.core._nth.call(null, chunk__11808_11848, i__11810_11850);
          var name_11852 = cljs.core.nth.call(null, vec__11811_11851, 0, null);
          var map__11814_11853 = cljs.core.nth.call(null, vec__11811_11851, 1, null);
          var map__11814_11854__$1 = (!(map__11814_11853 == null) ? map__11814_11853.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11814_11853.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11814_11853) : map__11814_11853;
          var doc_11855 = cljs.core.get.call(null, map__11814_11854__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
          var arglists_11856 = cljs.core.get.call(null, map__11814_11854__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
          cljs.core.println.call(null);
          cljs.core.println.call(null, " ", name_11852);
          cljs.core.println.call(null, " ", arglists_11856);
          if (cljs.core.truth_(doc_11855)) {
            cljs.core.println.call(null, " ", doc_11855);
          } else {
          }
          var G__11857 = seq__11807_11847;
          var G__11858 = chunk__11808_11848;
          var G__11859 = count__11809_11849;
          var G__11860 = i__11810_11850 + 1;
          seq__11807_11847 = G__11857;
          chunk__11808_11848 = G__11858;
          count__11809_11849 = G__11859;
          i__11810_11850 = G__11860;
          continue;
        } else {
          var temp__4657__auto___11861 = cljs.core.seq.call(null, seq__11807_11847);
          if (temp__4657__auto___11861) {
            var seq__11807_11862__$1 = temp__4657__auto___11861;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11807_11862__$1)) {
              var c__8079__auto___11863 = cljs.core.chunk_first.call(null, seq__11807_11862__$1);
              var G__11864 = cljs.core.chunk_rest.call(null, seq__11807_11862__$1);
              var G__11865 = c__8079__auto___11863;
              var G__11866 = cljs.core.count.call(null, c__8079__auto___11863);
              var G__11867 = 0;
              seq__11807_11847 = G__11864;
              chunk__11808_11848 = G__11865;
              count__11809_11849 = G__11866;
              i__11810_11850 = G__11867;
              continue;
            } else {
              var vec__11816_11868 = cljs.core.first.call(null, seq__11807_11862__$1);
              var name_11869 = cljs.core.nth.call(null, vec__11816_11868, 0, null);
              var map__11819_11870 = cljs.core.nth.call(null, vec__11816_11868, 1, null);
              var map__11819_11871__$1 = (!(map__11819_11870 == null) ? map__11819_11870.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11819_11870.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11819_11870) : map__11819_11870;
              var doc_11872 = cljs.core.get.call(null, map__11819_11871__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
              var arglists_11873 = cljs.core.get.call(null, map__11819_11871__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
              cljs.core.println.call(null);
              cljs.core.println.call(null, " ", name_11869);
              cljs.core.println.call(null, " ", arglists_11873);
              if (cljs.core.truth_(doc_11872)) {
                cljs.core.println.call(null, " ", doc_11872);
              } else {
              }
              var G__11874 = cljs.core.next.call(null, seq__11807_11862__$1);
              var G__11875 = null;
              var G__11876 = 0;
              var G__11877 = 0;
              seq__11807_11847 = G__11874;
              chunk__11808_11848 = G__11875;
              count__11809_11849 = G__11876;
              i__11810_11850 = G__11877;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
    }
    if (cljs.core.truth_(n)) {
      var temp__4657__auto__ = cljs.spec.get_spec.call(null, cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.ns_name.call(null, n))].join(""), cljs.core.name.call(null, nm)));
      if (cljs.core.truth_(temp__4657__auto__)) {
        var fnspec = temp__4657__auto__;
        cljs.core.print.call(null, "Spec");
        var seq__11821 = cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "args", "args", 1315556576), new cljs.core.Keyword(null, "ret", "ret", -468222814), new cljs.core.Keyword(null, "fn", "fn", -1175266204)], null));
        var chunk__11822 = null;
        var count__11823 = 0;
        var i__11824 = 0;
        while (true) {
          if (i__11824 < count__11823) {
            var role = cljs.core._nth.call(null, chunk__11822, i__11824);
            var temp__4657__auto___11878__$1 = cljs.core.get.call(null, fnspec, role);
            if (cljs.core.truth_(temp__4657__auto___11878__$1)) {
              var spec_11879 = temp__4657__auto___11878__$1;
              cljs.core.print.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, role)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(":")].join(""), cljs.spec.describe.call(null, spec_11879));
            } else {
            }
            var G__11880 = seq__11821;
            var G__11881 = chunk__11822;
            var G__11882 = count__11823;
            var G__11883 = i__11824 + 1;
            seq__11821 = G__11880;
            chunk__11822 = G__11881;
            count__11823 = G__11882;
            i__11824 = G__11883;
            continue;
          } else {
            var temp__4657__auto____$1 = cljs.core.seq.call(null, seq__11821);
            if (temp__4657__auto____$1) {
              var seq__11821__$1 = temp__4657__auto____$1;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11821__$1)) {
                var c__8079__auto__ = cljs.core.chunk_first.call(null, seq__11821__$1);
                var G__11884 = cljs.core.chunk_rest.call(null, seq__11821__$1);
                var G__11885 = c__8079__auto__;
                var G__11886 = cljs.core.count.call(null, c__8079__auto__);
                var G__11887 = 0;
                seq__11821 = G__11884;
                chunk__11822 = G__11885;
                count__11823 = G__11886;
                i__11824 = G__11887;
                continue;
              } else {
                var role = cljs.core.first.call(null, seq__11821__$1);
                var temp__4657__auto___11888__$2 = cljs.core.get.call(null, fnspec, role);
                if (cljs.core.truth_(temp__4657__auto___11888__$2)) {
                  var spec_11889 = temp__4657__auto___11888__$2;
                  cljs.core.print.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, role)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(":")].join(""), cljs.spec.describe.call(null, spec_11889));
                } else {
                }
                var G__11890 = cljs.core.next.call(null, seq__11821__$1);
                var G__11891 = null;
                var G__11892 = 0;
                var G__11893 = 0;
                seq__11821 = G__11890;
                chunk__11822 = G__11891;
                count__11823 = G__11892;
                i__11824 = G__11893;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.userAgent.product");
goog.require("clojure.browser.net");
goog.require("clojure.browser.event");
goog.require("cljs.repl");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.print_queue = [];
clojure.browser.repl.flush_print_queue_BANG_ = function clojure$browser$repl$flush_print_queue_BANG_(conn) {
  var seq__11900_11904 = cljs.core.seq.call(null, clojure.browser.repl.print_queue);
  var chunk__11901_11905 = null;
  var count__11902_11906 = 0;
  var i__11903_11907 = 0;
  while (true) {
    if (i__11903_11907 < count__11902_11906) {
      var str_11908 = cljs.core._nth.call(null, chunk__11901_11905, i__11903_11907);
      clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), str_11908);
      var G__11909 = seq__11900_11904;
      var G__11910 = chunk__11901_11905;
      var G__11911 = count__11902_11906;
      var G__11912 = i__11903_11907 + 1;
      seq__11900_11904 = G__11909;
      chunk__11901_11905 = G__11910;
      count__11902_11906 = G__11911;
      i__11903_11907 = G__11912;
      continue;
    } else {
      var temp__4657__auto___11913 = cljs.core.seq.call(null, seq__11900_11904);
      if (temp__4657__auto___11913) {
        var seq__11900_11914__$1 = temp__4657__auto___11913;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11900_11914__$1)) {
          var c__8079__auto___11915 = cljs.core.chunk_first.call(null, seq__11900_11914__$1);
          var G__11916 = cljs.core.chunk_rest.call(null, seq__11900_11914__$1);
          var G__11917 = c__8079__auto___11915;
          var G__11918 = cljs.core.count.call(null, c__8079__auto___11915);
          var G__11919 = 0;
          seq__11900_11904 = G__11916;
          chunk__11901_11905 = G__11917;
          count__11902_11906 = G__11918;
          i__11903_11907 = G__11919;
          continue;
        } else {
          var str_11920 = cljs.core.first.call(null, seq__11900_11914__$1);
          clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), str_11920);
          var G__11921 = cljs.core.next.call(null, seq__11900_11914__$1);
          var G__11922 = null;
          var G__11923 = 0;
          var G__11924 = 0;
          seq__11900_11904 = G__11921;
          chunk__11901_11905 = G__11922;
          count__11902_11906 = G__11923;
          i__11903_11907 = G__11924;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return goog.array.clear(clojure.browser.repl.print_queue);
};
clojure.browser.repl.repl_print = function clojure$browser$repl$repl_print(data) {
  clojure.browser.repl.print_queue.push(cljs.core.pr_str.call(null, data));
  var temp__4657__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var conn = temp__4657__auto__;
    return clojure.browser.repl.flush_print_queue_BANG_.call(null, conn);
  } else {
    return null;
  }
};
cljs.core._STAR_print_fn_STAR_ = clojure.browser.repl.repl_print;
cljs.core._STAR_print_err_fn_STAR_ = clojure.browser.repl.repl_print;
cljs.core._STAR_print_newline_STAR_ = true;
clojure.browser.repl.get_ua_product = function clojure$browser$repl$get_ua_product() {
  if (cljs.core.truth_(goog.userAgent.product.SAFARI)) {
    return new cljs.core.Keyword(null, "safari", "safari", 497115653);
  } else {
    if (cljs.core.truth_(goog.userAgent.product.CHROME)) {
      return new cljs.core.Keyword(null, "chrome", "chrome", 1718738387);
    } else {
      if (cljs.core.truth_(goog.userAgent.product.FIREFOX)) {
        return new cljs.core.Keyword(null, "firefox", "firefox", 1283768880);
      } else {
        if (cljs.core.truth_(goog.userAgent.product.IE)) {
          return new cljs.core.Keyword(null, "ie", "ie", 2038473780);
        } else {
          return null;
        }
      }
    }
  }
};
clojure.browser.repl.evaluate_javascript = function clojure$browser$repl$evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(eval(block))].join("")], null);
    } catch (e11926) {
      var e = e11926;
      return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "ua-product", "ua-product", 938384227), clojure.browser.repl.get_ua_product.call(null), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(e)].join(""), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), cljs.core.truth_(e.hasOwnProperty("stack")) ? 
      e.stack : "No stacktrace available."], null);
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function clojure$browser$repl$send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function clojure$browser$repl$send_print(var_args) {
  var args11927 = [];
  var len__8373__auto___11930 = arguments.length;
  var i__8374__auto___11931 = 0;
  while (true) {
    if (i__8374__auto___11931 < len__8373__auto___11930) {
      args11927.push(arguments[i__8374__auto___11931]);
      var G__11932 = i__8374__auto___11931 + 1;
      i__8374__auto___11931 = G__11932;
      continue;
    } else {
    }
    break;
  }
  var G__11929 = args11927.length;
  switch(G__11929) {
    case 2:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11927.length)].join(""));
  }
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2 = function(url, data) {
  return clojure.browser.repl.send_print.call(null, url, data, 0);
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3 = function(url, data, n) {
  var conn = clojure.browser.net.xhr_connection.call(null);
  clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", -978969032), function(conn) {
    return function(_) {
      if (n < 10) {
        return clojure.browser.repl.send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Could not send "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(data), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" after "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" attempts.")].join(""));
      }
    };
  }(conn));
  return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print.cljs$lang$maxFixedArity = 3;
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function clojure$browser$repl$wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), t, new cljs.core.Keyword(null, "content", "content", 15833224), data, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function clojure$browser$repl$start_evaluator(url) {
  var temp__4655__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var repl_connection = temp__4655__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 1890645906), function(connection, repl_connection, temp__4655__auto__) {
      return function(e) {
        return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
      };
    }(connection, repl_connection, temp__4655__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), function(connection, repl_connection, temp__4655__auto__) {
      return function(data) {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 1415092211), data));
      };
    }(connection, repl_connection, temp__4655__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1299562414), function(connection, repl_connection, temp__4655__auto__) {
      return function(data) {
        return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1299562414), data));
      };
    }(connection, repl_connection, temp__4655__auto__));
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function(connection, repl_connection, temp__4655__auto__) {
      return function() {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1086465795), "ready"));
      };
    }(connection, repl_connection, temp__4655__auto__), 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.load_queue = null;
clojure.browser.repl.bootstrap = function clojure$browser$repl$bootstrap() {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    goog.require__ = goog.require;
    goog.isProvided_ = function(name) {
      return false;
    };
    goog.constructNamespace_("cljs.user");
    goog.writeScriptTag__ = function(src, opt_sourceText) {
      var loaded = cljs.core.atom.call(null, false);
      var onload = function(loaded) {
        return function() {
          if (cljs.core.truth_(function() {
            var and__7248__auto__ = clojure.browser.repl.load_queue;
            if (cljs.core.truth_(and__7248__auto__)) {
              return cljs.core.deref.call(null, loaded) === false;
            } else {
              return and__7248__auto__;
            }
          }())) {
            cljs.core.swap_BANG_.call(null, loaded, cljs.core.not);
            if (clojure.browser.repl.load_queue.length === 0) {
              return clojure.browser.repl.load_queue = null;
            } else {
              return goog.writeScriptTag__.apply(null, clojure.browser.repl.load_queue.shift());
            }
          } else {
            return null;
          }
        };
      }(loaded);
      return document.body.appendChild(function() {
        var script = document.createElement("script");
        var script__$1 = function() {
          var G__11937 = script;
          goog.object.set(G__11937, "type", "text/javascript");
          goog.object.set(G__11937, "onload", onload);
          goog.object.set(G__11937, "onreadystatechange", onload);
          return G__11937;
        }();
        if (opt_sourceText == null) {
          var G__11938 = script__$1;
          goog.object.set(G__11938, "src", src);
          return G__11938;
        } else {
          var G__11939 = script__$1;
          goog.dom.setTextContext(G__11939, opt_sourceText);
          return G__11939;
        }
      }());
    };
    goog.writeScriptTag_ = function(src, opt_sourceText) {
      if (cljs.core.truth_(clojure.browser.repl.load_queue)) {
        return clojure.browser.repl.load_queue.push([src, opt_sourceText]);
      } else {
        clojure.browser.repl.load_queue = [];
        return goog.writeScriptTag__(src, opt_sourceText);
      }
    };
    return goog.require = function(src, reload) {
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = true;
      } else {
      }
      var reload_QMARK_ = function() {
        var or__7260__auto__ = reload;
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return goog.cljsReloadAll__;
        }
      }();
      if (cljs.core.truth_(reload_QMARK_)) {
        var path_11940 = goog.dependencies_.nameToPath[src];
        goog.object.remove(goog.dependencies_.visited, path_11940);
        goog.object.remove(goog.dependencies_.written, path_11940);
        goog.object.remove(goog.dependencies_.written, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(goog.basePath), cljs.core.str.cljs$core$IFn$_invoke$arity$1(path_11940)].join(""));
      } else {
      }
      var ret = goog.require__(src);
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = false;
      } else {
      }
      return ret;
    };
  }
};
clojure.browser.repl.connect = function clojure$browser$repl$connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 910305997), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), function(repl_connection) {
    return function(js) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
    };
  }(repl_connection));
  clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(repl_connection) {
    return function(iframe) {
      return iframe.style.display = "none";
    };
  }(repl_connection));
  clojure.browser.repl.bootstrap.call(null);
  return repl_connection;
};
goog.provide("goog.net.jsloader");
goog.provide("goog.net.jsloader.Error");
goog.provide("goog.net.jsloader.ErrorCode");
goog.provide("goog.net.jsloader.Options");
goog.require("goog.array");
goog.require("goog.async.Deferred");
goog.require("goog.debug.Error");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.object");
goog.net.jsloader.GLOBAL_VERIFY_OBJS_ = "closure_verification";
goog.net.jsloader.DEFAULT_TIMEOUT = 5000;
goog.net.jsloader.Options;
goog.net.jsloader.scriptsToLoad_ = [];
goog.net.jsloader.scriptLoadingDeferred_;
goog.net.jsloader.loadMany = function(uris, opt_options) {
  if (!uris.length) {
    return goog.async.Deferred.succeed(null);
  }
  var isAnotherModuleLoading = goog.net.jsloader.scriptsToLoad_.length;
  goog.array.extend(goog.net.jsloader.scriptsToLoad_, uris);
  if (isAnotherModuleLoading) {
    return goog.net.jsloader.scriptLoadingDeferred_;
  }
  uris = goog.net.jsloader.scriptsToLoad_;
  var popAndLoadNextScript = function() {
    var uri = uris.shift();
    var deferred = goog.net.jsloader.load(uri, opt_options);
    if (uris.length) {
      deferred.addBoth(popAndLoadNextScript);
    }
    return deferred;
  };
  goog.net.jsloader.scriptLoadingDeferred_ = popAndLoadNextScript();
  return goog.net.jsloader.scriptLoadingDeferred_;
};
goog.net.jsloader.load = function(uri, opt_options) {
  var options = opt_options || {};
  var doc = options.document || document;
  var script = goog.dom.createElement(goog.dom.TagName.SCRIPT);
  var request = {script_:script, timeout_:undefined};
  var deferred = new goog.async.Deferred(goog.net.jsloader.cancel_, request);
  var timeout = null;
  var timeoutDuration = goog.isDefAndNotNull(options.timeout) ? options.timeout : goog.net.jsloader.DEFAULT_TIMEOUT;
  if (timeoutDuration > 0) {
    timeout = window.setTimeout(function() {
      goog.net.jsloader.cleanup_(script, true);
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.TIMEOUT, "Timeout reached for loading script " + uri));
    }, timeoutDuration);
    request.timeout_ = timeout;
  }
  script.onload = script.onreadystatechange = function() {
    if (!script.readyState || script.readyState == "loaded" || script.readyState == "complete") {
      var removeScriptNode = options.cleanupWhenDone || false;
      goog.net.jsloader.cleanup_(script, removeScriptNode, timeout);
      deferred.callback(null);
    }
  };
  script.onerror = function() {
    goog.net.jsloader.cleanup_(script, true, timeout);
    deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.LOAD_ERROR, "Error while loading script " + uri));
  };
  var properties = options.attributes || {};
  goog.object.extend(properties, {"type":"text/javascript", "charset":"UTF-8", "src":uri});
  goog.dom.setProperties(script, properties);
  var scriptParent = goog.net.jsloader.getScriptParentElement_(doc);
  scriptParent.appendChild(script);
  return deferred;
};
goog.net.jsloader.loadAndVerify = function(uri, verificationObjName, options) {
  if (!goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_]) {
    goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_] = {};
  }
  var verifyObjs = goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_];
  if (goog.isDef(verifyObjs[verificationObjName])) {
    return goog.async.Deferred.fail(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_OBJECT_ALREADY_EXISTS, "Verification object " + verificationObjName + " already defined."));
  }
  var sendDeferred = goog.net.jsloader.load(uri, options);
  var deferred = new goog.async.Deferred(goog.bind(sendDeferred.cancel, sendDeferred));
  sendDeferred.addCallback(function() {
    var result = verifyObjs[verificationObjName];
    if (goog.isDef(result)) {
      deferred.callback(result);
      delete verifyObjs[verificationObjName];
    } else {
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_ERROR, "Script " + uri + " loaded, but verification object " + verificationObjName + " was not defined."));
    }
  });
  sendDeferred.addErrback(function(error) {
    if (goog.isDef(verifyObjs[verificationObjName])) {
      delete verifyObjs[verificationObjName];
    }
    deferred.errback(error);
  });
  return deferred;
};
goog.net.jsloader.getScriptParentElement_ = function(doc) {
  var headElements = doc.getElementsByTagName(goog.dom.TagName.HEAD);
  if (!headElements || goog.array.isEmpty(headElements)) {
    return doc.documentElement;
  } else {
    return headElements[0];
  }
};
goog.net.jsloader.cancel_ = function() {
  var request = this;
  if (request && request.script_) {
    var scriptNode = request.script_;
    if (scriptNode && scriptNode.tagName == goog.dom.TagName.SCRIPT) {
      goog.net.jsloader.cleanup_(scriptNode, true, request.timeout_);
    }
  }
};
goog.net.jsloader.cleanup_ = function(scriptNode, removeScriptNode, opt_timeout) {
  if (goog.isDefAndNotNull(opt_timeout)) {
    goog.global.clearTimeout(opt_timeout);
  }
  scriptNode.onload = goog.nullFunction;
  scriptNode.onerror = goog.nullFunction;
  scriptNode.onreadystatechange = goog.nullFunction;
  if (removeScriptNode) {
    window.setTimeout(function() {
      goog.dom.removeNode(scriptNode);
    }, 0);
  }
};
goog.net.jsloader.ErrorCode = {LOAD_ERROR:0, TIMEOUT:1, VERIFY_ERROR:2, VERIFY_OBJECT_ALREADY_EXISTS:3};
goog.net.jsloader.Error = function(code, opt_message) {
  var msg = "Jsloader error (code #" + code + ")";
  if (opt_message) {
    msg += ": " + opt_message;
  }
  goog.net.jsloader.Error.base(this, "constructor", msg);
  this.code = code;
};
goog.inherits(goog.net.jsloader.Error, goog.debug.Error);
goog.provide("goog.net.Jsonp");
goog.require("goog.Uri");
goog.require("goog.net.jsloader");
goog.net.Jsonp = function(uri, opt_callbackParamName) {
  this.uri_ = new goog.Uri(uri);
  this.callbackParamName_ = opt_callbackParamName ? opt_callbackParamName : "callback";
  this.timeout_ = 5000;
  this.nonce_ = "";
};
goog.net.Jsonp.CALLBACKS = "_callbacks_";
goog.net.Jsonp.scriptCounter_ = 0;
goog.net.Jsonp.getCallbackId_ = function(id) {
  return goog.net.Jsonp.CALLBACKS + "__" + id;
};
goog.net.Jsonp.prototype.setRequestTimeout = function(timeout) {
  this.timeout_ = timeout;
};
goog.net.Jsonp.prototype.getRequestTimeout = function() {
  return this.timeout_;
};
goog.net.Jsonp.prototype.setNonce = function(nonce) {
  this.nonce_ = nonce;
};
goog.net.Jsonp.prototype.send = function(opt_payload, opt_replyCallback, opt_errorCallback, opt_callbackParamValue) {
  var payload = opt_payload || null;
  var id = opt_callbackParamValue || "_" + (goog.net.Jsonp.scriptCounter_++).toString(36) + goog.now().toString(36);
  var callbackId = goog.net.Jsonp.getCallbackId_(id);
  var uri = this.uri_.clone();
  if (payload) {
    goog.net.Jsonp.addPayloadToUri_(payload, uri);
  }
  if (opt_replyCallback) {
    var reply = goog.net.Jsonp.newReplyHandler_(id, opt_replyCallback);
    goog.global[callbackId] = reply;
    uri.setParameterValues(this.callbackParamName_, callbackId);
  }
  var options = {timeout:this.timeout_, cleanupWhenDone:true};
  if (this.nonce_) {
    options.attributes = {"nonce":this.nonce_};
  }
  var deferred = goog.net.jsloader.load(uri.toString(), options);
  var error = goog.net.Jsonp.newErrorHandler_(id, payload, opt_errorCallback);
  deferred.addErrback(error);
  return {id_:id, deferred_:deferred};
};
goog.net.Jsonp.prototype.cancel = function(request) {
  if (request) {
    if (request.deferred_) {
      request.deferred_.cancel();
    }
    if (request.id_) {
      goog.net.Jsonp.cleanup_(request.id_, false);
    }
  }
};
goog.net.Jsonp.newErrorHandler_ = function(id, payload, opt_errorCallback) {
  return function() {
    goog.net.Jsonp.cleanup_(id, false);
    if (opt_errorCallback) {
      opt_errorCallback(payload);
    }
  };
};
goog.net.Jsonp.newReplyHandler_ = function(id, replyCallback) {
  var handler = function(var_args) {
    goog.net.Jsonp.cleanup_(id, true);
    replyCallback.apply(undefined, arguments);
  };
  return handler;
};
goog.net.Jsonp.cleanup_ = function(id, deleteReplyHandler) {
  var callbackId = goog.net.Jsonp.getCallbackId_(id);
  if (goog.global[callbackId]) {
    if (deleteReplyHandler) {
      try {
        delete goog.global[callbackId];
      } catch (e) {
        goog.global[callbackId] = undefined;
      }
    } else {
      goog.global[callbackId] = goog.nullFunction;
    }
  }
};
goog.net.Jsonp.addPayloadToUri_ = function(payload, uri) {
  for (var name in payload) {
    if (!payload.hasOwnProperty || payload.hasOwnProperty(name)) {
      uri.setParameterValues(name, payload[name]);
    }
  }
  return uri;
};
goog.provide("goog.crypt");
goog.require("goog.array");
goog.require("goog.asserts");
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    while (c > 255) {
      output[p++] = c & 255;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;
  if (bytes.length <= CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }
  var str = "";
  for (var i = 0;i < bytes.length;i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : "0" + hexByte;
  }).join("");
};
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0, "Key string length must be multiple of 2");
  var arr = [];
  for (var i = 0;i < hexString.length;i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};
goog.crypt.stringToUtf8ByteArray = function(str) {
  var out = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else {
      if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else {
        if ((c & 64512) == 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) == 56320) {
          c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
    }
  }
  return out;
};
goog.crypt.utf8ByteArrayToString = function(bytes) {
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else {
      if (c1 > 191 && c1 < 224) {
        var c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else {
        if (c1 > 239 && c1 < 365) {
          var c2 = bytes[pos++];
          var c3 = bytes[pos++];
          var c4 = bytes[pos++];
          var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
          out[c++] = String.fromCharCode(55296 + (u >> 10));
          out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
          var c2 = bytes[pos++];
          var c3 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
      }
    }
  }
  return out.join("");
};
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(bytes1.length == bytes2.length, "XOR array lengths must match");
  var result = [];
  for (var i = 0;i < bytes1.length;i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};
goog.provide("goog.crypt.base64");
goog.require("goog.asserts");
goog.require("goog.crypt");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.require("goog.userAgent.product");
goog.crypt.base64.byteToCharMap_ = null;
goog.crypt.base64.charToByteMap_ = null;
goog.crypt.base64.byteToCharMapWebSafe_ = null;
goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";
goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/\x3d";
goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ = goog.userAgent.GECKO || goog.userAgent.WEBKIT && !goog.userAgent.product.SAFARI || goog.userAgent.OPERA;
goog.crypt.base64.HAS_NATIVE_ENCODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || typeof goog.global.btoa == "function";
goog.crypt.base64.HAS_NATIVE_DECODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || !goog.userAgent.product.SAFARI && !goog.userAgent.IE && typeof goog.global.atob == "function";
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  goog.asserts.assert(goog.isArrayLike(input), "encodeByteArray takes an array as a parameter");
  goog.crypt.base64.init_();
  var byteToCharMap = opt_webSafe ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_;
  var output = [];
  for (var i = 0;i < input.length;i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;
    var outByte1 = byte1 >> 2;
    var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
    var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
    var outByte4 = byte3 & 63;
    if (!haveByte3) {
      outByte4 = 64;
      if (!haveByte2) {
        outByte3 = 64;
      }
    }
    output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
  }
  return output.join("");
};
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_ENCODE_ && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(input), opt_webSafe);
};
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_DECODE_ && !opt_webSafe) {
    return goog.global.atob(input);
  }
  var output = "";
  function pushByte(b) {
    output += String.fromCharCode(b);
  }
  goog.crypt.base64.decodeStringInternal_(input, pushByte);
  return output;
};
goog.crypt.base64.decodeStringToByteArray = function(input, opt_ignored) {
  var output = [];
  function pushByte(b) {
    output.push(b);
  }
  goog.crypt.base64.decodeStringInternal_(input, pushByte);
  return output;
};
goog.crypt.base64.decodeStringToUint8Array = function(input) {
  goog.asserts.assert(!goog.userAgent.IE || goog.userAgent.isVersionOrHigher("10"), "Browser does not support typed arrays");
  var output = new Uint8Array(Math.ceil(input.length * 3 / 4));
  var outLen = 0;
  function pushByte(b) {
    output[outLen++] = b;
  }
  goog.crypt.base64.decodeStringInternal_(input, pushByte);
  return output.subarray(0, outLen);
};
goog.crypt.base64.decodeStringInternal_ = function(input, pushByte) {
  goog.crypt.base64.init_();
  var nextCharIndex = 0;
  function getByte(default_val) {
    while (nextCharIndex < input.length) {
      var ch = input.charAt(nextCharIndex++);
      var b = goog.crypt.base64.charToByteMap_[ch];
      if (b != null) {
        return b;
      }
      if (!goog.string.isEmptyOrWhitespace(ch)) {
        throw Error("Unknown base64 encoding at char: " + ch);
      }
    }
    return default_val;
  }
  while (true) {
    var byte1 = getByte(-1);
    var byte2 = getByte(0);
    var byte3 = getByte(64);
    var byte4 = getByte(64);
    if (byte4 === 64) {
      if (byte1 === -1) {
        return;
      }
    }
    var outByte1 = byte1 << 2 | byte2 >> 4;
    pushByte(outByte1);
    if (byte3 != 64) {
      var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
      pushByte(outByte2);
      if (byte4 != 64) {
        var outByte3 = byte3 << 6 & 192 | byte4;
        pushByte(outByte3);
      }
    }
  }
};
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    for (var i = 0;i < goog.crypt.base64.ENCODED_VALS.length;i++) {
      goog.crypt.base64.byteToCharMap_[i] = goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      if (i >= goog.crypt.base64.ENCODED_VALS_BASE.length) {
        goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
      }
    }
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.reader.PushbackReader = function() {
};
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$read_char$arity$1 == null)) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__7928__auto__ = reader == null ? null : reader;
    var m__7929__auto__ = cljs.reader.read_char[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, reader);
    } else {
      var m__7929__auto____$1 = cljs.reader.read_char["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
      }
    }
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$unread$arity$2 == null)) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__7928__auto__ = reader == null ? null : reader;
    var m__7929__auto__ = cljs.reader.unread[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, reader, ch);
    } else {
      var m__7929__auto____$1 = cljs.reader.unread["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, reader, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
      }
    }
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), cljs.core.with_meta(new cljs.core.Symbol(null, "idx", "idx", -1600747296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__7260__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9644 = arguments.length;
  var i__8374__auto___9645 = 0;
  while (true) {
    if (i__8374__auto___9645 < len__8373__auto___9644) {
      args__8380__auto__.push(arguments[i__8374__auto___9645]);
      var G__9646 = i__8374__auto___9645 + 1;
      i__8374__auto___9645 = G__9646;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq9642) {
  var G__9643 = cljs.core.first.call(null, seq9642);
  var seq9642__$1 = cljs.core.next.call(null, seq9642);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__9643, seq9642__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__7248__auto__ = !(ch === "#");
  if (and__7248__auto__) {
    var and__7248__auto____$1 = !(ch === "'");
    if (and__7248__auto____$1) {
      var and__7248__auto____$2 = !(ch === ":");
      if (and__7248__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__7248__auto____$2;
      }
    } else {
      return and__7248__auto____$1;
    }
  } else {
    return and__7248__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__9647 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__9648 = cljs.reader.read_char.call(null, rdr);
      sb = G__9647;
      ch = G__9648;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return -parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return '"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__9649 = cljs.reader.read_char.call(null, rdr);
      ch = G__9649;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = [];
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return a;
    } else {
      var temp__4655__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var macrofn = temp__4655__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__9650 = mret === rdr ? a : function() {
          a.push(mret);
          return a;
        }();
        a = G__9650;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__9651 = o === rdr ? a : function() {
          a.push(o);
          return a;
        }();
        a = G__9651;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4655__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var obj = temp__4655__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  var arr = cljs.reader.read_delimited_list.call(null, ")", rdr, true);
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__9652 = i - 1;
      var G__9653 = cljs.core._conj.call(null, r, arr[i - 1]);
      i = G__9652;
      r = G__9653;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.core.vec.call(null, cljs.reader.read_delimited_list.call(null, "]", rdr, true));
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  var c = l.length;
  if (cljs.core.odd_QMARK_.call(null, c)) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  if (c <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    return cljs.core.PersistentArrayMap.createWithCheck(l);
  } else {
    return cljs.core.PersistentHashMap.createWithCheck(l);
  }
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__7260__auto__ = ch == null;
      if (or__7260__auto__) {
        return or__7260__auto__;
      } else {
        var or__7260__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__7260__auto____$1) {
          return or__7260__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__7260__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__9654 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__9655 = cljs.reader.read_char.call(null, reader);
      buffer = G__9654;
      ch = G__9655;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__9656 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__9657 = cljs.reader.read_char.call(null, reader);
        buffer = G__9656;
        ch = G__9657;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__9658 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__9659 = cljs.reader.read_char.call(null, reader);
          buffer = G__9658;
          ch = G__9659;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__9664 = function() {
            var G__9662 = buffer;
            G__9662.append(nch);
            return G__9662;
          }();
          var G__9665 = cljs.reader.read_char.call(null, reader);
          buffer = G__9664;
          ch = G__9665;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__9666 = function() {
            var G__9663 = buffer;
            G__9663.append(ch);
            return G__9663;
          }();
          var G__9667 = cljs.reader.read_char.call(null, reader);
          buffer = G__9666;
          ch = G__9667;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__7248__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__7248__auto__)) {
      return !(token.length === 1);
    } else {
      return and__7248__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_literal = function cljs$reader$read_literal(rdr, ch) {
  var token = cljs.reader.read_token.call(null, rdr, ch);
  var chars = cljs.core.subs.call(null, token, 1);
  if (chars.length === 1) {
    return chars;
  } else {
    if (chars === "tab") {
      return "\t";
    } else {
      if (chars === "return") {
        return "\r";
      } else {
        if (chars === "newline") {
          return "\n";
        } else {
          if (chars === "space") {
            return " ";
          } else {
            if (chars === "backspace") {
              return "\b";
            } else {
              if (chars === "formfeed") {
                return "\f";
              } else {
                if (chars.charAt(0) === "u") {
                  return cljs.reader.make_unicode_char.call(null, cljs.core.subs.call(null, chars, 1));
                } else {
                  if (chars.charAt(0) === "o") {
                    return cljs.reader.not_implemented.call(null, rdr, token);
                  } else {
                    return cljs.reader.reader_error.call(null, rdr, "Unknown character literal: ", token);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return cljs.core.PersistentArrayMap.createAsIfByAssoc([f, true]);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    var x__8102__auto__ = sym;
    return cljs.core._conj.call(null, function() {
      var x__8102__auto____$1 = cljs.reader.read.call(null, rdr, true, null, true);
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto____$1);
    }(), x__8102__auto__);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IWithMeta$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o)) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.PersistentHashSet.createWithCheck(cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_literal;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__9670 = reader;
        var G__9671 = eof_is_error;
        var G__9672 = sentinel;
        var G__9673 = is_recursive;
        reader = G__9670;
        eof_is_error = G__9671;
        sentinel = G__9672;
        is_recursive = G__9673;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__9674 = cljs.reader.read_comment.call(null, reader, ch);
          var G__9675 = eof_is_error;
          var G__9676 = sentinel;
          var G__9677 = is_recursive;
          reader = G__9674;
          eof_is_error = G__9675;
          sentinel = G__9676;
          is_recursive = G__9677;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__9678 = reader;
            var G__9679 = eof_is_error;
            var G__9680 = sentinel;
            var G__9681 = is_recursive;
            reader = G__9678;
            eof_is_error = G__9679;
            sentinel = G__9680;
            is_recursive = G__9681;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  if (typeof s === "string") {
  } else {
    throw new Error("Cannot read from non-string object.");
  }
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__9682 = b.append("0");
          b = G__9682;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__7248__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__7248__auto__)) {
    var or__7260__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__7248__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" Failed:  "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(low), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\x3c\x3d"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\x3c\x3d"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__9686 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__9686, 0, null);
  var years = cljs.core.nth.call(null, vec__9686, 1, null);
  var months = cljs.core.nth.call(null, vec__9686, 2, null);
  var days = cljs.core.nth.call(null, vec__9686, 3, null);
  var hours = cljs.core.nth.call(null, vec__9686, 4, null);
  var minutes = cljs.core.nth.call(null, vec__9686, 5, null);
  var seconds = cljs.core.nth.call(null, vec__9686, 6, null);
  var fraction = cljs.core.nth.call(null, vec__9686, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__9686, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__9686, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__9686, 10, null);
  var v = vec__9686;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unrecognized date/time syntax: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__7260__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__7260__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__7260__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__7260__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__7260__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__7260__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__7260__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__7260__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4655__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var vec__9692 = temp__4655__auto__;
    var years = cljs.core.nth.call(null, vec__9692, 0, null);
    var months = cljs.core.nth.call(null, vec__9692, 1, null);
    var days = cljs.core.nth.call(null, vec__9692, 2, null);
    var hours = cljs.core.nth.call(null, vec__9692, 3, null);
    var minutes = cljs.core.nth.call(null, vec__9692, 4, null);
    var seconds = cljs.core.nth.call(null, vec__9692, 5, null);
    var ms = cljs.core.nth.call(null, vec__9692, 6, null);
    var offset = cljs.core.nth.call(null, vec__9692, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1000);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unrecognized date/time syntax: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__9711_9727 = cljs.core.seq.call(null, form);
    var chunk__9712_9728 = null;
    var count__9713_9729 = 0;
    var i__9714_9730 = 0;
    while (true) {
      if (i__9714_9730 < count__9713_9729) {
        var x_9731 = cljs.core._nth.call(null, chunk__9712_9728, i__9714_9730);
        arr.push(x_9731);
        var G__9732 = seq__9711_9727;
        var G__9733 = chunk__9712_9728;
        var G__9734 = count__9713_9729;
        var G__9735 = i__9714_9730 + 1;
        seq__9711_9727 = G__9732;
        chunk__9712_9728 = G__9733;
        count__9713_9729 = G__9734;
        i__9714_9730 = G__9735;
        continue;
      } else {
        var temp__4657__auto___9736 = cljs.core.seq.call(null, seq__9711_9727);
        if (temp__4657__auto___9736) {
          var seq__9711_9737__$1 = temp__4657__auto___9736;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9711_9737__$1)) {
            var c__8079__auto___9738 = cljs.core.chunk_first.call(null, seq__9711_9737__$1);
            var G__9739 = cljs.core.chunk_rest.call(null, seq__9711_9737__$1);
            var G__9740 = c__8079__auto___9738;
            var G__9741 = cljs.core.count.call(null, c__8079__auto___9738);
            var G__9742 = 0;
            seq__9711_9727 = G__9739;
            chunk__9712_9728 = G__9740;
            count__9713_9729 = G__9741;
            i__9714_9730 = G__9742;
            continue;
          } else {
            var x_9743 = cljs.core.first.call(null, seq__9711_9737__$1);
            arr.push(x_9743);
            var G__9744 = cljs.core.next.call(null, seq__9711_9737__$1);
            var G__9745 = null;
            var G__9746 = 0;
            var G__9747 = 0;
            seq__9711_9727 = G__9744;
            chunk__9712_9728 = G__9745;
            count__9713_9729 = G__9746;
            i__9714_9730 = G__9747;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = {};
      var seq__9717_9748 = cljs.core.seq.call(null, form);
      var chunk__9718_9749 = null;
      var count__9719_9750 = 0;
      var i__9720_9751 = 0;
      while (true) {
        if (i__9720_9751 < count__9719_9750) {
          var vec__9721_9752 = cljs.core._nth.call(null, chunk__9718_9749, i__9720_9751);
          var k_9753 = cljs.core.nth.call(null, vec__9721_9752, 0, null);
          var v_9754 = cljs.core.nth.call(null, vec__9721_9752, 1, null);
          obj[cljs.core.name.call(null, k_9753)] = v_9754;
          var G__9755 = seq__9717_9748;
          var G__9756 = chunk__9718_9749;
          var G__9757 = count__9719_9750;
          var G__9758 = i__9720_9751 + 1;
          seq__9717_9748 = G__9755;
          chunk__9718_9749 = G__9756;
          count__9719_9750 = G__9757;
          i__9720_9751 = G__9758;
          continue;
        } else {
          var temp__4657__auto___9759 = cljs.core.seq.call(null, seq__9717_9748);
          if (temp__4657__auto___9759) {
            var seq__9717_9760__$1 = temp__4657__auto___9759;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9717_9760__$1)) {
              var c__8079__auto___9761 = cljs.core.chunk_first.call(null, seq__9717_9760__$1);
              var G__9762 = cljs.core.chunk_rest.call(null, seq__9717_9760__$1);
              var G__9763 = c__8079__auto___9761;
              var G__9764 = cljs.core.count.call(null, c__8079__auto___9761);
              var G__9765 = 0;
              seq__9717_9748 = G__9762;
              chunk__9718_9749 = G__9763;
              count__9719_9750 = G__9764;
              i__9720_9751 = G__9765;
              continue;
            } else {
              var vec__9724_9766 = cljs.core.first.call(null, seq__9717_9760__$1);
              var k_9767 = cljs.core.nth.call(null, vec__9724_9766, 0, null);
              var v_9768 = cljs.core.nth.call(null, vec__9724_9766, 1, null);
              obj[cljs.core.name.call(null, k_9767)] = v_9768;
              var G__9769 = cljs.core.next.call(null, seq__9717_9760__$1);
              var G__9770 = null;
              var G__9771 = 0;
              var G__9772 = 0;
              seq__9717_9748 = G__9769;
              chunk__9718_9749 = G__9770;
              count__9719_9750 = G__9771;
              i__9720_9751 = G__9772;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("JS literal expects a vector or map containing "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return cljs.core.uuid.call(null, uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null), cljs.core.PersistentArrayMap.EMPTY));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("no.en.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.crypt.base64");
no.en.core.port_number = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "amqp", "amqp", -994422895), 5672, new cljs.core.Keyword(null, "http", "http", 382524695), 80, new cljs.core.Keyword(null, "https", "https", -1983909665), 443, new cljs.core.Keyword(null, "mysql", "mysql", -1431590210), 3306, new cljs.core.Keyword(null, "postgresql", "postgresql", -1568339962), 5432, new cljs.core.Keyword(null, "rabbitmq", "rabbitmq", 1046897371), 5672, new cljs.core.Keyword(null, "zookeeper", 
"zookeeper", 17281735), 2181], null);
no.en.core.url_regex = /([^:]+):\/\/(([^:]+):([^@]+)@)?(([^:\/]+)(:([0-9]+))?((\/[^?#]*)(\?([^#]*))?)?)(\#(.*))?/;
no.en.core.split_by_regex = function no$en$core$split_by_regex(s, pattern) {
  if (cljs.core.sequential_QMARK_.call(null, s)) {
    return s;
  } else {
    if (!clojure.string.blank_QMARK_.call(null, s)) {
      return clojure.string.split.call(null, s, pattern);
    } else {
      return null;
    }
  }
};
no.en.core.split_by_comma = function no$en$core$split_by_comma(s) {
  return no.en.core.split_by_regex.call(null, s, /\s*,\s*/);
};
no.en.core.utf8_string = function no$en$core$utf8_string(bytes) {
  throw cljs.core.ex_info.call(null, "utf8-string not implemented yet", bytes);
};
no.en.core.base64_encode = function no$en$core$base64_encode(bytes) {
  if (cljs.core.truth_(bytes)) {
    return goog.crypt.base64.encodeString(bytes, false);
  } else {
    return null;
  }
};
no.en.core.base64_decode = function no$en$core$base64_decode(s) {
  if (cljs.core.truth_(s)) {
    return goog.crypt.base64.decodeString(s, false);
  } else {
    return null;
  }
};
no.en.core.compact_map = function no$en$core$compact_map(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var v = cljs.core.get.call(null, m__$1, k);
    if (v == null || (cljs.core.map_QMARK_.call(null, v) || cljs.core.sequential_QMARK_.call(null, v)) && cljs.core.empty_QMARK_.call(null, v)) {
      return cljs.core.dissoc.call(null, m__$1, k);
    } else {
      return m__$1;
    }
  }, m, cljs.core.keys.call(null, m));
};
no.en.core.url_encode = function no$en$core$url_encode(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9799 = arguments.length;
  var i__8374__auto___9800 = 0;
  while (true) {
    if (i__8374__auto___9800 < len__8373__auto___9799) {
      args__8380__auto__.push(arguments[i__8374__auto___9800]);
      var G__9801 = i__8374__auto___9800 + 1;
      i__8374__auto___9800 = G__9801;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__9795) {
  var vec__9796 = p__9795;
  var encoding = cljs.core.nth.call(null, vec__9796, 0, null);
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, encodeURIComponent([cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join("")), "*", "%2A");
  } else {
    return null;
  }
};
no.en.core.url_encode.cljs$lang$maxFixedArity = 1;
no.en.core.url_encode.cljs$lang$applyTo = function(seq9793) {
  var G__9794 = cljs.core.first.call(null, seq9793);
  var seq9793__$1 = cljs.core.next.call(null, seq9793);
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(G__9794, seq9793__$1);
};
no.en.core.url_decode = function no$en$core$url_decode(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9808 = arguments.length;
  var i__8374__auto___9809 = 0;
  while (true) {
    if (i__8374__auto___9809 < len__8373__auto___9808) {
      args__8380__auto__.push(arguments[i__8374__auto___9809]);
      var G__9810 = i__8374__auto___9809 + 1;
      i__8374__auto___9809 = G__9810;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__9804) {
  var vec__9805 = p__9804;
  var encoding = cljs.core.nth.call(null, vec__9805, 0, null);
  if (cljs.core.truth_(s)) {
    return decodeURIComponent(s);
  } else {
    return null;
  }
};
no.en.core.url_decode.cljs$lang$maxFixedArity = 1;
no.en.core.url_decode.cljs$lang$applyTo = function(seq9802) {
  var G__9803 = cljs.core.first.call(null, seq9802);
  var seq9802__$1 = cljs.core.next.call(null, seq9802);
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(G__9803, seq9802__$1);
};
no.en.core.pow = function no$en$core$pow(n, x) {
  return Math.pow(n, x);
};
no.en.core.byte_scale = cljs.core.PersistentHashMap.fromArrays(["T", "K", "G", "M", "Y", "Z", "E", "B", "P"], [no.en.core.pow.call(null, 1024, 4), no.en.core.pow.call(null, 1024, 1), no.en.core.pow.call(null, 1024, 3), no.en.core.pow.call(null, 1024, 2), no.en.core.pow.call(null, 1024, 8), no.en.core.pow.call(null, 1024, 7), no.en.core.pow.call(null, 1024, 6), no.en.core.pow.call(null, 1024, 0), no.en.core.pow.call(null, 1024, 5)]);
no.en.core.apply_unit = function no$en$core$apply_unit(number, unit) {
  if (typeof unit === "string") {
    var G__9813 = clojure.string.upper_case.call(null, unit);
    switch(G__9813) {
      default:
        var G__9814 = unit;
        switch(G__9814) {
          case "M":
            return number * 1000000;
            break;
          case "B":
            return number * 1000000000;
            break;
          default:
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(unit)].join(""));
        }
    }
  } else {
    return number;
  }
};
no.en.core.parse_number = function no$en$core$parse_number(s, parse_fn) {
  var temp__4655__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(M|B)?.*/, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(""));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var matches = temp__4655__auto__;
    var number = parse_fn.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    if (cljs.core.not.call(null, isNaN(number))) {
      return no.en.core.apply_unit.call(null, number, unit);
    } else {
      return null;
    }
  } else {
    return null;
  }
};
no.en.core.parse_bytes = function no$en$core$parse_bytes(s) {
  var temp__4655__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(B|K|M|G|T|P|E|Z|Y)?.*/, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(""));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var matches = temp__4655__auto__;
    var number = cljs.reader.read_string.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    return cljs.core.long$.call(null, cljs.core.long$.call(null, cljs.reader.read_string.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, matches, 1))].join(""))) * cljs.core.get.call(null, no.en.core.byte_scale, clojure.string.upper_case.call(null, function() {
      var or__7260__auto__ = unit;
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return "";
      }
    }()), 1));
  } else {
    return null;
  }
};
no.en.core.parse_integer = function no$en$core$parse_integer(s) {
  return no.en.core.parse_number.call(null, s, function(p1__9817_SHARP_) {
    return parseInt(p1__9817_SHARP_);
  });
};
no.en.core.parse_long = function no$en$core$parse_long(s) {
  return no.en.core.parse_number.call(null, s, function(p1__9818_SHARP_) {
    return parseInt(p1__9818_SHARP_);
  });
};
no.en.core.parse_double = function no$en$core$parse_double(s) {
  return no.en.core.parse_number.call(null, s, function(p1__9819_SHARP_) {
    return parseFloat(p1__9819_SHARP_);
  });
};
no.en.core.parse_float = function no$en$core$parse_float(s) {
  return no.en.core.parse_number.call(null, s, function(p1__9820_SHARP_) {
    return parseFloat(p1__9820_SHARP_);
  });
};
no.en.core.format_query_params = function no$en$core$format_query_params(m) {
  var params = clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__9823_SHARP_) {
    return clojure.string.join.call(null, "\x3d", p1__9823_SHARP_);
  }, cljs.core.map.call(null, function(p1__9822_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [no.en.core.url_encode.call(null, cljs.core.name.call(null, cljs.core.first.call(null, p1__9822_SHARP_))), no.en.core.url_encode.call(null, cljs.core.second.call(null, p1__9822_SHARP_))], null);
  }, cljs.core.remove.call(null, function(p1__9821_SHARP_) {
    return clojure.string.blank_QMARK_.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, p1__9821_SHARP_))].join(""));
  }, cljs.core.sort_by.call(null, cljs.core.first, cljs.core.seq.call(null, m))))));
  if (!clojure.string.blank_QMARK_.call(null, params)) {
    return params;
  } else {
    return null;
  }
};
no.en.core.format_url = function no$en$core$format_url(m) {
  if (!cljs.core.empty_QMARK_.call(null, m)) {
    var query_params = (new cljs.core.Keyword(null, "query-params", "query-params", 900640534)).cljs$core$IFn$_invoke$arity$1(m);
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_((new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m))), cljs.core.str.cljs$core$IFn$_invoke$arity$1("://")].join("") : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var map__9826 = m;
      var map__9826__$1 = (!(map__9826 == null) ? map__9826.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__9826.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9826) : map__9826;
      var username = cljs.core.get.call(null, map__9826__$1, new cljs.core.Keyword(null, "username", "username", 1605666410));
      var password = cljs.core.get.call(null, map__9826__$1, new cljs.core.Keyword(null, "password", "password", 417022471));
      if (cljs.core.truth_(username)) {
        return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(username), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(password) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(password)].join("") : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1("@")].join("");
      } else {
        return null;
      }
    }()), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "server-name", "server-name", -1012104295)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var temp__4655__auto__ = (new cljs.core.Keyword(null, "server-port", "server-port", 663745648)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var port = temp__4655__auto__;
        if (!cljs.core._EQ_.call(null, port, no.en.core.port_number.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)))) {
          return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(port)].join("");
        } else {
          return null;
        }
      } else {
        return null;
      }
    }()), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m) == null && !cljs.core.empty_QMARK_.call(null, query_params) ? "/" : (new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(!cljs.core.empty_QMARK_.call(null, query_params) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1("?"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(no.en.core.format_query_params.call(null, 
    query_params))].join("") : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1(!clojure.string.blank_QMARK_.call(null, (new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1("#"), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))].join("") : null)].join("");
  } else {
    return null;
  }
};
no.en.core.public_url = function no$en$core$public_url(url) {
  return no.en.core.format_url.call(null, cljs.core.dissoc.call(null, url, new cljs.core.Keyword(null, "password", "password", 417022471)));
};
no.en.core.parse_percent = function no$en$core$parse_percent(s) {
  return no.en.core.parse_double.call(null, clojure.string.replace.call(null, s, "%", ""));
};
no.en.core.pattern_quote = function no$en$core$pattern_quote(s) {
  return clojure.string.replace.call(null, cljs.core.name.call(null, s), /([\[\]\^\$\|\(\)\\\+\*\?\{\}\=\!.])/, "\\\\$1");
};
no.en.core.separator = function no$en$core$separator(s) {
  var temp__4655__auto__ = cljs.core.re_matches.call(null, /([a-z0-9_-]+)([^a-z0-9_-]+).*/i, s);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var matches = temp__4655__auto__;
    return cljs.core.nth.call(null, matches, 2);
  } else {
    return null;
  }
};
no.en.core.parse_query_params = function no$en$core$parse_query_params(s) {
  if (cljs.core.truth_(s)) {
    return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(p1__9830_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, no.en.core.url_decode.call(null, cljs.core.first.call(null, p1__9830_SHARP_))), no.en.core.url_decode.call(null, cljs.core.second.call(null, p1__9830_SHARP_))], null);
    }, cljs.core.filter.call(null, function(p1__9829_SHARP_) {
      return cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, p1__9829_SHARP_));
    }, cljs.core.map.call(null, function(p1__9828_SHARP_) {
      return clojure.string.split.call(null, p1__9828_SHARP_, /=/);
    }, clojure.string.split.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(""), /&/)))));
  } else {
    return null;
  }
};
no.en.core.parse_url = function no$en$core$parse_url(s) {
  var temp__4655__auto__ = cljs.core.re_matches.call(null, no.en.core.url_regex, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(""));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var matches = temp__4655__auto__;
    var scheme = cljs.core.keyword.call(null, cljs.core.nth.call(null, matches, 1));
    return no.en.core.compact_map.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "password", "password", 417022471), new cljs.core.Keyword(null, "fragment", "fragment", 826775688), new cljs.core.Keyword(null, "username", "username", 1605666410), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), new cljs.core.Keyword(null, "query-params", "query-params", 900640534), new cljs.core.Keyword(null, "uri", "uri", -774711847), new cljs.core.Keyword(null, 
    "server-name", "server-name", -1012104295), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), new cljs.core.Keyword(null, "scheme", "scheme", 90199613)], [cljs.core.nth.call(null, matches, 4), cljs.core.nth.call(null, matches, 14), cljs.core.nth.call(null, matches, 3), function() {
      var or__7260__auto__ = no.en.core.parse_integer.call(null, cljs.core.nth.call(null, matches, 8));
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return no.en.core.port_number.call(null, scheme);
      }
    }(), no.en.core.parse_query_params.call(null, cljs.core.nth.call(null, matches, 12)), cljs.core.nth.call(null, matches, 10), cljs.core.nth.call(null, matches, 6), cljs.core.nth.call(null, matches, 12), scheme]));
  } else {
    return null;
  }
};
no.en.core.prog1 = function no$en$core$prog1(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9835 = arguments.length;
  var i__8374__auto___9836 = 0;
  while (true) {
    if (i__8374__auto___9836 < len__8373__auto___9835) {
      args__8380__auto__.push(arguments[i__8374__auto___9836]);
      var G__9837 = i__8374__auto___9836 + 1;
      i__8374__auto___9836 = G__9837;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 2 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(2), 0, null) : null;
  return no.en.core.prog1.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8381__auto__);
};
no.en.core.prog1.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
    var x__8102__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "result__9831__auto__", "result__9831__auto__", -227320108, null)), function() {
      var x__8102__auto__ = cljs.core.first.call(null, body);
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
    }()))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
  }(), cljs.core.rest.call(null, body), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "result__9831__auto__", "result__9831__auto__", -227320108, null)))));
};
no.en.core.prog1.cljs$lang$maxFixedArity = 2;
no.en.core.prog1.cljs$lang$applyTo = function(seq9832) {
  var G__9833 = cljs.core.first.call(null, seq9832);
  var seq9832__$1 = cljs.core.next.call(null, seq9832);
  var G__9834 = cljs.core.first.call(null, seq9832__$1);
  var seq9832__$2 = cljs.core.next.call(null, seq9832__$1);
  return no.en.core.prog1.cljs$core$IFn$_invoke$arity$variadic(G__9833, G__9834, seq9832__$2);
};
no.en.core.prog1.cljs$lang$macro = true;
no.en.core.with_retries_STAR_ = function no$en$core$with_retries_STAR_(n, thunk) {
  var n__$1 = n;
  while (true) {
    var temp__4655__auto__ = function() {
      try {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [thunk.call(null)], null);
      } catch (e9839) {
        if (e9839 instanceof Error) {
          var e = e9839;
          if (n__$1 === 0) {
            throw e;
          } else {
            return null;
          }
        } else {
          throw e9839;
        }
      }
    }();
    if (cljs.core.truth_(temp__4655__auto__)) {
      var result = temp__4655__auto__;
      return result.call(null, 0);
    } else {
      var G__9840 = n__$1 - 1;
      n__$1 = G__9840;
      continue;
    }
    break;
  }
};
no.en.core.with_retries = function no$en$core$with_retries(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9845 = arguments.length;
  var i__8374__auto___9846 = 0;
  while (true) {
    if (i__8374__auto___9846 < len__8373__auto___9845) {
      args__8380__auto__.push(arguments[i__8374__auto___9846]);
      var G__9847 = i__8374__auto___9846 + 1;
      i__8374__auto___9846 = G__9847;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 3 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(3), 0, null) : null;
  return no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8381__auto__);
};
no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, n, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("no.en.core", "with-retries*", "no.en.core/with-retries*", 172357687, null)), function() {
    var x__8102__auto__ = n;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
  }(), function() {
    var x__8102__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null)), function() {
      var x__8102__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
    }(), body)));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto__);
  }())));
};
no.en.core.with_retries.cljs$lang$maxFixedArity = 3;
no.en.core.with_retries.cljs$lang$applyTo = function(seq9841) {
  var G__9842 = cljs.core.first.call(null, seq9841);
  var seq9841__$1 = cljs.core.next.call(null, seq9841);
  var G__9843 = cljs.core.first.call(null, seq9841__$1);
  var seq9841__$2 = cljs.core.next.call(null, seq9841__$1);
  var G__9844 = cljs.core.first.call(null, seq9841__$2);
  var seq9841__$3 = cljs.core.next.call(null, seq9841__$2);
  return no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic(G__9842, G__9843, G__9844, seq9841__$3);
};
no.en.core.with_retries.cljs$lang$macro = true;
no.en.core.editable_QMARK_ = function no$en$core$editable_QMARK_(coll) {
  if (!(coll == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IEditableCollection$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEditableCollection, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEditableCollection, coll);
  }
};
no.en.core.reduce_map = function no$en$core$reduce_map(f, coll) {
  if (cljs.core.truth_(no.en.core.editable_QMARK_.call(null, coll))) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, f.call(null, cljs.core.assoc_BANG_), cljs.core.transient$.call(null, cljs.core.empty.call(null, coll)), coll));
  } else {
    return cljs.core.reduce_kv.call(null, f.call(null, cljs.core.assoc), cljs.core.empty.call(null, coll), coll);
  }
};
no.en.core.map_keys = function no$en$core$map_keys(f, coll) {
  return no.en.core.reduce_map.call(null, function(xf) {
    return function(m, k, v) {
      return xf.call(null, m, f.call(null, k), v);
    };
  }, coll);
};
no.en.core.map_vals = function no$en$core$map_vals(f, coll) {
  return no.en.core.reduce_map.call(null, function(xf) {
    return function(m, k, v) {
      return xf.call(null, m, k, f.call(null, v));
    };
  }, coll);
};
no.en.core.deep_merge = function no$en$core$deep_merge(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9851 = arguments.length;
  var i__8374__auto___9852 = 0;
  while (true) {
    if (i__8374__auto___9852 < len__8373__auto___9851) {
      args__8380__auto__.push(arguments[i__8374__auto___9852]);
      var G__9853 = i__8374__auto___9852 + 1;
      i__8374__auto___9852 = G__9853;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 0 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(0), 0, null) : null;
  return no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic(argseq__8381__auto__);
};
no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps)) {
    return cljs.core.apply.call(null, cljs.core.merge_with, no.en.core.deep_merge, maps);
  } else {
    return cljs.core.last.call(null, maps);
  }
};
no.en.core.deep_merge.cljs$lang$maxFixedArity = 0;
no.en.core.deep_merge.cljs$lang$applyTo = function(seq9850) {
  return no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq9850));
};
no.en.core.deep_merge_with = function no$en$core$deep_merge_with(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___9856 = arguments.length;
  var i__8374__auto___9857 = 0;
  while (true) {
    if (i__8374__auto___9857 < len__8373__auto___9856) {
      args__8380__auto__.push(arguments[i__8374__auto___9857]);
      var G__9858 = i__8374__auto___9857 + 1;
      i__8374__auto___9857 = G__9858;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  return cljs.core.apply.call(null, function() {
    var no$en$core$m__delegate = function(maps__$1) {
      if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps__$1)) {
        return cljs.core.apply.call(null, cljs.core.merge_with, no$en$core$m, maps__$1);
      } else {
        return cljs.core.apply.call(null, f, maps__$1);
      }
    };
    var no$en$core$m = function(var_args) {
      var maps__$1 = null;
      if (arguments.length > 0) {
        var G__9859__i = 0, G__9859__a = new Array(arguments.length - 0);
        while (G__9859__i < G__9859__a.length) {
          G__9859__a[G__9859__i] = arguments[G__9859__i + 0];
          ++G__9859__i;
        }
        maps__$1 = new cljs.core.IndexedSeq(G__9859__a, 0);
      }
      return no$en$core$m__delegate.call(this, maps__$1);
    };
    no$en$core$m.cljs$lang$maxFixedArity = 0;
    no$en$core$m.cljs$lang$applyTo = function(arglist__9860) {
      var maps__$1 = cljs.core.seq(arglist__9860);
      return no$en$core$m__delegate(maps__$1);
    };
    no$en$core$m.cljs$core$IFn$_invoke$arity$variadic = no$en$core$m__delegate;
    return no$en$core$m;
  }(), maps);
};
no.en.core.deep_merge_with.cljs$lang$maxFixedArity = 1;
no.en.core.deep_merge_with.cljs$lang$applyTo = function(seq9854) {
  var G__9855 = cljs.core.first.call(null, seq9854);
  var seq9854__$1 = cljs.core.next.call(null, seq9854);
  return no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic(G__9855, seq9854__$1);
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  if (typeof Symbol != "undefined") {
    types.ITERATOR = Symbol.iterator;
  } else {
    types.ITERATOR = "@@iterator";
  }
  types.TaggedValue = function Transit$TaggedValue(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740991");
  types.MIN_INT = Long.fromString("-9007199254740991");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x, 10);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function Transit$Keyword(name) {
    this._name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this._name;
  };
  types.Keyword.prototype["namespace"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(0, idx);
    } else {
      return null;
    }
  };
  types.Keyword.prototype["name"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(idx + 1, this._name.length);
    } else {
      return this._name;
    }
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this._name == other._name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this._name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function Transit$Symbol(name) {
    this._name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype["namespace"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(0, idx);
    } else {
      return null;
    }
  };
  types.Symbol.prototype["name"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(idx + 1, this._name.length);
    } else {
      return this._name;
    }
  };
  types.Symbol.prototype.toString = function() {
    return this._name;
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this._name == other._name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this._name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function Transit$UUID(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function() {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function Transit$ArrayMapIterator(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function() {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitArrayMapIterator.prototype[types.ITERATOR] = function() {
    return this;
  };
  types.TransitMapIterator = function Transit$MapIterator(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.TransitMapIterator.prototype[types.ITERATOR] = function() {
    return this;
  };
  types.mapEquals = function(me, you) {
    if (me instanceof types.TransitMap && types.isMap(you)) {
      if (me.size !== you.size) {
        return false;
      }
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (me instanceof types.TransitArrayMap && types.isMap(you)) {
        if (me.size !== you.size) {
          return false;
        }
        var entries = me._entries;
        for (var j = 0;j < entries.length;j += 2) {
          if (!eq.equals(entries[j + 1], you.get(entries[j]))) {
            return false;
          }
        }
        return true;
      } else {
        if (you != null && typeof you === "object") {
          var ks = util.objectKeys(you), kslen = ks.length;
          if (me.size === kslen) {
            for (var i = 0;i < kslen;i++) {
              var k = ks[i];
              if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
                return false;
              }
            }
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.print = function(x) {
    if (x == null) {
      return "null";
    }
    if (goog.isArray(x)) {
      return "[" + x.toString() + "]";
    } else {
      if (goog.isString(x)) {
        return '"' + x + '"';
      } else {
        return x.toString();
      }
    }
  };
  types.printMap = function(map) {
    var idx = 0, str = "TransitMap {";
    map.forEach(function(v, k) {
      str += types.print(k) + " \x3d\x3e " + types.print(v);
      if (idx < map.size - 1) {
        str += ", ";
      }
      idx++;
    });
    return str + "}";
  };
  types.printSet = function(set) {
    var idx = 0, str = "TransitSet {";
    set.forEach(function(v) {
      str += types.print(v);
      if (idx < set.size - 1) {
        str += ", ";
      }
      idx++;
    });
    return str + "}";
  };
  types.TransitArrayMap = function Transit$ArrayMap(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return types.printMap(this);
  };
  types.TransitArrayMap.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      var ret = this.backingMap["delete"](k);
      this.size = this.backingMap.size;
      return ret;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          var ret = this._entries[i + 1];
          this._entries.splice(i, 2);
          this.size--;
          return ret;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.clone = function() {
    var clone = types.map();
    this.forEach(function(v, k) {
      clone.set(k, v);
    });
    return clone;
  };
  types.TransitArrayMap.prototype["clone"] = types.TransitArrayMap.prototype.clone;
  types.TransitArrayMap.prototype[types.ITERATOR] = function() {
    return this.entries();
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function Transit$Map(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return types.printMap(this);
  };
  types.TransitMap.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        var ret = bucket[i + 1];
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        return ret;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.clone = function() {
    var clone = types.map();
    this.forEach(function(v, k) {
      clone.set(k, v);
    });
    return clone;
  };
  types.TransitMap.prototype["clone"] = types.TransitMap.prototype.clone;
  types.TransitMap.prototype[types.ITERATOR] = function() {
    return this.entries();
  };
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function Transit$Set(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return types.printSet(this);
  };
  types.TransitSet.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    var ret = this.map["delete"](value);
    this.size = this.map.size;
    return ret;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.clone = function() {
    var clone = types.set();
    this.forEach(function(k) {
      clone.add(k);
    });
    return clone;
  };
  types.TransitSet.prototype["clone"] = types.TransitSet.prototype.clone;
  types.TransitSet.prototype[types.ITERATOR] = function() {
    return this.values();
  };
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.TaggedValue && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return -Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);
        break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function Transit$WriteCache() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function Transit$ReadCache() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function Transit$Tag(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      case "s":
      case "?":
      case "i":
      case "d":
      case "b":
      case "'":
      case "array":
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function Transit$Decoder(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init(node);
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function Transit$JSONUnmarshaller(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function Transit$Reader(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function Transit$NilHandler() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function Transit$StringHandler() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function Transit$NumberHandler() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function Transit$IntegerHandler() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function Transit$BooleanHandler() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function Transit$ArrayHandler() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function Transit$MapHandler() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function Transit$VerboseDateHandler() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function Transit$DateHandler() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function Transit$UUIDHandler() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function Transit$KeywordHandler() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v._name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function Transit$SymbolHandler() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v._name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function Transit$TaggedHandler() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function Transit$TransitSetHandler() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function Transit$ArrayMapHandler() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function Transit$MapHandler() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function Transit$BufferHandler() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function Transit$Uint8ArrayHandler() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function Transit$Handlers() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      case "string":
      case "boolean":
      case "number":
      case "array":
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function Transit$JSONMarshaller(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        if (k !== undefined) {
          self.handlers.set(k, v);
        } else {
          throw new Error("Cannot create handler for JavaScript undefined");
        }
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return [this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString();
    ret = ret.substr("function ".length);
    ret = ret.substr(0, ret.indexOf("("));
    isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    var arr = null, rep = null, tag = null, ks = null, i = 0;
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            arr = em.unpack(obj);
            rep = [];
            tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], false, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, false, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          ks = util.objectKeys(obj);
          ret = {};
          for (;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            arr = em.unpack(obj);
            ret = ["^ "];
            if (arr) {
              for (;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            arr = em.unpack(obj);
            rep = [];
            tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], false, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, false, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return [tag, rep];
          }
        } else {
          ret = ["^ "];
          ks = util.objectKeys(obj);
          for (;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return [em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function Transit$Writer(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var util = com.cognitect.transit.util, reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.MapLike;
  transit.SetLike;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashArrayLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.objectToMap = function(obj) {
    var ret = transit.map();
    for (var p in obj) {
      if (obj.hasOwnProperty(p)) {
        ret.set(p, obj[p]);
      }
    }
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = util.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.objectToMap", transit.objectToMap);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", util.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, objectToMap:transit.objectToMap, decoder:decoder.decoder, 
    UUIDfromString:types.UUIDfromString, randomUUID:util.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("com.cognitect.transit");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
cljs.core.UUID.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join(""));
  }
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join(""));
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
goog.math.Long.prototype.cljs$core$IHash$ = cljs.core.PROTOCOL_SENTINEL;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.hash.call(null, this$__$1.toString());
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1('#uuid "'), cljs.core.str.cljs$core$IFn$_invoke$arity$1(uuid__$1.toString()), cljs.core.str.cljs$core$IFn$_invoke$arity$1('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__9867_9871 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__9868_9872 = null;
  var count__9869_9873 = 0;
  var i__9870_9874 = 0;
  while (true) {
    if (i__9870_9874 < count__9869_9873) {
      var k_9875 = cljs.core._nth.call(null, chunk__9868_9872, i__9870_9874);
      var v_9876 = b[k_9875];
      a[k_9875] = v_9876;
      var G__9877 = seq__9867_9871;
      var G__9878 = chunk__9868_9872;
      var G__9879 = count__9869_9873;
      var G__9880 = i__9870_9874 + 1;
      seq__9867_9871 = G__9877;
      chunk__9868_9872 = G__9878;
      count__9869_9873 = G__9879;
      i__9870_9874 = G__9880;
      continue;
    } else {
      var temp__4657__auto___9881 = cljs.core.seq.call(null, seq__9867_9871);
      if (temp__4657__auto___9881) {
        var seq__9867_9882__$1 = temp__4657__auto___9881;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9867_9882__$1)) {
          var c__8079__auto___9883 = cljs.core.chunk_first.call(null, seq__9867_9882__$1);
          var G__9884 = cljs.core.chunk_rest.call(null, seq__9867_9882__$1);
          var G__9885 = c__8079__auto___9883;
          var G__9886 = cljs.core.count.call(null, c__8079__auto___9883);
          var G__9887 = 0;
          seq__9867_9871 = G__9884;
          chunk__9868_9872 = G__9885;
          count__9869_9873 = G__9886;
          i__9870_9874 = G__9887;
          continue;
        } else {
          var k_9888 = cljs.core.first.call(null, seq__9867_9882__$1);
          var v_9889 = b[k_9888];
          a[k_9888] = v_9889;
          var G__9890 = cljs.core.next.call(null, seq__9867_9882__$1);
          var G__9891 = null;
          var G__9892 = 0;
          var G__9893 = 0;
          seq__9867_9871 = G__9890;
          chunk__9868_9872 = G__9891;
          count__9869_9873 = G__9892;
          i__9870_9874 = G__9893;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function cognitect$transit$reader(var_args) {
  var args9894 = [];
  var len__8373__auto___9897 = arguments.length;
  var i__8374__auto___9898 = 0;
  while (true) {
    if (i__8374__auto___9898 < len__8373__auto___9897) {
      args9894.push(arguments[i__8374__auto___9898]);
      var G__9899 = i__8374__auto___9898 + 1;
      i__8374__auto___9898 = G__9899;
      continue;
    } else {
    }
    break;
  }
  var G__9896 = args9894.length;
  switch(G__9896) {
    case 1:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9894.length)].join(""));
  }
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.reader.call(null, type, null);
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
    return cljs.core.symbol.call(null, v);
  }, ":", function(v) {
    return cljs.core.keyword.call(null, v);
  }, "set", function(v) {
    return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
  }, "list", function(v) {
    return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
  }, "cmap", function(v) {
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < v.length) {
        var G__9901 = i + 2;
        var G__9902 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
        i = G__9901;
        ret = G__9902;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, ret);
      }
      break;
    }
  }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts))), "mapBuilder":new cognitect.transit.MapBuilder, "arrayBuilder":new cognitect.transit.VectorBuilder, "prefersStrings":false}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.reader.cljs$lang$maxFixedArity = 2;
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__9903_9907 = cljs.core.seq.call(null, v);
  var chunk__9904_9908 = null;
  var count__9905_9909 = 0;
  var i__9906_9910 = 0;
  while (true) {
    if (i__9906_9910 < count__9905_9909) {
      var x_9911 = cljs.core._nth.call(null, chunk__9904_9908, i__9906_9910);
      ret.push(x_9911);
      var G__9912 = seq__9903_9907;
      var G__9913 = chunk__9904_9908;
      var G__9914 = count__9905_9909;
      var G__9915 = i__9906_9910 + 1;
      seq__9903_9907 = G__9912;
      chunk__9904_9908 = G__9913;
      count__9905_9909 = G__9914;
      i__9906_9910 = G__9915;
      continue;
    } else {
      var temp__4657__auto___9916 = cljs.core.seq.call(null, seq__9903_9907);
      if (temp__4657__auto___9916) {
        var seq__9903_9917__$1 = temp__4657__auto___9916;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9903_9917__$1)) {
          var c__8079__auto___9918 = cljs.core.chunk_first.call(null, seq__9903_9917__$1);
          var G__9919 = cljs.core.chunk_rest.call(null, seq__9903_9917__$1);
          var G__9920 = c__8079__auto___9918;
          var G__9921 = cljs.core.count.call(null, c__8079__auto___9918);
          var G__9922 = 0;
          seq__9903_9907 = G__9919;
          chunk__9904_9908 = G__9920;
          count__9905_9909 = G__9921;
          i__9906_9910 = G__9922;
          continue;
        } else {
          var x_9923 = cljs.core.first.call(null, seq__9903_9917__$1);
          ret.push(x_9923);
          var G__9924 = cljs.core.next.call(null, seq__9903_9917__$1);
          var G__9925 = null;
          var G__9926 = 0;
          var G__9927 = 0;
          seq__9903_9907 = G__9924;
          chunk__9904_9908 = G__9925;
          count__9905_9909 = G__9926;
          i__9906_9910 = G__9927;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__9928_9932 = cljs.core.seq.call(null, v);
  var chunk__9929_9933 = null;
  var count__9930_9934 = 0;
  var i__9931_9935 = 0;
  while (true) {
    if (i__9931_9935 < count__9930_9934) {
      var x_9936 = cljs.core._nth.call(null, chunk__9929_9933, i__9931_9935);
      ret.push(x_9936);
      var G__9937 = seq__9928_9932;
      var G__9938 = chunk__9929_9933;
      var G__9939 = count__9930_9934;
      var G__9940 = i__9931_9935 + 1;
      seq__9928_9932 = G__9937;
      chunk__9929_9933 = G__9938;
      count__9930_9934 = G__9939;
      i__9931_9935 = G__9940;
      continue;
    } else {
      var temp__4657__auto___9941 = cljs.core.seq.call(null, seq__9928_9932);
      if (temp__4657__auto___9941) {
        var seq__9928_9942__$1 = temp__4657__auto___9941;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9928_9942__$1)) {
          var c__8079__auto___9943 = cljs.core.chunk_first.call(null, seq__9928_9942__$1);
          var G__9944 = cljs.core.chunk_rest.call(null, seq__9928_9942__$1);
          var G__9945 = c__8079__auto___9943;
          var G__9946 = cljs.core.count.call(null, c__8079__auto___9943);
          var G__9947 = 0;
          seq__9928_9932 = G__9944;
          chunk__9929_9933 = G__9945;
          count__9930_9934 = G__9946;
          i__9931_9935 = G__9947;
          continue;
        } else {
          var x_9948 = cljs.core.first.call(null, seq__9928_9942__$1);
          ret.push(x_9948);
          var G__9949 = cljs.core.next.call(null, seq__9928_9942__$1);
          var G__9950 = null;
          var G__9951 = 0;
          var G__9952 = 0;
          seq__9928_9932 = G__9949;
          chunk__9929_9933 = G__9950;
          count__9930_9934 = G__9951;
          i__9931_9935 = G__9952;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__9953_9957 = cljs.core.seq.call(null, v);
  var chunk__9954_9958 = null;
  var count__9955_9959 = 0;
  var i__9956_9960 = 0;
  while (true) {
    if (i__9956_9960 < count__9955_9959) {
      var x_9961 = cljs.core._nth.call(null, chunk__9954_9958, i__9956_9960);
      ret.push(x_9961);
      var G__9962 = seq__9953_9957;
      var G__9963 = chunk__9954_9958;
      var G__9964 = count__9955_9959;
      var G__9965 = i__9956_9960 + 1;
      seq__9953_9957 = G__9962;
      chunk__9954_9958 = G__9963;
      count__9955_9959 = G__9964;
      i__9956_9960 = G__9965;
      continue;
    } else {
      var temp__4657__auto___9966 = cljs.core.seq.call(null, seq__9953_9957);
      if (temp__4657__auto___9966) {
        var seq__9953_9967__$1 = temp__4657__auto___9966;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9953_9967__$1)) {
          var c__8079__auto___9968 = cljs.core.chunk_first.call(null, seq__9953_9967__$1);
          var G__9969 = cljs.core.chunk_rest.call(null, seq__9953_9967__$1);
          var G__9970 = c__8079__auto___9968;
          var G__9971 = cljs.core.count.call(null, c__8079__auto___9968);
          var G__9972 = 0;
          seq__9953_9957 = G__9969;
          chunk__9954_9958 = G__9970;
          count__9955_9959 = G__9971;
          i__9956_9960 = G__9972;
          continue;
        } else {
          var x_9973 = cljs.core.first.call(null, seq__9953_9967__$1);
          ret.push(x_9973);
          var G__9974 = cljs.core.next.call(null, seq__9953_9967__$1);
          var G__9975 = null;
          var G__9976 = 0;
          var G__9977 = 0;
          seq__9953_9957 = G__9974;
          chunk__9954_9958 = G__9975;
          count__9955_9959 = G__9976;
          i__9956_9960 = G__9977;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function cognitect$transit$writer(var_args) {
  var args9978 = [];
  var len__8373__auto___9993 = arguments.length;
  var i__8374__auto___9994 = 0;
  while (true) {
    if (i__8374__auto___9994 < len__8373__auto___9993) {
      args9978.push(arguments[i__8374__auto___9994]);
      var G__9995 = i__8374__auto___9994 + 1;
      i__8374__auto___9994 = G__9995;
      continue;
    } else {
    }
    break;
  }
  var G__9980 = args9978.length;
  switch(G__9980) {
    case 1:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9978.length)].join(""));
  }
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.writer.call(null, type, null);
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  var keyword_handler = new cognitect.transit.KeywordHandler;
  var symbol_handler = new cognitect.transit.SymbolHandler;
  var list_handler = new cognitect.transit.ListHandler;
  var map_handler = new cognitect.transit.MapHandler;
  var set_handler = new cognitect.transit.SetHandler;
  var vector_handler = new cognitect.transit.VectorHandler;
  var uuid_handler = new cognitect.transit.UUIDHandler;
  var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
  cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
  symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
  return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(m, kfn, vfn) {
      return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(obj, k, v) {
          var G__9981 = obj;
          G__9981.push(kfn.call(null, k), vfn.call(null, v));
          return G__9981;
        };
      }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
    var x9982 = cljs.core.clone.call(null, handlers);
    x9982.forEach = function(x9982, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(f) {
        var coll = this;
        var seq__9983 = cljs.core.seq.call(null, coll);
        var chunk__9984 = null;
        var count__9985 = 0;
        var i__9986 = 0;
        while (true) {
          if (i__9986 < count__9985) {
            var vec__9987 = cljs.core._nth.call(null, chunk__9984, i__9986);
            var k = cljs.core.nth.call(null, vec__9987, 0, null);
            var v = cljs.core.nth.call(null, vec__9987, 1, null);
            f.call(null, v, k);
            var G__9997 = seq__9983;
            var G__9998 = chunk__9984;
            var G__9999 = count__9985;
            var G__10000 = i__9986 + 1;
            seq__9983 = G__9997;
            chunk__9984 = G__9998;
            count__9985 = G__9999;
            i__9986 = G__10000;
            continue;
          } else {
            var temp__4657__auto__ = cljs.core.seq.call(null, seq__9983);
            if (temp__4657__auto__) {
              var seq__9983__$1 = temp__4657__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__9983__$1)) {
                var c__8079__auto__ = cljs.core.chunk_first.call(null, seq__9983__$1);
                var G__10001 = cljs.core.chunk_rest.call(null, seq__9983__$1);
                var G__10002 = c__8079__auto__;
                var G__10003 = cljs.core.count.call(null, c__8079__auto__);
                var G__10004 = 0;
                seq__9983 = G__10001;
                chunk__9984 = G__10002;
                count__9985 = G__10003;
                i__9986 = G__10004;
                continue;
              } else {
                var vec__9990 = cljs.core.first.call(null, seq__9983__$1);
                var k = cljs.core.nth.call(null, vec__9990, 0, null);
                var v = cljs.core.nth.call(null, vec__9990, 1, null);
                f.call(null, v, k);
                var G__10005 = cljs.core.next.call(null, seq__9983__$1);
                var G__10006 = null;
                var G__10007 = 0;
                var G__10008 = 0;
                seq__9983 = G__10005;
                chunk__9984 = G__10006;
                count__9985 = G__10007;
                i__9986 = G__10008;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x9982, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
    return x9982;
  }(), "unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(x) {
      if (x instanceof cljs.core.PersistentArrayMap) {
        return x.arr;
      } else {
        return false;
      }
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.writer.cljs$lang$maxFixedArity = 2;
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function cognitect$transit$write_handler(var_args) {
  var args10009 = [];
  var len__8373__auto___10015 = arguments.length;
  var i__8374__auto___10016 = 0;
  while (true) {
    if (i__8374__auto___10016 < len__8373__auto___10015) {
      args10009.push(arguments[i__8374__auto___10016]);
      var G__10017 = i__8374__auto___10016 + 1;
      i__8374__auto___10016 = G__10017;
      continue;
    } else {
    }
    break;
  }
  var G__10011 = args10009.length;
  switch(G__10011) {
    case 2:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10009.length)].join(""));
  }
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2 = function(tag_fn, rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, null, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3 = function(tag_fn, rep_fn, str_rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
  if (typeof cognitect.transit.t_cognitect$transit10012 !== "undefined") {
  } else {
    cognitect.transit.t_cognitect$transit10012 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, meta10013) {
      this.tag_fn = tag_fn;
      this.rep_fn = rep_fn;
      this.str_rep_fn = str_rep_fn;
      this.verbose_handler_fn = verbose_handler_fn;
      this.meta10013 = meta10013;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cognitect.transit.t_cognitect$transit10012.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10014, meta10013__$1) {
      var self__ = this;
      var _10014__$1 = this;
      return new cognitect.transit.t_cognitect$transit10012(self__.tag_fn, self__.rep_fn, self__.str_rep_fn, self__.verbose_handler_fn, meta10013__$1);
    };
    cognitect.transit.t_cognitect$transit10012.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10014) {
      var self__ = this;
      var _10014__$1 = this;
      return self__.meta10013;
    };
    cognitect.transit.t_cognitect$transit10012.prototype.tag = function(o) {
      var self__ = this;
      var _ = this;
      return self__.tag_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit10012.prototype.rep = function(o) {
      var self__ = this;
      var _ = this;
      return self__.rep_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit10012.prototype.stringRep = function(o) {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.str_rep_fn)) {
        return self__.str_rep_fn.call(null, o);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit10012.prototype.getVerboseHandler = function() {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.verbose_handler_fn)) {
        return self__.verbose_handler_fn.call(null);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit10012.getBasis = function() {
      return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag-fn", "tag-fn", 242055482, null), new cljs.core.Symbol(null, "rep-fn", "rep-fn", -1724891035, null), new cljs.core.Symbol(null, "str-rep-fn", "str-rep-fn", -1179615016, null), new cljs.core.Symbol(null, "verbose-handler-fn", "verbose-handler-fn", 547340594, null), new cljs.core.Symbol(null, "meta10013", "meta10013", -734290353, null)], null);
    };
    cognitect.transit.t_cognitect$transit10012.cljs$lang$type = true;
    cognitect.transit.t_cognitect$transit10012.cljs$lang$ctorStr = "cognitect.transit/t_cognitect$transit10012";
    cognitect.transit.t_cognitect$transit10012.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cognitect.transit/t_cognitect$transit10012");
    };
    cognitect.transit.__GT_t_cognitect$transit10012 = function cognitect$transit$__GT_t_cognitect$transit10012(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta10013) {
      return new cognitect.transit.t_cognitect$transit10012(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta10013);
    };
  }
  return new cognitect.transit.t_cognitect$transit10012(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.write_handler.cljs$lang$maxFixedArity = 4;
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.intValue.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  var or__7260__auto__ = com.cognitect.transit.types.isUUID.call(null, x);
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    return x instanceof cljs.core.UUID;
  }
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("cljs_http.util");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("clojure.string");
goog.require("cognitect.transit");
goog.require("goog.userAgent");
goog.require("no.en.core");
cljs_http.util.basic_auth = function cljs_http$util$basic_auth(credentials) {
  if (cljs.core.truth_(credentials)) {
    var vec__10024 = cljs.core.map_QMARK_.call(null, credentials) ? cljs.core.map.call(null, credentials, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "username", "username", 1605666410), new cljs.core.Keyword(null, "password", "password", 417022471)], null)) : credentials;
    var username = cljs.core.nth.call(null, vec__10024, 0, null);
    var password = cljs.core.nth.call(null, vec__10024, 1, null);
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Basic "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(no.en.core.base64_encode.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(username), cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(password)].join("")))].join("");
  } else {
    return null;
  }
};
cljs_http.util.build_url = function cljs_http$util$build_url(p__10027) {
  var map__10031 = p__10027;
  var map__10031__$1 = (!(map__10031 == null) ? map__10031.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__10031.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10031) : map__10031;
  var scheme = cljs.core.get.call(null, map__10031__$1, new cljs.core.Keyword(null, "scheme", "scheme", 90199613));
  var server_name = cljs.core.get.call(null, map__10031__$1, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295));
  var server_port = cljs.core.get.call(null, map__10031__$1, new cljs.core.Keyword(null, "server-port", "server-port", 663745648));
  var uri = cljs.core.get.call(null, map__10031__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var query_string = cljs.core.get.call(null, map__10031__$1, new cljs.core.Keyword(null, "query-string", "query-string", -1018845061));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
    var G__10033 = new goog.Uri;
    G__10033.setScheme(cljs.core.name.call(null, function() {
      var or__7260__auto__ = scheme;
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return new cljs.core.Keyword(null, "http", "http", 382524695);
      }
    }()));
    G__10033.setDomain(server_name);
    G__10033.setPort(server_port);
    G__10033.setPath(uri);
    G__10033.setQuery(query_string, true);
    return G__10033;
  }())].join("");
};
cljs_http.util.camelize = function cljs_http$util$camelize(s) {
  return clojure.string.join.call(null, "-", cljs.core.map.call(null, clojure.string.capitalize, clojure.string.split.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(""), /-/)));
};
cljs_http.util.build_headers = function cljs_http$util$build_headers(m) {
  return cljs.core.clj__GT_js.call(null, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, m)), cljs.core.vals.call(null, m)));
};
cljs_http.util.user_agent = function cljs_http$util$user_agent() {
  return goog.userAgent.getUserAgentString();
};
cljs_http.util.android_QMARK_ = function cljs_http$util$android_QMARK_() {
  return cljs.core.re_matches.call(null, /.*android.*/i, cljs_http.util.user_agent.call(null));
};
cljs_http.util.transit_decode = function cljs_http$util$transit_decode(s, type, opts) {
  var rdr = cognitect.transit.reader.call(null, type, opts);
  return cognitect.transit.read.call(null, rdr, s);
};
cljs_http.util.transit_encode = function cljs_http$util$transit_encode(x, type, opts) {
  var wrtr = cognitect.transit.writer.call(null, type, opts);
  return cognitect.transit.write.call(null, wrtr, x);
};
cljs_http.util.json_decode = function cljs_http$util$json_decode(s) {
  var temp__4655__auto__ = !clojure.string.blank_QMARK_.call(null, s) ? JSON.parse(s) : null;
  if (cljs.core.truth_(temp__4655__auto__)) {
    var v = temp__4655__auto__;
    return cljs.core.js__GT_clj.call(null, v, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
  } else {
    return null;
  }
};
cljs_http.util.json_encode = function cljs_http$util$json_encode(x) {
  return JSON.stringify(cljs.core.clj__GT_js.call(null, x));
};
cljs_http.util.parse_headers = function cljs_http$util$parse_headers(headers) {
  return cljs.core.reduce.call(null, function(p1__10035_SHARP_, p2__10034_SHARP_) {
    var vec__10039 = clojure.string.split.call(null, p2__10034_SHARP_, /:\s+/);
    var k = cljs.core.nth.call(null, vec__10039, 0, null);
    var v = cljs.core.nth.call(null, vec__10039, 1, null);
    if (clojure.string.blank_QMARK_.call(null, k) || clojure.string.blank_QMARK_.call(null, v)) {
      return p1__10035_SHARP_;
    } else {
      return cljs.core.assoc.call(null, p1__10035_SHARP_, clojure.string.lower_case.call(null, k), v);
    }
  }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, function() {
    var or__7260__auto__ = headers;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return "";
    }
  }(), /(\n)|(\r)|(\r\n)|(\n\r)/));
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
};
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 == null)) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__7928__auto__ = port == null ? null : port;
    var m__7929__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, port, fn1_handler);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, port, fn1_handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
      }
    }
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
};
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 == null)) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__7928__auto__ = port == null ? null : port;
    var m__7929__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, port, val, fn1_handler);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, port, val, fn1_handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
      }
    }
  }
};
cljs.core.async.impl.protocols.Channel = function() {
};
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__7928__auto__ = chan == null ? null : chan;
    var m__7929__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, chan);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, chan);
      } else {
        throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
      }
    }
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__7928__auto__ = chan == null ? null : chan;
    var m__7929__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, chan);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, chan);
      } else {
        throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
      }
    }
  }
};
cljs.core.async.impl.protocols.Handler = function() {
};
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__7928__auto__ = h == null ? null : h;
    var m__7929__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, h);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.blockable_QMARK_ = function cljs$core$async$impl$protocols$blockable_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(h);
  } else {
    var x__7928__auto__ = h == null ? null : h;
    var m__7929__auto__ = cljs.core.async.impl.protocols.blockable_QMARK_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, h);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.blockable_QMARK_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.blockable?", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$commit$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__7928__auto__ = h == null ? null : h;
    var m__7929__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, h);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
};
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__7928__auto__ = b == null ? null : b;
    var m__7929__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, b);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__7928__auto__ = b == null ? null : b;
    var m__7929__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, b);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__7928__auto__ = b == null ? null : b;
    var m__7929__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, b, itm);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, b, itm);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.close_buf_BANG_ = function cljs$core$async$impl$protocols$close_buf_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1(b);
  } else {
    var x__7928__auto__ = b == null ? null : b;
    var m__7929__auto__ = cljs.core.async.impl.protocols.close_buf_BANG_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, b);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.protocols.close_buf_BANG_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.close-buf!", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_(var_args) {
  var args9571 = [];
  var len__8373__auto___9574 = arguments.length;
  var i__8374__auto___9575 = 0;
  while (true) {
    if (i__8374__auto___9575 < len__8373__auto___9574) {
      args9571.push(arguments[i__8374__auto___9575]);
      var G__9576 = i__8374__auto___9575 + 1;
      i__8374__auto___9575 = G__9576;
      continue;
    } else {
    }
    break;
  }
  var G__9573 = args9571.length;
  switch(G__9573) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9571.length)].join(""));
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error("Assert failed: (not (nil? itm))");
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__9580 = cnt + 1;
      cnt = G__9580;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__8183__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__8183__auto__) {
      var v_9581 = this$.pop();
      if (keep_QMARK_.call(null, v_9581)) {
        this$.unshift(v_9581);
      } else {
      }
      var G__9582 = x + 1;
      x = G__9582;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "length", "length", -2065447907, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("Can't create a ring buffer of size 0"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(\x3e n 0)")].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
if (typeof cljs.core.async.impl.buffers.NO_VAL !== "undefined") {
} else {
  cljs.core.async.impl.buffers.NO_VAL = new Object;
}
cljs.core.async.impl.buffers.undelivered_QMARK_ = function cljs$core$async$impl$buffers$undelivered_QMARK_(val) {
  return cljs.core.async.impl.buffers.NO_VAL === val;
};
cljs.core.async.impl.buffers.PromiseBuffer = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return false;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    self__.val = itm;
  } else {
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return self__.val = null;
  } else {
    return null;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return 0;
  } else {
    return 1;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/PromiseBuffer";
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.buffers/PromiseBuffer");
};
cljs.core.async.impl.buffers.__GT_PromiseBuffer = function cljs$core$async$impl$buffers$__GT_PromiseBuffer(val) {
  return new cljs.core.async.impl.buffers.PromiseBuffer(val);
};
cljs.core.async.impl.buffers.promise_buffer = function cljs$core$async$impl$buffers$promise_buffer() {
  return new cljs.core.async.impl.buffers.PromiseBuffer(cljs.core.async.impl.buffers.NO_VAL);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_9585 = 0;
  while (true) {
    var m_9586 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_9586 == null) {
    } else {
      m_9586.call(null);
      if (count_9585 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__9587 = count_9585 + 1;
        count_9585 = G__9587;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.async.impl.dispatch.queued_QMARK_ && cljs.core.async.impl.dispatch.running_QMARK_) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593 = function(val, meta9594) {
      this.val = val;
      this.meta9594 = meta9594;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9595, meta9594__$1) {
      var self__ = this;
      var _9595__$1 = this;
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593(self__.val, meta9594__$1);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9595) {
      var self__ = this;
      var _9595__$1 = this;
      return self__.meta9594;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "meta9594", "meta9594", -331648308, null)], null);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593.cljs$lang$type = true;
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels9593";
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels9593");
    };
    cljs.core.async.impl.channels.__GT_t_cljs$core$async$impl$channels9593 = function cljs$core$async$impl$channels$box_$___GT_t_cljs$core$async$impl$channels9593(val__$1, meta9594) {
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593(val__$1, meta9594);
    };
  }
  return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels9593(val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "handler", "handler", 1444934915, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
};
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (!(this$ == null) && !(this$.cljs$core$async$impl$channels$MMC$abort$arity$1 == null)) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__7928__auto__ = this$ == null ? null : this$;
    var m__7929__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, this$);
    } else {
      var m__7929__auto____$1 = cljs.core.async.impl.channels.abort["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_9596 = self__.puts.pop();
    if (putter_9596 == null) {
    } else {
      var put_handler_9597 = putter_9596.handler;
      var val_9598 = putter_9596.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_9597)) {
        var put_cb_9599 = cljs.core.async.impl.protocols.commit.call(null, put_handler_9597);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_9599, put_handler_9597, val_9598, putter_9596, this$__$1) {
          return function() {
            return put_cb_9599.call(null, true);
          };
        }(put_cb_9599, put_handler_9597, val_9598, putter_9596, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("Can't put nil in on a channel"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(not (nil? val))")].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = self__.buf;
      if (cljs.core.truth_(and__7248__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__7248__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_9600 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_9600)) {
            var take_cb_9601 = cljs.core.async.impl.protocols.commit.call(null, taker_9600);
            var val_9602__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_9601, val_9602__$1, taker_9600, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_9601.call(null, val_9602__$1);
              };
            }(take_cb_9601, val_9602__$1, taker_9600, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" pending puts are allowed on a single channel."), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" Consider using a windowed buffer.")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), 
            cljs.core.str.cljs$core$IFn$_invoke$arity$1("(\x3c (.-length puts) impl/MAX-QUEUE-SIZE)")].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        } else {
        }
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_9603 = self__.puts.pop();
          if (putter_9603 == null) {
          } else {
            var put_handler_9604 = putter_9603.handler;
            var val_9605 = putter_9603.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_9604)) {
              var put_cb_9606 = cljs.core.async.impl.protocols.commit.call(null, put_handler_9604);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_9606, put_handler_9604, val_9605, putter_9603, _, retval, this$__$1) {
                return function() {
                  return put_cb_9606.call(null, true);
                };
              }(put_cb_9606, put_handler_9604, val_9605, putter_9603, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_9605))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__7248__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__7248__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__7248__auto__;
            }
          }())) {
            var has_val = function() {
              var and__7248__auto__ = self__.buf;
              if (cljs.core.truth_(and__7248__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__7248__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" pending takes are allowed on a single channel.")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(\x3c (.-length takes) impl/MAX-QUEUE-SIZE)")].join(""));
            }
            self__.takes.unbounded_unshift(handler);
          } else {
          }
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = self__.buf;
      if (cljs.core.truth_(and__7248__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__7248__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_9607 = self__.takes.pop();
      if (taker_9607 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_9607)) {
          var take_cb_9608 = cljs.core.async.impl.protocols.commit.call(null, taker_9607);
          var val_9609 = cljs.core.truth_(function() {
            var and__7248__auto__ = self__.buf;
            if (cljs.core.truth_(and__7248__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__7248__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_9608, val_9609, taker_9607, this$__$1) {
            return function() {
              return take_cb_9608.call(null, val_9609);
            };
          }(take_cb_9608, val_9609, taker_9607, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    if (cljs.core.truth_(self__.buf)) {
      cljs.core.async.impl.protocols.close_buf_BANG_.call(null, self__.buf);
    } else {
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "takes", "takes", 298247964, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-takes", "dirty-takes", 575642138, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-puts", "dirty-puts", 
  57041148, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "closed", "closed", 720856168, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "add!", "add!", 2046056845, null)], null);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__7260__auto__ = exh;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan(var_args) {
  var args9610 = [];
  var len__8373__auto___9615 = arguments.length;
  var i__8374__auto___9616 = 0;
  while (true) {
    if (i__8374__auto___9616 < len__8373__auto___9615) {
      args9610.push(arguments[i__8374__auto___9616]);
      var G__9617 = i__8374__auto___9616 + 1;
      i__8374__auto___9616 = G__9617;
      continue;
    } else {
    }
    break;
  }
  var G__9612 = args9610.length;
  switch(G__9612) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9610.length)].join(""));
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__9619 = null;
        var G__9619__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e9613) {
            var t = e9613;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__9619__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e9614) {
            var t = e9614;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__9619 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__9619__1.call(this, buf__$1);
            case 2:
              return G__9619__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__9619.cljs$core$IFn$_invoke$arity$1 = G__9619__1;
        G__9619.cljs$core$IFn$_invoke$arity$2 = G__9619__2;
        return G__9619;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281 = function(f, meta11282) {
      this.f = f;
      this.meta11282 = meta11282;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11283, meta11282__$1) {
      var self__ = this;
      var _11283__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281(self__.f, meta11282__$1);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11283) {
      var self__ = this;
      var _11283__$1 = this;
      return self__.meta11282;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta11282", "meta11282", -808788400, null)], null);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers11281";
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers11281");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t_cljs$core$async$impl$ioc_helpers11281 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t_cljs$core$async$impl$ioc_helpers11281(f__$1, meta11282) {
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281(f__$1, meta11282);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers11281(f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e11285) {
    if (e11285 instanceof Object) {
      var ex = e11285;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e11285;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4655__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_11288_11290 = state;
    statearr_11288_11290[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_11288_11290[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var cb = temp__4655__auto__;
    var statearr_11289_11291 = state;
    statearr_11289_11291[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_11289_11291[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4655__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_11294_11296 = state;
    statearr_11294_11296[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_11294_11296[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var cb = temp__4655__auto__;
    var statearr_11295_11297 = state;
    statearr_11295_11297[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_11295_11297[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__7887__auto__, k__7888__auto__) {
  var self__ = this;
  var this__7887__auto____$1 = this;
  return this__7887__auto____$1.cljs$core$ILookup$_lookup$arity$3(null, k__7888__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__7889__auto__, k11299, else__7890__auto__) {
  var self__ = this;
  var this__7889__auto____$1 = this;
  var G__11301 = k11299 instanceof cljs.core.Keyword ? k11299.fqn : null;
  switch(G__11301) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k11299, else__7890__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__7901__auto__, writer__7902__auto__, opts__7903__auto__) {
  var self__ = this;
  var this__7901__auto____$1 = this;
  var pr_pair__7904__auto__ = function(this__7901__auto____$1) {
    return function(keyval__7905__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__7902__auto__, cljs.core.pr_writer, "", " ", "", opts__7903__auto__, keyval__7905__auto__);
    };
  }(this__7901__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__7902__auto__, pr_pair__7904__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__7903__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__11298) {
  var self__ = this;
  var G__11298__$1 = this;
  return new cljs.core.RecordIter(0, G__11298__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)], null), 
  cljs.core.truth_(self__.__extmap) ? cljs.core._iterator.call(null, self__.__extmap) : cljs.core.nil_iter.call(null));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__7885__auto__) {
  var self__ = this;
  var this__7885__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__7881__auto__) {
  var self__ = this;
  var this__7881__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__7891__auto__) {
  var self__ = this;
  var this__7891__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__7882__auto__) {
  var self__ = this;
  var this__7882__auto____$1 = this;
  var h__7700__auto__ = self__.__hash;
  if (!(h__7700__auto__ == null)) {
    return h__7700__auto__;
  } else {
    var h__7700__auto____$1 = cljs.core.hash_imap.call(null, this__7882__auto____$1);
    self__.__hash = h__7700__auto____$1;
    return h__7700__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__7883__auto__, other__7884__auto__) {
  var self__ = this;
  var this__7883__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__7248__auto__ = other__7884__auto__;
    if (cljs.core.truth_(and__7248__auto__)) {
      return this__7883__auto____$1.constructor === other__7884__auto__.constructor && cljs.core.equiv_map.call(null, this__7883__auto____$1, other__7884__auto__);
    } else {
      return and__7248__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__7896__auto__, k__7897__auto__) {
  var self__ = this;
  var this__7896__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__7897__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__7896__auto____$1), self__.__meta), k__7897__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__7897__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__7894__auto__, k__7895__auto__, G__11298) {
  var self__ = this;
  var this__7894__auto____$1 = this;
  var pred__11302 = cljs.core.keyword_identical_QMARK_;
  var expr__11303 = k__7895__auto__;
  if (cljs.core.truth_(pred__11302.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__11303))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__11298, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__11302.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__11303))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__11298, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__11302.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__11303))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__11298, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__11302.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__11303))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__11298, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__11302.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__11303))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__11298, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__7895__auto__, G__11298), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__7899__auto__) {
  var self__ = this;
  var this__7899__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__7886__auto__, G__11298) {
  var self__ = this;
  var this__7886__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__11298, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__7892__auto__, entry__7893__auto__) {
  var self__ = this;
  var this__7892__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__7893__auto__)) {
    return this__7892__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.call(null, entry__7893__auto__, 0), cljs.core._nth.call(null, entry__7893__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__7892__auto____$1, entry__7893__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "catch-block", "catch-block", -1479223021, null), cljs.core.with_meta(new cljs.core.Symbol(null, "catch-exception", "catch-exception", -356775268, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "Class", "Class", 2064526977, null)], null)), new cljs.core.Symbol(null, "finally-block", "finally-block", 
  -1821453297, null), new cljs.core.Symbol(null, "continue-block", "continue-block", -211516323, null), new cljs.core.Symbol(null, "prev", "prev", 43462301, null)], null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__7921__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__7921__auto__, writer__7922__auto__) {
  return cljs.core._write.call(null, writer__7922__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__11300) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__11300), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__11300), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__11300), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__11300), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__11300), null, cljs.core.dissoc.call(null, G__11300, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_11307 = state;
  statearr_11307[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_11307;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = exception;
      if (cljs.core.truth_(and__7248__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__7248__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__7248__auto__ = exception;
        if (cljs.core.truth_(and__7248__auto__)) {
          var and__7248__auto____$1 = catch_block;
          if (cljs.core.truth_(and__7248__auto____$1)) {
            return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), catch_exception) || exception instanceof catch_exception;
          } else {
            return and__7248__auto____$1;
          }
        } else {
          return and__7248__auto__;
        }
      }())) {
        var statearr_11313 = state;
        statearr_11313[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_11313[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_11313[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_11313[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_11313;
      } else {
        if (cljs.core.truth_(function() {
          var and__7248__auto__ = exception;
          if (cljs.core.truth_(and__7248__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__7248__auto__;
          }
        }())) {
          var statearr_11314_11318 = state;
          statearr_11314_11318[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__11319 = state;
          state = G__11319;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__7248__auto__ = exception;
            if (cljs.core.truth_(and__7248__auto__)) {
              var and__7248__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__7248__auto____$1) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__7248__auto____$1;
              }
            } else {
              return and__7248__auto__;
            }
          }())) {
            var statearr_11315 = state;
            statearr_11315[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_11315[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_11315;
          } else {
            if (cljs.core.truth_(function() {
              var and__7248__auto__ = cljs.core.not.call(null, exception);
              if (and__7248__auto__) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__7248__auto__;
              }
            }())) {
              var statearr_11316 = state;
              statearr_11316[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_11316[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_11316;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_11317 = state;
                statearr_11317[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_11317[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_11317;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level(var_args) {
  var args11322 = [];
  var len__8373__auto___11325 = arguments.length;
  var i__8374__auto___11326 = 0;
  while (true) {
    if (i__8374__auto___11326 < len__8373__auto___11325) {
      args11322.push(arguments[i__8374__auto___11326]);
      var G__11327 = i__8374__auto___11326 + 1;
      i__8374__auto___11326 = G__11327;
      continue;
    } else {
    }
    break;
  }
  var G__11324 = args11322.length;
  switch(G__11324) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11322.length)].join(""));
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__11329 = level + 1;
      level = G__11329;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var x__8102__auto__ = self__.key;
  return cljs.core._conj.call(null, function() {
    var x__8102__auto____$1 = self__.val;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8102__auto____$1);
  }(), x__8102__auto__);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "forward", "forward", 1083186224, null)], null);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node(var_args) {
  var args11330 = [];
  var len__8373__auto___11333 = arguments.length;
  var i__8374__auto___11334 = 0;
  while (true) {
    if (i__8374__auto___11334 < len__8373__auto___11333) {
      args11330.push(arguments[i__8374__auto___11334]);
      var G__11335 = i__8374__auto___11334 + 1;
      i__8374__auto___11334 = G__11335;
      continue;
    } else {
    }
    break;
  }
  var G__11332 = args11330.length;
  switch(G__11332) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11330.length)].join(""));
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_11337 = 0;
  while (true) {
    if (i_11337 < arr.length) {
      arr[i_11337] = null;
      var G__11338 = i_11337 + 1;
      i_11337 = G__11338;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node(var_args) {
  var args11339 = [];
  var len__8373__auto___11342 = arguments.length;
  var i__8374__auto___11343 = 0;
  while (true) {
    if (i__8374__auto___11343 < len__8373__auto___11342) {
      args11339.push(arguments[i__8374__auto___11343]);
      var G__11344 = i__8374__auto___11343 + 1;
      i__8374__auto___11343 = G__11344;
      continue;
    } else {
    }
    break;
  }
  var G__11341 = args11339.length;
  switch(G__11341) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11339.length)].join(""));
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4655__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4655__auto__)) {
            var x_SINGLEQUOTE_ = temp__4655__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__11346 = x_SINGLEQUOTE_;
              x__$1 = G__11346;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__11347 = x__$1;
      var G__11348 = k;
      var G__11349 = level - 1;
      var G__11350 = update;
      x = G__11347;
      k = G__11348;
      level = G__11349;
      update = G__11350;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_11351 = self__.level + 1;
      while (true) {
        if (i_11351 <= new_level + 1) {
          update[i_11351] = self__.header;
          var G__11352 = i_11351 + 1;
          i_11351 = G__11352;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_11353 = 0;
    while (true) {
      if (i_11353 <= self__.level) {
        var links_11354 = update[i_11353].forward;
        if (links_11354[i_11353] === x__$1) {
          links_11354[i_11353] = x__$1.forward[i_11353];
          var G__11355 = i_11353 + 1;
          i_11353 = G__11355;
          continue;
        } else {
          var G__11356 = i_11353 + 1;
          i_11353 = G__11356;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__11357 = x_SINGLEQUOTE_;
              x__$1 = G__11357;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__11358 = nx;
        var G__11359 = level__$1 - 1;
        x = G__11358;
        level__$1 = G__11359;
        continue;
      } else {
        var G__11360 = x;
        var G__11361 = level__$1 - 1;
        x = G__11360;
        level__$1 = G__11361;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__11362 = x_SINGLEQUOTE_;
              x__$1 = G__11362;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__11363 = nx;
        var G__11364 = level__$1 - 1;
        x = G__11363;
        level__$1 = G__11364;
        continue;
      } else {
        var G__11365 = x;
        var G__11366 = level__$1 - 1;
        x = G__11365;
        level__$1 = G__11366;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "header", "header", 1759972661, null), cljs.core.with_meta(new cljs.core.Symbol(null, "level", "level", -1363938217, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
  return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout);
  var or__7260__auto__ = cljs.core.truth_(function() {
    var and__7248__auto__ = me;
    if (cljs.core.truth_(and__7248__auto__)) {
      return me.key < timeout + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__7248__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__7260__auto__, timeout, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__7260__auto__, timeout, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(var_args) {
  var args11422 = [];
  var len__8373__auto___11428 = arguments.length;
  var i__8374__auto___11429 = 0;
  while (true) {
    if (i__8374__auto___11429 < len__8373__auto___11428) {
      args11422.push(arguments[i__8374__auto___11429]);
      var G__11430 = i__8374__auto___11429 + 1;
      i__8374__auto___11429 = G__11430;
      continue;
    } else {
    }
    break;
  }
  var G__11424 = args11422.length;
  switch(G__11424) {
    case 1:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11422.length)].join(""));
  }
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.async.fn_handler.call(null, f, true);
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2 = function(f, blockable) {
  if (typeof cljs.core.async.t_cljs$core$async11425 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async11425 = function(f, blockable, meta11426) {
      this.f = f;
      this.blockable = blockable;
      this.meta11426 = meta11426;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async11425.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11427, meta11426__$1) {
      var self__ = this;
      var _11427__$1 = this;
      return new cljs.core.async.t_cljs$core$async11425(self__.f, self__.blockable, meta11426__$1);
    };
    cljs.core.async.t_cljs$core$async11425.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11427) {
      var self__ = this;
      var _11427__$1 = this;
      return self__.meta11426;
    };
    cljs.core.async.t_cljs$core$async11425.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async11425.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async11425.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.blockable;
    };
    cljs.core.async.t_cljs$core$async11425.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t_cljs$core$async11425.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "blockable", "blockable", -28395259, null), new cljs.core.Symbol(null, "meta11426", "meta11426", 967241225, null)], null);
    };
    cljs.core.async.t_cljs$core$async11425.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async11425.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11425";
    cljs.core.async.t_cljs$core$async11425.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async11425");
    };
    cljs.core.async.__GT_t_cljs$core$async11425 = function cljs$core$async$__GT_t_cljs$core$async11425(f__$1, blockable__$1, meta11426) {
      return new cljs.core.async.t_cljs$core$async11425(f__$1, blockable__$1, meta11426);
    };
  }
  return new cljs.core.async.t_cljs$core$async11425(f, blockable, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.fn_handler.cljs$lang$maxFixedArity = 2;
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  if (!(buff == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === buff.cljs$core$async$impl$protocols$UnblockingBuffer$) {
      return true;
    } else {
      if (!buff.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
  }
};
cljs.core.async.chan = function cljs$core$async$chan(var_args) {
  var args11434 = [];
  var len__8373__auto___11437 = arguments.length;
  var i__8374__auto___11438 = 0;
  while (true) {
    if (i__8374__auto___11438 < len__8373__auto___11437) {
      args11434.push(arguments[i__8374__auto___11438]);
      var G__11439 = i__8374__auto___11438 + 1;
      i__8374__auto___11438 = G__11439;
      continue;
    } else {
    }
    break;
  }
  var G__11436 = args11434.length;
  switch(G__11436) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11434.length)].join(""));
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("buffer must be supplied when transducer is"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("buf-or-n")].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.promise_chan = function cljs$core$async$promise_chan(var_args) {
  var args11441 = [];
  var len__8373__auto___11444 = arguments.length;
  var i__8374__auto___11445 = 0;
  while (true) {
    if (i__8374__auto___11445 < len__8373__auto___11444) {
      args11441.push(arguments[i__8374__auto___11445]);
      var G__11446 = i__8374__auto___11445 + 1;
      i__8374__auto___11445 = G__11446;
      continue;
    } else {
    }
    break;
  }
  var G__11443 = args11441.length;
  switch(G__11443) {
    case 0:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11441.length)].join(""));
  }
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.promise_chan.call(null, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1 = function(xform) {
  return cljs.core.async.promise_chan.call(null, xform, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2 = function(xform, ex_handler) {
  return cljs.core.async.chan.call(null, cljs.core.async.impl.buffers.promise_buffer.call(null), xform, ex_handler);
};
cljs.core.async.promise_chan.cljs$lang$maxFixedArity = 2;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_(var_args) {
  var args11448 = [];
  var len__8373__auto___11451 = arguments.length;
  var i__8374__auto___11452 = 0;
  while (true) {
    if (i__8374__auto___11452 < len__8373__auto___11451) {
      args11448.push(arguments[i__8374__auto___11452]);
      var G__11453 = i__8374__auto___11452 + 1;
      i__8374__auto___11452 = G__11453;
      continue;
    } else {
    }
    break;
  }
  var G__11450 = args11448.length;
  switch(G__11450) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11448.length)].join(""));
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_11455 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_11455);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_11455, ret) {
        return function() {
          return fn1.call(null, val_11455);
        };
      }(val_11455, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_(var_args) {
  var args11456 = [];
  var len__8373__auto___11459 = arguments.length;
  var i__8374__auto___11460 = 0;
  while (true) {
    if (i__8374__auto___11460 < len__8373__auto___11459) {
      args11456.push(arguments[i__8374__auto___11460]);
      var G__11461 = i__8374__auto___11460 + 1;
      i__8374__auto___11460 = G__11461;
      continue;
    } else {
    }
    break;
  }
  var G__11458 = args11456.length;
  switch(G__11458) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11456.length)].join(""));
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4655__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var ret = temp__4655__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4655__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var retb = temp__4655__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4655__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4655__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__8183__auto___11463 = n;
  var x_11464 = 0;
  while (true) {
    if (x_11464 < n__8183__auto___11463) {
      a[x_11464] = 0;
      var G__11465 = x_11464 + 1;
      x_11464 = G__11465;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__11466 = i + 1;
      i = G__11466;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t_cljs$core$async11470 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async11470 = function(flag, meta11471) {
      this.flag = flag;
      this.meta11471 = meta11471;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async11470.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_11472, meta11471__$1) {
        var self__ = this;
        var _11472__$1 = this;
        return new cljs.core.async.t_cljs$core$async11470(self__.flag, meta11471__$1);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11470.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_11472) {
        var self__ = this;
        var _11472__$1 = this;
        return self__.meta11471;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11470.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async11470.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11470.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return true;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11470.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11470.getBasis = function(flag) {
      return function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "meta11471", "meta11471", 1118557169, null)], null);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async11470.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async11470.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11470";
    cljs.core.async.t_cljs$core$async11470.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
        return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async11470");
      };
    }(flag);
    cljs.core.async.__GT_t_cljs$core$async11470 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t_cljs$core$async11470(flag__$1, meta11471) {
        return new cljs.core.async.t_cljs$core$async11470(flag__$1, meta11471);
      };
    }(flag);
  }
  return new cljs.core.async.t_cljs$core$async11470(flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t_cljs$core$async11476 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async11476 = function(flag, cb, meta11477) {
      this.flag = flag;
      this.cb = cb;
      this.meta11477 = meta11477;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async11476.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11478, meta11477__$1) {
      var self__ = this;
      var _11478__$1 = this;
      return new cljs.core.async.t_cljs$core$async11476(self__.flag, self__.cb, meta11477__$1);
    };
    cljs.core.async.t_cljs$core$async11476.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11478) {
      var self__ = this;
      var _11478__$1 = this;
      return self__.meta11477;
    };
    cljs.core.async.t_cljs$core$async11476.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async11476.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t_cljs$core$async11476.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async11476.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t_cljs$core$async11476.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null), new cljs.core.Symbol(null, "meta11477", "meta11477", -1619543111, null)], null);
    };
    cljs.core.async.t_cljs$core$async11476.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async11476.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11476";
    cljs.core.async.t_cljs$core$async11476.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async11476");
    };
    cljs.core.async.__GT_t_cljs$core$async11476 = function cljs$core$async$alt_handler_$___GT_t_cljs$core$async11476(flag__$1, cb__$1, meta11477) {
      return new cljs.core.async.t_cljs$core$async11476(flag__$1, cb__$1, meta11477);
    };
  }
  return new cljs.core.async.t_cljs$core$async11476(flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__11479_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11479_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__11480_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11480_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__7260__auto__ = wport;
            if (cljs.core.truth_(or__7260__auto__)) {
              return or__7260__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__11481 = i + 1;
          i = G__11481;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__7260__auto__ = ret;
  if (cljs.core.truth_(or__7260__auto__)) {
    return or__7260__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4657__auto__ = function() {
        var and__7248__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__7248__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__7248__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4657__auto__)) {
        var got = temp__4657__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___11487 = arguments.length;
  var i__8374__auto___11488 = 0;
  while (true) {
    if (i__8374__auto___11488 < len__8373__auto___11487) {
      args__8380__auto__.push(arguments[i__8374__auto___11488]);
      var G__11489 = i__8374__auto___11488 + 1;
      i__8374__auto___11488 = G__11489;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__11484) {
  var map__11485 = p__11484;
  var map__11485__$1 = (!(map__11485 == null) ? map__11485.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11485.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11485) : map__11485;
  var opts = map__11485__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq11482) {
  var G__11483 = cljs.core.first.call(null, seq11482);
  var seq11482__$1 = cljs.core.next.call(null, seq11482);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11483, seq11482__$1);
};
cljs.core.async.offer_BANG_ = function cljs$core$async$offer_BANG_(port, val) {
  var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.poll_BANG_ = function cljs$core$async$poll_BANG_(port) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.pipe = function cljs$core$async$pipe(var_args) {
  var args11490 = [];
  var len__8373__auto___11540 = arguments.length;
  var i__8374__auto___11541 = 0;
  while (true) {
    if (i__8374__auto___11541 < len__8373__auto___11540) {
      args11490.push(arguments[i__8374__auto___11541]);
      var G__11542 = i__8374__auto___11541 + 1;
      i__8374__auto___11541 = G__11542;
      continue;
    } else {
    }
    break;
  }
  var G__11492 = args11490.length;
  switch(G__11492) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11490.length)].join(""));
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__11377__auto___11544 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___11544) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___11544) {
          return function(state_11516) {
            var state_val_11517 = state_11516[1];
            if (state_val_11517 === 7) {
              var inst_11512 = state_11516[2];
              var state_11516__$1 = state_11516;
              var statearr_11518_11545 = state_11516__$1;
              statearr_11518_11545[2] = inst_11512;
              statearr_11518_11545[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11517 === 1) {
                var state_11516__$1 = state_11516;
                var statearr_11519_11546 = state_11516__$1;
                statearr_11519_11546[2] = null;
                statearr_11519_11546[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11517 === 4) {
                  var inst_11495 = state_11516[7];
                  var inst_11495__$1 = state_11516[2];
                  var inst_11496 = inst_11495__$1 == null;
                  var state_11516__$1 = function() {
                    var statearr_11520 = state_11516;
                    statearr_11520[7] = inst_11495__$1;
                    return statearr_11520;
                  }();
                  if (cljs.core.truth_(inst_11496)) {
                    var statearr_11521_11547 = state_11516__$1;
                    statearr_11521_11547[1] = 5;
                  } else {
                    var statearr_11522_11548 = state_11516__$1;
                    statearr_11522_11548[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11517 === 13) {
                    var state_11516__$1 = state_11516;
                    var statearr_11523_11549 = state_11516__$1;
                    statearr_11523_11549[2] = null;
                    statearr_11523_11549[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11517 === 6) {
                      var inst_11495 = state_11516[7];
                      var state_11516__$1 = state_11516;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11516__$1, 11, to, inst_11495);
                    } else {
                      if (state_val_11517 === 3) {
                        var inst_11514 = state_11516[2];
                        var state_11516__$1 = state_11516;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11516__$1, inst_11514);
                      } else {
                        if (state_val_11517 === 12) {
                          var state_11516__$1 = state_11516;
                          var statearr_11524_11550 = state_11516__$1;
                          statearr_11524_11550[2] = null;
                          statearr_11524_11550[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11517 === 2) {
                            var state_11516__$1 = state_11516;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11516__$1, 4, from);
                          } else {
                            if (state_val_11517 === 11) {
                              var inst_11505 = state_11516[2];
                              var state_11516__$1 = state_11516;
                              if (cljs.core.truth_(inst_11505)) {
                                var statearr_11525_11551 = state_11516__$1;
                                statearr_11525_11551[1] = 12;
                              } else {
                                var statearr_11526_11552 = state_11516__$1;
                                statearr_11526_11552[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11517 === 9) {
                                var state_11516__$1 = state_11516;
                                var statearr_11527_11553 = state_11516__$1;
                                statearr_11527_11553[2] = null;
                                statearr_11527_11553[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11517 === 5) {
                                  var state_11516__$1 = state_11516;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_11528_11554 = state_11516__$1;
                                    statearr_11528_11554[1] = 8;
                                  } else {
                                    var statearr_11529_11555 = state_11516__$1;
                                    statearr_11529_11555[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11517 === 14) {
                                    var inst_11510 = state_11516[2];
                                    var state_11516__$1 = state_11516;
                                    var statearr_11530_11556 = state_11516__$1;
                                    statearr_11530_11556[2] = inst_11510;
                                    statearr_11530_11556[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11517 === 10) {
                                      var inst_11502 = state_11516[2];
                                      var state_11516__$1 = state_11516;
                                      var statearr_11531_11557 = state_11516__$1;
                                      statearr_11531_11557[2] = inst_11502;
                                      statearr_11531_11557[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11517 === 8) {
                                        var inst_11499 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_11516__$1 = state_11516;
                                        var statearr_11532_11558 = state_11516__$1;
                                        statearr_11532_11558[2] = inst_11499;
                                        statearr_11532_11558[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___11544);
        return function(switch__11265__auto__, c__11377__auto___11544) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_11536 = [null, null, null, null, null, null, null, null];
              statearr_11536[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_11536[1] = 1;
              return statearr_11536;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_11516) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_11516);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e11537) {
                    if (e11537 instanceof Object) {
                      var ex__11269__auto__ = e11537;
                      var statearr_11538_11559 = state_11516;
                      statearr_11538_11559[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11516);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11537;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11560 = state_11516;
                  state_11516 = G__11560;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_11516) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_11516);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___11544);
      }();
      var state__11379__auto__ = function() {
        var statearr_11539 = f__11378__auto__.call(null);
        statearr_11539[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___11544;
        return statearr_11539;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___11544));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: (pos? n)");
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__11748) {
      var vec__11749 = p__11748;
      var v = cljs.core.nth.call(null, vec__11749, 0, null);
      var p = cljs.core.nth.call(null, vec__11749, 1, null);
      var job = vec__11749;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__11377__auto___11935 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___11935, res, vec__11749, v, p, job, jobs, results) {
          return function() {
            var f__11378__auto__ = function() {
              var switch__11265__auto__ = function(c__11377__auto___11935, res, vec__11749, v, p, job, jobs, results) {
                return function(state_11756) {
                  var state_val_11757 = state_11756[1];
                  if (state_val_11757 === 1) {
                    var state_11756__$1 = state_11756;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11756__$1, 2, res, v);
                  } else {
                    if (state_val_11757 === 2) {
                      var inst_11753 = state_11756[2];
                      var inst_11754 = cljs.core.async.close_BANG_.call(null, res);
                      var state_11756__$1 = function() {
                        var statearr_11758 = state_11756;
                        statearr_11758[7] = inst_11753;
                        return statearr_11758;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11756__$1, inst_11754);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__11377__auto___11935, res, vec__11749, v, p, job, jobs, results);
              return function(switch__11265__auto__, c__11377__auto___11935, res, vec__11749, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0 = function() {
                    var statearr_11762 = [null, null, null, null, null, null, null, null];
                    statearr_11762[0] = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
                    statearr_11762[1] = 1;
                    return statearr_11762;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1 = function(state_11756) {
                    while (true) {
                      var ret_value__11267__auto__ = function() {
                        try {
                          while (true) {
                            var result__11268__auto__ = switch__11265__auto__.call(null, state_11756);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__11268__auto__;
                            }
                            break;
                          }
                        } catch (e11763) {
                          if (e11763 instanceof Object) {
                            var ex__11269__auto__ = e11763;
                            var statearr_11764_11936 = state_11756;
                            statearr_11764_11936[5] = ex__11269__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11756);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e11763;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__11937 = state_11756;
                        state_11756 = G__11937;
                        continue;
                      } else {
                        return ret_value__11267__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = function(state_11756) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1.call(this, state_11756);
                    }
                    throw new Error("Invalid arity: " + (arguments.length - 1));
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
                }();
              }(switch__11265__auto__, c__11377__auto___11935, res, vec__11749, v, p, job, jobs, results);
            }();
            var state__11379__auto__ = function() {
              var statearr_11765 = f__11378__auto__.call(null);
              statearr_11765[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___11935;
              return statearr_11765;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
          };
        }(c__11377__auto___11935, res, vec__11749, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__11766) {
      var vec__11767 = p__11766;
      var v = cljs.core.nth.call(null, vec__11767, 0, null);
      var p = cljs.core.nth.call(null, vec__11767, 1, null);
      var job = vec__11767;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__8183__auto___11938 = n;
  var __11939 = 0;
  while (true) {
    if (__11939 < n__8183__auto___11938) {
      var G__11770_11940 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__11770_11940) {
        case "compute":
          var c__11377__auto___11942 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__11939, c__11377__auto___11942, G__11770_11940, n__8183__auto___11938, jobs, results, process, async) {
            return function() {
              var f__11378__auto__ = function() {
                var switch__11265__auto__ = function(__11939, c__11377__auto___11942, G__11770_11940, n__8183__auto___11938, jobs, results, process, async) {
                  return function(state_11783) {
                    var state_val_11784 = state_11783[1];
                    if (state_val_11784 === 1) {
                      var state_11783__$1 = state_11783;
                      var statearr_11785_11943 = state_11783__$1;
                      statearr_11785_11943[2] = null;
                      statearr_11785_11943[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11784 === 2) {
                        var state_11783__$1 = state_11783;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11783__$1, 4, jobs);
                      } else {
                        if (state_val_11784 === 3) {
                          var inst_11781 = state_11783[2];
                          var state_11783__$1 = state_11783;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11783__$1, inst_11781);
                        } else {
                          if (state_val_11784 === 4) {
                            var inst_11773 = state_11783[2];
                            var inst_11774 = process.call(null, inst_11773);
                            var state_11783__$1 = state_11783;
                            if (cljs.core.truth_(inst_11774)) {
                              var statearr_11786_11944 = state_11783__$1;
                              statearr_11786_11944[1] = 5;
                            } else {
                              var statearr_11787_11945 = state_11783__$1;
                              statearr_11787_11945[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11784 === 5) {
                              var state_11783__$1 = state_11783;
                              var statearr_11788_11946 = state_11783__$1;
                              statearr_11788_11946[2] = null;
                              statearr_11788_11946[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11784 === 6) {
                                var state_11783__$1 = state_11783;
                                var statearr_11789_11947 = state_11783__$1;
                                statearr_11789_11947[2] = null;
                                statearr_11789_11947[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11784 === 7) {
                                  var inst_11779 = state_11783[2];
                                  var state_11783__$1 = state_11783;
                                  var statearr_11790_11948 = state_11783__$1;
                                  statearr_11790_11948[2] = inst_11779;
                                  statearr_11790_11948[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__11939, c__11377__auto___11942, G__11770_11940, n__8183__auto___11938, jobs, results, process, async);
                return function(__11939, switch__11265__auto__, c__11377__auto___11942, G__11770_11940, n__8183__auto___11938, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0 = function() {
                      var statearr_11794 = [null, null, null, null, null, null, null];
                      statearr_11794[0] = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
                      statearr_11794[1] = 1;
                      return statearr_11794;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1 = function(state_11783) {
                      while (true) {
                        var ret_value__11267__auto__ = function() {
                          try {
                            while (true) {
                              var result__11268__auto__ = switch__11265__auto__.call(null, state_11783);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__11268__auto__;
                              }
                              break;
                            }
                          } catch (e11795) {
                            if (e11795 instanceof Object) {
                              var ex__11269__auto__ = e11795;
                              var statearr_11796_11949 = state_11783;
                              statearr_11796_11949[5] = ex__11269__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11783);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11795;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__11950 = state_11783;
                          state_11783 = G__11950;
                          continue;
                        } else {
                          return ret_value__11267__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = function(state_11783) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1.call(this, state_11783);
                      }
                      throw new Error("Invalid arity: " + (arguments.length - 1));
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
                  }();
                }(__11939, switch__11265__auto__, c__11377__auto___11942, G__11770_11940, n__8183__auto___11938, jobs, results, process, async);
              }();
              var state__11379__auto__ = function() {
                var statearr_11797 = f__11378__auto__.call(null);
                statearr_11797[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___11942;
                return statearr_11797;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
            };
          }(__11939, c__11377__auto___11942, G__11770_11940, n__8183__auto___11938, jobs, results, process, async));
          break;
        case "async":
          var c__11377__auto___11951 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__11939, c__11377__auto___11951, G__11770_11940, n__8183__auto___11938, jobs, results, process, async) {
            return function() {
              var f__11378__auto__ = function() {
                var switch__11265__auto__ = function(__11939, c__11377__auto___11951, G__11770_11940, n__8183__auto___11938, jobs, results, process, async) {
                  return function(state_11810) {
                    var state_val_11811 = state_11810[1];
                    if (state_val_11811 === 1) {
                      var state_11810__$1 = state_11810;
                      var statearr_11812_11952 = state_11810__$1;
                      statearr_11812_11952[2] = null;
                      statearr_11812_11952[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11811 === 2) {
                        var state_11810__$1 = state_11810;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11810__$1, 4, jobs);
                      } else {
                        if (state_val_11811 === 3) {
                          var inst_11808 = state_11810[2];
                          var state_11810__$1 = state_11810;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11810__$1, inst_11808);
                        } else {
                          if (state_val_11811 === 4) {
                            var inst_11800 = state_11810[2];
                            var inst_11801 = async.call(null, inst_11800);
                            var state_11810__$1 = state_11810;
                            if (cljs.core.truth_(inst_11801)) {
                              var statearr_11813_11953 = state_11810__$1;
                              statearr_11813_11953[1] = 5;
                            } else {
                              var statearr_11814_11954 = state_11810__$1;
                              statearr_11814_11954[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11811 === 5) {
                              var state_11810__$1 = state_11810;
                              var statearr_11815_11955 = state_11810__$1;
                              statearr_11815_11955[2] = null;
                              statearr_11815_11955[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11811 === 6) {
                                var state_11810__$1 = state_11810;
                                var statearr_11816_11956 = state_11810__$1;
                                statearr_11816_11956[2] = null;
                                statearr_11816_11956[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11811 === 7) {
                                  var inst_11806 = state_11810[2];
                                  var state_11810__$1 = state_11810;
                                  var statearr_11817_11957 = state_11810__$1;
                                  statearr_11817_11957[2] = inst_11806;
                                  statearr_11817_11957[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__11939, c__11377__auto___11951, G__11770_11940, n__8183__auto___11938, jobs, results, process, async);
                return function(__11939, switch__11265__auto__, c__11377__auto___11951, G__11770_11940, n__8183__auto___11938, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0 = function() {
                      var statearr_11821 = [null, null, null, null, null, null, null];
                      statearr_11821[0] = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
                      statearr_11821[1] = 1;
                      return statearr_11821;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1 = function(state_11810) {
                      while (true) {
                        var ret_value__11267__auto__ = function() {
                          try {
                            while (true) {
                              var result__11268__auto__ = switch__11265__auto__.call(null, state_11810);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__11268__auto__;
                              }
                              break;
                            }
                          } catch (e11822) {
                            if (e11822 instanceof Object) {
                              var ex__11269__auto__ = e11822;
                              var statearr_11823_11958 = state_11810;
                              statearr_11823_11958[5] = ex__11269__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11810);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11822;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__11959 = state_11810;
                          state_11810 = G__11959;
                          continue;
                        } else {
                          return ret_value__11267__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = function(state_11810) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1.call(this, state_11810);
                      }
                      throw new Error("Invalid arity: " + (arguments.length - 1));
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
                  }();
                }(__11939, switch__11265__auto__, c__11377__auto___11951, G__11770_11940, n__8183__auto___11938, jobs, results, process, async);
              }();
              var state__11379__auto__ = function() {
                var statearr_11824 = f__11378__auto__.call(null);
                statearr_11824[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___11951;
                return statearr_11824;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
            };
          }(__11939, c__11377__auto___11951, G__11770_11940, n__8183__auto___11938, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(type)].join(""));
      }
      var G__11960 = __11939 + 1;
      __11939 = G__11960;
      continue;
    } else {
    }
    break;
  }
  var c__11377__auto___11961 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___11961, jobs, results, process, async) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___11961, jobs, results, process, async) {
          return function(state_11846) {
            var state_val_11847 = state_11846[1];
            if (state_val_11847 === 1) {
              var state_11846__$1 = state_11846;
              var statearr_11848_11962 = state_11846__$1;
              statearr_11848_11962[2] = null;
              statearr_11848_11962[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11847 === 2) {
                var state_11846__$1 = state_11846;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11846__$1, 4, from);
              } else {
                if (state_val_11847 === 3) {
                  var inst_11844 = state_11846[2];
                  var state_11846__$1 = state_11846;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11846__$1, inst_11844);
                } else {
                  if (state_val_11847 === 4) {
                    var inst_11827 = state_11846[7];
                    var inst_11827__$1 = state_11846[2];
                    var inst_11828 = inst_11827__$1 == null;
                    var state_11846__$1 = function() {
                      var statearr_11849 = state_11846;
                      statearr_11849[7] = inst_11827__$1;
                      return statearr_11849;
                    }();
                    if (cljs.core.truth_(inst_11828)) {
                      var statearr_11850_11963 = state_11846__$1;
                      statearr_11850_11963[1] = 5;
                    } else {
                      var statearr_11851_11964 = state_11846__$1;
                      statearr_11851_11964[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11847 === 5) {
                      var inst_11830 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_11846__$1 = state_11846;
                      var statearr_11852_11965 = state_11846__$1;
                      statearr_11852_11965[2] = inst_11830;
                      statearr_11852_11965[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11847 === 6) {
                        var inst_11832 = state_11846[8];
                        var inst_11827 = state_11846[7];
                        var inst_11832__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_11833 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_11834 = [inst_11827, inst_11832__$1];
                        var inst_11835 = new cljs.core.PersistentVector(null, 2, 5, inst_11833, inst_11834, null);
                        var state_11846__$1 = function() {
                          var statearr_11853 = state_11846;
                          statearr_11853[8] = inst_11832__$1;
                          return statearr_11853;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11846__$1, 8, jobs, inst_11835);
                      } else {
                        if (state_val_11847 === 7) {
                          var inst_11842 = state_11846[2];
                          var state_11846__$1 = state_11846;
                          var statearr_11854_11966 = state_11846__$1;
                          statearr_11854_11966[2] = inst_11842;
                          statearr_11854_11966[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11847 === 8) {
                            var inst_11832 = state_11846[8];
                            var inst_11837 = state_11846[2];
                            var state_11846__$1 = function() {
                              var statearr_11855 = state_11846;
                              statearr_11855[9] = inst_11837;
                              return statearr_11855;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11846__$1, 9, results, inst_11832);
                          } else {
                            if (state_val_11847 === 9) {
                              var inst_11839 = state_11846[2];
                              var state_11846__$1 = function() {
                                var statearr_11856 = state_11846;
                                statearr_11856[10] = inst_11839;
                                return statearr_11856;
                              }();
                              var statearr_11857_11967 = state_11846__$1;
                              statearr_11857_11967[2] = null;
                              statearr_11857_11967[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___11961, jobs, results, process, async);
        return function(switch__11265__auto__, c__11377__auto___11961, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0 = function() {
              var statearr_11861 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11861[0] = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
              statearr_11861[1] = 1;
              return statearr_11861;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1 = function(state_11846) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_11846);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e11862) {
                    if (e11862 instanceof Object) {
                      var ex__11269__auto__ = e11862;
                      var statearr_11863_11968 = state_11846;
                      statearr_11863_11968[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11846);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11862;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11969 = state_11846;
                  state_11846 = G__11969;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = function(state_11846) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1.call(this, state_11846);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___11961, jobs, results, process, async);
      }();
      var state__11379__auto__ = function() {
        var statearr_11864 = f__11378__auto__.call(null);
        statearr_11864[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___11961;
        return statearr_11864;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___11961, jobs, results, process, async));
  var c__11377__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto__, jobs, results, process, async) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto__, jobs, results, process, async) {
          return function(state_11902) {
            var state_val_11903 = state_11902[1];
            if (state_val_11903 === 7) {
              var inst_11898 = state_11902[2];
              var state_11902__$1 = state_11902;
              var statearr_11904_11970 = state_11902__$1;
              statearr_11904_11970[2] = inst_11898;
              statearr_11904_11970[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11903 === 20) {
                var state_11902__$1 = state_11902;
                var statearr_11905_11971 = state_11902__$1;
                statearr_11905_11971[2] = null;
                statearr_11905_11971[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11903 === 1) {
                  var state_11902__$1 = state_11902;
                  var statearr_11906_11972 = state_11902__$1;
                  statearr_11906_11972[2] = null;
                  statearr_11906_11972[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11903 === 4) {
                    var inst_11867 = state_11902[7];
                    var inst_11867__$1 = state_11902[2];
                    var inst_11868 = inst_11867__$1 == null;
                    var state_11902__$1 = function() {
                      var statearr_11907 = state_11902;
                      statearr_11907[7] = inst_11867__$1;
                      return statearr_11907;
                    }();
                    if (cljs.core.truth_(inst_11868)) {
                      var statearr_11908_11973 = state_11902__$1;
                      statearr_11908_11973[1] = 5;
                    } else {
                      var statearr_11909_11974 = state_11902__$1;
                      statearr_11909_11974[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11903 === 15) {
                      var inst_11880 = state_11902[8];
                      var state_11902__$1 = state_11902;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11902__$1, 18, to, inst_11880);
                    } else {
                      if (state_val_11903 === 21) {
                        var inst_11893 = state_11902[2];
                        var state_11902__$1 = state_11902;
                        var statearr_11910_11975 = state_11902__$1;
                        statearr_11910_11975[2] = inst_11893;
                        statearr_11910_11975[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11903 === 13) {
                          var inst_11895 = state_11902[2];
                          var state_11902__$1 = function() {
                            var statearr_11911 = state_11902;
                            statearr_11911[9] = inst_11895;
                            return statearr_11911;
                          }();
                          var statearr_11912_11976 = state_11902__$1;
                          statearr_11912_11976[2] = null;
                          statearr_11912_11976[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11903 === 6) {
                            var inst_11867 = state_11902[7];
                            var state_11902__$1 = state_11902;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11902__$1, 11, inst_11867);
                          } else {
                            if (state_val_11903 === 17) {
                              var inst_11888 = state_11902[2];
                              var state_11902__$1 = state_11902;
                              if (cljs.core.truth_(inst_11888)) {
                                var statearr_11913_11977 = state_11902__$1;
                                statearr_11913_11977[1] = 19;
                              } else {
                                var statearr_11914_11978 = state_11902__$1;
                                statearr_11914_11978[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11903 === 3) {
                                var inst_11900 = state_11902[2];
                                var state_11902__$1 = state_11902;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11902__$1, inst_11900);
                              } else {
                                if (state_val_11903 === 12) {
                                  var inst_11877 = state_11902[10];
                                  var state_11902__$1 = state_11902;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11902__$1, 14, inst_11877);
                                } else {
                                  if (state_val_11903 === 2) {
                                    var state_11902__$1 = state_11902;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11902__$1, 4, results);
                                  } else {
                                    if (state_val_11903 === 19) {
                                      var state_11902__$1 = state_11902;
                                      var statearr_11915_11979 = state_11902__$1;
                                      statearr_11915_11979[2] = null;
                                      statearr_11915_11979[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11903 === 11) {
                                        var inst_11877 = state_11902[2];
                                        var state_11902__$1 = function() {
                                          var statearr_11916 = state_11902;
                                          statearr_11916[10] = inst_11877;
                                          return statearr_11916;
                                        }();
                                        var statearr_11917_11980 = state_11902__$1;
                                        statearr_11917_11980[2] = null;
                                        statearr_11917_11980[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11903 === 9) {
                                          var state_11902__$1 = state_11902;
                                          var statearr_11918_11981 = state_11902__$1;
                                          statearr_11918_11981[2] = null;
                                          statearr_11918_11981[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11903 === 5) {
                                            var state_11902__$1 = state_11902;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_11919_11982 = state_11902__$1;
                                              statearr_11919_11982[1] = 8;
                                            } else {
                                              var statearr_11920_11983 = state_11902__$1;
                                              statearr_11920_11983[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11903 === 14) {
                                              var inst_11882 = state_11902[11];
                                              var inst_11880 = state_11902[8];
                                              var inst_11880__$1 = state_11902[2];
                                              var inst_11881 = inst_11880__$1 == null;
                                              var inst_11882__$1 = cljs.core.not.call(null, inst_11881);
                                              var state_11902__$1 = function() {
                                                var statearr_11921 = state_11902;
                                                statearr_11921[11] = inst_11882__$1;
                                                statearr_11921[8] = inst_11880__$1;
                                                return statearr_11921;
                                              }();
                                              if (inst_11882__$1) {
                                                var statearr_11922_11984 = state_11902__$1;
                                                statearr_11922_11984[1] = 15;
                                              } else {
                                                var statearr_11923_11985 = state_11902__$1;
                                                statearr_11923_11985[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11903 === 16) {
                                                var inst_11882 = state_11902[11];
                                                var state_11902__$1 = state_11902;
                                                var statearr_11924_11986 = state_11902__$1;
                                                statearr_11924_11986[2] = inst_11882;
                                                statearr_11924_11986[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11903 === 10) {
                                                  var inst_11874 = state_11902[2];
                                                  var state_11902__$1 = state_11902;
                                                  var statearr_11925_11987 = state_11902__$1;
                                                  statearr_11925_11987[2] = inst_11874;
                                                  statearr_11925_11987[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11903 === 18) {
                                                    var inst_11885 = state_11902[2];
                                                    var state_11902__$1 = state_11902;
                                                    var statearr_11926_11988 = state_11902__$1;
                                                    statearr_11926_11988[2] = inst_11885;
                                                    statearr_11926_11988[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11903 === 8) {
                                                      var inst_11871 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_11902__$1 = state_11902;
                                                      var statearr_11927_11989 = state_11902__$1;
                                                      statearr_11927_11989[2] = inst_11871;
                                                      statearr_11927_11989[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto__, jobs, results, process, async);
        return function(switch__11265__auto__, c__11377__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0 = function() {
              var statearr_11931 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11931[0] = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
              statearr_11931[1] = 1;
              return statearr_11931;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1 = function(state_11902) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_11902);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e11932) {
                    if (e11932 instanceof Object) {
                      var ex__11269__auto__ = e11932;
                      var statearr_11933_11990 = state_11902;
                      statearr_11933_11990[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11902);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11932;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11991 = state_11902;
                  state_11902 = G__11991;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__ = function(state_11902) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1.call(this, state_11902);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__11266__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto__, jobs, results, process, async);
      }();
      var state__11379__auto__ = function() {
        var statearr_11934 = f__11378__auto__.call(null);
        statearr_11934[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto__;
        return statearr_11934;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto__, jobs, results, process, async));
  return c__11377__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async(var_args) {
  var args11992 = [];
  var len__8373__auto___11995 = arguments.length;
  var i__8374__auto___11996 = 0;
  while (true) {
    if (i__8374__auto___11996 < len__8373__auto___11995) {
      args11992.push(arguments[i__8374__auto___11996]);
      var G__11997 = i__8374__auto___11996 + 1;
      i__8374__auto___11996 = G__11997;
      continue;
    } else {
    }
    break;
  }
  var G__11994 = args11992.length;
  switch(G__11994) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11992.length)].join(""));
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline(var_args) {
  var args11999 = [];
  var len__8373__auto___12002 = arguments.length;
  var i__8374__auto___12003 = 0;
  while (true) {
    if (i__8374__auto___12003 < len__8373__auto___12002) {
      args11999.push(arguments[i__8374__auto___12003]);
      var G__12004 = i__8374__auto___12003 + 1;
      i__8374__auto___12003 = G__12004;
      continue;
    } else {
    }
    break;
  }
  var G__12001 = args11999.length;
  switch(G__12001) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11999.length)].join(""));
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split(var_args) {
  var args12006 = [];
  var len__8373__auto___12059 = arguments.length;
  var i__8374__auto___12060 = 0;
  while (true) {
    if (i__8374__auto___12060 < len__8373__auto___12059) {
      args12006.push(arguments[i__8374__auto___12060]);
      var G__12061 = i__8374__auto___12060 + 1;
      i__8374__auto___12060 = G__12061;
      continue;
    } else {
    }
    break;
  }
  var G__12008 = args12006.length;
  switch(G__12008) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12006.length)].join(""));
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__11377__auto___12063 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___12063, tc, fc) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___12063, tc, fc) {
          return function(state_12034) {
            var state_val_12035 = state_12034[1];
            if (state_val_12035 === 7) {
              var inst_12030 = state_12034[2];
              var state_12034__$1 = state_12034;
              var statearr_12036_12064 = state_12034__$1;
              statearr_12036_12064[2] = inst_12030;
              statearr_12036_12064[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12035 === 1) {
                var state_12034__$1 = state_12034;
                var statearr_12037_12065 = state_12034__$1;
                statearr_12037_12065[2] = null;
                statearr_12037_12065[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12035 === 4) {
                  var inst_12011 = state_12034[7];
                  var inst_12011__$1 = state_12034[2];
                  var inst_12012 = inst_12011__$1 == null;
                  var state_12034__$1 = function() {
                    var statearr_12038 = state_12034;
                    statearr_12038[7] = inst_12011__$1;
                    return statearr_12038;
                  }();
                  if (cljs.core.truth_(inst_12012)) {
                    var statearr_12039_12066 = state_12034__$1;
                    statearr_12039_12066[1] = 5;
                  } else {
                    var statearr_12040_12067 = state_12034__$1;
                    statearr_12040_12067[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12035 === 13) {
                    var state_12034__$1 = state_12034;
                    var statearr_12041_12068 = state_12034__$1;
                    statearr_12041_12068[2] = null;
                    statearr_12041_12068[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12035 === 6) {
                      var inst_12011 = state_12034[7];
                      var inst_12017 = p.call(null, inst_12011);
                      var state_12034__$1 = state_12034;
                      if (cljs.core.truth_(inst_12017)) {
                        var statearr_12042_12069 = state_12034__$1;
                        statearr_12042_12069[1] = 9;
                      } else {
                        var statearr_12043_12070 = state_12034__$1;
                        statearr_12043_12070[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12035 === 3) {
                        var inst_12032 = state_12034[2];
                        var state_12034__$1 = state_12034;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12034__$1, inst_12032);
                      } else {
                        if (state_val_12035 === 12) {
                          var state_12034__$1 = state_12034;
                          var statearr_12044_12071 = state_12034__$1;
                          statearr_12044_12071[2] = null;
                          statearr_12044_12071[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12035 === 2) {
                            var state_12034__$1 = state_12034;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12034__$1, 4, ch);
                          } else {
                            if (state_val_12035 === 11) {
                              var inst_12011 = state_12034[7];
                              var inst_12021 = state_12034[2];
                              var state_12034__$1 = state_12034;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12034__$1, 8, inst_12021, inst_12011);
                            } else {
                              if (state_val_12035 === 9) {
                                var state_12034__$1 = state_12034;
                                var statearr_12045_12072 = state_12034__$1;
                                statearr_12045_12072[2] = tc;
                                statearr_12045_12072[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12035 === 5) {
                                  var inst_12014 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_12015 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_12034__$1 = function() {
                                    var statearr_12046 = state_12034;
                                    statearr_12046[8] = inst_12014;
                                    return statearr_12046;
                                  }();
                                  var statearr_12047_12073 = state_12034__$1;
                                  statearr_12047_12073[2] = inst_12015;
                                  statearr_12047_12073[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12035 === 14) {
                                    var inst_12028 = state_12034[2];
                                    var state_12034__$1 = state_12034;
                                    var statearr_12048_12074 = state_12034__$1;
                                    statearr_12048_12074[2] = inst_12028;
                                    statearr_12048_12074[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12035 === 10) {
                                      var state_12034__$1 = state_12034;
                                      var statearr_12049_12075 = state_12034__$1;
                                      statearr_12049_12075[2] = fc;
                                      statearr_12049_12075[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12035 === 8) {
                                        var inst_12023 = state_12034[2];
                                        var state_12034__$1 = state_12034;
                                        if (cljs.core.truth_(inst_12023)) {
                                          var statearr_12050_12076 = state_12034__$1;
                                          statearr_12050_12076[1] = 12;
                                        } else {
                                          var statearr_12051_12077 = state_12034__$1;
                                          statearr_12051_12077[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___12063, tc, fc);
        return function(switch__11265__auto__, c__11377__auto___12063, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_12055 = [null, null, null, null, null, null, null, null, null];
              statearr_12055[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_12055[1] = 1;
              return statearr_12055;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_12034) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_12034);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e12056) {
                    if (e12056 instanceof Object) {
                      var ex__11269__auto__ = e12056;
                      var statearr_12057_12078 = state_12034;
                      statearr_12057_12078[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12034);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12056;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12079 = state_12034;
                  state_12034 = G__12079;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_12034) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_12034);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___12063, tc, fc);
      }();
      var state__11379__auto__ = function() {
        var statearr_12058 = f__11378__auto__.call(null);
        statearr_12058[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___12063;
        return statearr_12058;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___12063, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__11377__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto__) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto__) {
          return function(state_12143) {
            var state_val_12144 = state_12143[1];
            if (state_val_12144 === 7) {
              var inst_12139 = state_12143[2];
              var state_12143__$1 = state_12143;
              var statearr_12145_12166 = state_12143__$1;
              statearr_12145_12166[2] = inst_12139;
              statearr_12145_12166[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12144 === 1) {
                var inst_12123 = init;
                var state_12143__$1 = function() {
                  var statearr_12146 = state_12143;
                  statearr_12146[7] = inst_12123;
                  return statearr_12146;
                }();
                var statearr_12147_12167 = state_12143__$1;
                statearr_12147_12167[2] = null;
                statearr_12147_12167[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12144 === 4) {
                  var inst_12126 = state_12143[8];
                  var inst_12126__$1 = state_12143[2];
                  var inst_12127 = inst_12126__$1 == null;
                  var state_12143__$1 = function() {
                    var statearr_12148 = state_12143;
                    statearr_12148[8] = inst_12126__$1;
                    return statearr_12148;
                  }();
                  if (cljs.core.truth_(inst_12127)) {
                    var statearr_12149_12168 = state_12143__$1;
                    statearr_12149_12168[1] = 5;
                  } else {
                    var statearr_12150_12169 = state_12143__$1;
                    statearr_12150_12169[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12144 === 6) {
                    var inst_12123 = state_12143[7];
                    var inst_12126 = state_12143[8];
                    var inst_12130 = state_12143[9];
                    var inst_12130__$1 = f.call(null, inst_12123, inst_12126);
                    var inst_12131 = cljs.core.reduced_QMARK_.call(null, inst_12130__$1);
                    var state_12143__$1 = function() {
                      var statearr_12151 = state_12143;
                      statearr_12151[9] = inst_12130__$1;
                      return statearr_12151;
                    }();
                    if (inst_12131) {
                      var statearr_12152_12170 = state_12143__$1;
                      statearr_12152_12170[1] = 8;
                    } else {
                      var statearr_12153_12171 = state_12143__$1;
                      statearr_12153_12171[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12144 === 3) {
                      var inst_12141 = state_12143[2];
                      var state_12143__$1 = state_12143;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12143__$1, inst_12141);
                    } else {
                      if (state_val_12144 === 2) {
                        var state_12143__$1 = state_12143;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12143__$1, 4, ch);
                      } else {
                        if (state_val_12144 === 9) {
                          var inst_12130 = state_12143[9];
                          var inst_12123 = inst_12130;
                          var state_12143__$1 = function() {
                            var statearr_12154 = state_12143;
                            statearr_12154[7] = inst_12123;
                            return statearr_12154;
                          }();
                          var statearr_12155_12172 = state_12143__$1;
                          statearr_12155_12172[2] = null;
                          statearr_12155_12172[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12144 === 5) {
                            var inst_12123 = state_12143[7];
                            var state_12143__$1 = state_12143;
                            var statearr_12156_12173 = state_12143__$1;
                            statearr_12156_12173[2] = inst_12123;
                            statearr_12156_12173[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12144 === 10) {
                              var inst_12137 = state_12143[2];
                              var state_12143__$1 = state_12143;
                              var statearr_12157_12174 = state_12143__$1;
                              statearr_12157_12174[2] = inst_12137;
                              statearr_12157_12174[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12144 === 8) {
                                var inst_12130 = state_12143[9];
                                var inst_12133 = cljs.core.deref.call(null, inst_12130);
                                var state_12143__$1 = state_12143;
                                var statearr_12158_12175 = state_12143__$1;
                                statearr_12158_12175[2] = inst_12133;
                                statearr_12158_12175[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto__);
        return function(switch__11265__auto__, c__11377__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__11266__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__11266__auto____0 = function() {
              var statearr_12162 = [null, null, null, null, null, null, null, null, null, null];
              statearr_12162[0] = cljs$core$async$reduce_$_state_machine__11266__auto__;
              statearr_12162[1] = 1;
              return statearr_12162;
            };
            var cljs$core$async$reduce_$_state_machine__11266__auto____1 = function(state_12143) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_12143);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e12163) {
                    if (e12163 instanceof Object) {
                      var ex__11269__auto__ = e12163;
                      var statearr_12164_12176 = state_12143;
                      statearr_12164_12176[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12143);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12163;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12177 = state_12143;
                  state_12143 = G__12177;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__11266__auto__ = function(state_12143) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__11266__auto____1.call(this, state_12143);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$reduce_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__11266__auto____0;
            cljs$core$async$reduce_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__11266__auto____1;
            return cljs$core$async$reduce_$_state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto__);
      }();
      var state__11379__auto__ = function() {
        var statearr_12165 = f__11378__auto__.call(null);
        statearr_12165[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto__;
        return statearr_12165;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto__));
  return c__11377__auto__;
};
cljs.core.async.transduce = function cljs$core$async$transduce(xform, f, init, ch) {
  var f__$1 = xform.call(null, f);
  var c__11377__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto__, f__$1) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto__, f__$1) {
          return function(state_12197) {
            var state_val_12198 = state_12197[1];
            if (state_val_12198 === 1) {
              var inst_12192 = cljs.core.async.reduce.call(null, f__$1, init, ch);
              var state_12197__$1 = state_12197;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12197__$1, 2, inst_12192);
            } else {
              if (state_val_12198 === 2) {
                var inst_12194 = state_12197[2];
                var inst_12195 = f__$1.call(null, inst_12194);
                var state_12197__$1 = state_12197;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12197__$1, inst_12195);
              } else {
                return null;
              }
            }
          };
        }(c__11377__auto__, f__$1);
        return function(switch__11265__auto__, c__11377__auto__, f__$1) {
          return function() {
            var cljs$core$async$transduce_$_state_machine__11266__auto__ = null;
            var cljs$core$async$transduce_$_state_machine__11266__auto____0 = function() {
              var statearr_12202 = [null, null, null, null, null, null, null];
              statearr_12202[0] = cljs$core$async$transduce_$_state_machine__11266__auto__;
              statearr_12202[1] = 1;
              return statearr_12202;
            };
            var cljs$core$async$transduce_$_state_machine__11266__auto____1 = function(state_12197) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_12197);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e12203) {
                    if (e12203 instanceof Object) {
                      var ex__11269__auto__ = e12203;
                      var statearr_12204_12206 = state_12197;
                      statearr_12204_12206[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12197);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12203;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12207 = state_12197;
                  state_12197 = G__12207;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$transduce_$_state_machine__11266__auto__ = function(state_12197) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$transduce_$_state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$transduce_$_state_machine__11266__auto____1.call(this, state_12197);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$transduce_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$transduce_$_state_machine__11266__auto____0;
            cljs$core$async$transduce_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$transduce_$_state_machine__11266__auto____1;
            return cljs$core$async$transduce_$_state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto__, f__$1);
      }();
      var state__11379__auto__ = function() {
        var statearr_12205 = f__11378__auto__.call(null);
        statearr_12205[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto__;
        return statearr_12205;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto__, f__$1));
  return c__11377__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan(var_args) {
  var args12208 = [];
  var len__8373__auto___12260 = arguments.length;
  var i__8374__auto___12261 = 0;
  while (true) {
    if (i__8374__auto___12261 < len__8373__auto___12260) {
      args12208.push(arguments[i__8374__auto___12261]);
      var G__12262 = i__8374__auto___12261 + 1;
      i__8374__auto___12261 = G__12262;
      continue;
    } else {
    }
    break;
  }
  var G__12210 = args12208.length;
  switch(G__12210) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12208.length)].join(""));
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__11377__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto__) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto__) {
          return function(state_12235) {
            var state_val_12236 = state_12235[1];
            if (state_val_12236 === 7) {
              var inst_12217 = state_12235[2];
              var state_12235__$1 = state_12235;
              var statearr_12237_12264 = state_12235__$1;
              statearr_12237_12264[2] = inst_12217;
              statearr_12237_12264[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12236 === 1) {
                var inst_12211 = cljs.core.seq.call(null, coll);
                var inst_12212 = inst_12211;
                var state_12235__$1 = function() {
                  var statearr_12238 = state_12235;
                  statearr_12238[7] = inst_12212;
                  return statearr_12238;
                }();
                var statearr_12239_12265 = state_12235__$1;
                statearr_12239_12265[2] = null;
                statearr_12239_12265[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12236 === 4) {
                  var inst_12212 = state_12235[7];
                  var inst_12215 = cljs.core.first.call(null, inst_12212);
                  var state_12235__$1 = state_12235;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12235__$1, 7, ch, inst_12215);
                } else {
                  if (state_val_12236 === 13) {
                    var inst_12229 = state_12235[2];
                    var state_12235__$1 = state_12235;
                    var statearr_12240_12266 = state_12235__$1;
                    statearr_12240_12266[2] = inst_12229;
                    statearr_12240_12266[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12236 === 6) {
                      var inst_12220 = state_12235[2];
                      var state_12235__$1 = state_12235;
                      if (cljs.core.truth_(inst_12220)) {
                        var statearr_12241_12267 = state_12235__$1;
                        statearr_12241_12267[1] = 8;
                      } else {
                        var statearr_12242_12268 = state_12235__$1;
                        statearr_12242_12268[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12236 === 3) {
                        var inst_12233 = state_12235[2];
                        var state_12235__$1 = state_12235;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12235__$1, inst_12233);
                      } else {
                        if (state_val_12236 === 12) {
                          var state_12235__$1 = state_12235;
                          var statearr_12243_12269 = state_12235__$1;
                          statearr_12243_12269[2] = null;
                          statearr_12243_12269[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12236 === 2) {
                            var inst_12212 = state_12235[7];
                            var state_12235__$1 = state_12235;
                            if (cljs.core.truth_(inst_12212)) {
                              var statearr_12244_12270 = state_12235__$1;
                              statearr_12244_12270[1] = 4;
                            } else {
                              var statearr_12245_12271 = state_12235__$1;
                              statearr_12245_12271[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12236 === 11) {
                              var inst_12226 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_12235__$1 = state_12235;
                              var statearr_12246_12272 = state_12235__$1;
                              statearr_12246_12272[2] = inst_12226;
                              statearr_12246_12272[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12236 === 9) {
                                var state_12235__$1 = state_12235;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_12247_12273 = state_12235__$1;
                                  statearr_12247_12273[1] = 11;
                                } else {
                                  var statearr_12248_12274 = state_12235__$1;
                                  statearr_12248_12274[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12236 === 5) {
                                  var inst_12212 = state_12235[7];
                                  var state_12235__$1 = state_12235;
                                  var statearr_12249_12275 = state_12235__$1;
                                  statearr_12249_12275[2] = inst_12212;
                                  statearr_12249_12275[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12236 === 10) {
                                    var inst_12231 = state_12235[2];
                                    var state_12235__$1 = state_12235;
                                    var statearr_12250_12276 = state_12235__$1;
                                    statearr_12250_12276[2] = inst_12231;
                                    statearr_12250_12276[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12236 === 8) {
                                      var inst_12212 = state_12235[7];
                                      var inst_12222 = cljs.core.next.call(null, inst_12212);
                                      var inst_12212__$1 = inst_12222;
                                      var state_12235__$1 = function() {
                                        var statearr_12251 = state_12235;
                                        statearr_12251[7] = inst_12212__$1;
                                        return statearr_12251;
                                      }();
                                      var statearr_12252_12277 = state_12235__$1;
                                      statearr_12252_12277[2] = null;
                                      statearr_12252_12277[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto__);
        return function(switch__11265__auto__, c__11377__auto__) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_12256 = [null, null, null, null, null, null, null, null];
              statearr_12256[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_12256[1] = 1;
              return statearr_12256;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_12235) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_12235);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e12257) {
                    if (e12257 instanceof Object) {
                      var ex__11269__auto__ = e12257;
                      var statearr_12258_12278 = state_12235;
                      statearr_12258_12278[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12235);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12257;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12279 = state_12235;
                  state_12235 = G__12279;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_12235) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_12235);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto__);
      }();
      var state__11379__auto__ = function() {
        var statearr_12259 = f__11378__auto__.call(null);
        statearr_12259[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto__;
        return statearr_12259;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto__));
  return c__11377__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
};
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (!(_ == null) && !(_.cljs$core$async$Mux$muxch_STAR_$arity$1 == null)) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__7928__auto__ = _ == null ? null : _;
    var m__7929__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, _);
    } else {
      var m__7929__auto____$1 = cljs.core.async.muxch_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, _);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
      }
    }
  }
};
cljs.core.async.Mult = function() {
};
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (!(m == null) && !(m.cljs$core$async$Mult$tap_STAR_$arity$3 == null)) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__7928__auto__ = m == null ? null : m;
    var m__7929__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, m, ch, close_QMARK_);
    } else {
      var m__7929__auto____$1 = cljs.core.async.tap_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, m, ch, close_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
      }
    }
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__7928__auto__ = m == null ? null : m;
    var m__7929__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, m, ch);
    } else {
      var m__7929__auto____$1 = cljs.core.async.untap_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
      }
    }
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__7928__auto__ = m == null ? null : m;
    var m__7929__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, m);
    } else {
      var m__7929__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, m);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
      }
    }
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t_cljs$core$async12505 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async12505 = function(ch, cs, meta12506) {
        this.ch = ch;
        this.cs = cs;
        this.meta12506 = meta12506;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async12505.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_12507, meta12506__$1) {
          var self__ = this;
          var _12507__$1 = this;
          return new cljs.core.async.t_cljs$core$async12505(self__.ch, self__.cs, meta12506__$1);
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12505.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_12507) {
          var self__ = this;
          var _12507__$1 = this;
          return self__.meta12506;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12505.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async12505.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12505.prototype.cljs$core$async$Mult$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async12505.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12505.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12505.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12505.getBasis = function(cs) {
        return function() {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "meta12506", "meta12506", -1679805556, null)], null);
        };
      }(cs);
      cljs.core.async.t_cljs$core$async12505.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async12505.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async12505";
      cljs.core.async.t_cljs$core$async12505.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
          return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async12505");
        };
      }(cs);
      cljs.core.async.__GT_t_cljs$core$async12505 = function(cs) {
        return function cljs$core$async$mult_$___GT_t_cljs$core$async12505(ch__$1, cs__$1, meta12506) {
          return new cljs.core.async.t_cljs$core$async12505(ch__$1, cs__$1, meta12506);
        };
      }(cs);
    }
    return new cljs.core.async.t_cljs$core$async12505(ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__11377__auto___12730 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___12730, cs, m, dchan, dctr, done) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___12730, cs, m, dchan, dctr, done) {
          return function(state_12642) {
            var state_val_12643 = state_12642[1];
            if (state_val_12643 === 7) {
              var inst_12638 = state_12642[2];
              var state_12642__$1 = state_12642;
              var statearr_12644_12731 = state_12642__$1;
              statearr_12644_12731[2] = inst_12638;
              statearr_12644_12731[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12643 === 20) {
                var inst_12541 = state_12642[7];
                var inst_12553 = cljs.core.first.call(null, inst_12541);
                var inst_12554 = cljs.core.nth.call(null, inst_12553, 0, null);
                var inst_12555 = cljs.core.nth.call(null, inst_12553, 1, null);
                var state_12642__$1 = function() {
                  var statearr_12645 = state_12642;
                  statearr_12645[8] = inst_12554;
                  return statearr_12645;
                }();
                if (cljs.core.truth_(inst_12555)) {
                  var statearr_12646_12732 = state_12642__$1;
                  statearr_12646_12732[1] = 22;
                } else {
                  var statearr_12647_12733 = state_12642__$1;
                  statearr_12647_12733[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12643 === 27) {
                  var inst_12510 = state_12642[9];
                  var inst_12590 = state_12642[10];
                  var inst_12583 = state_12642[11];
                  var inst_12585 = state_12642[12];
                  var inst_12590__$1 = cljs.core._nth.call(null, inst_12583, inst_12585);
                  var inst_12591 = cljs.core.async.put_BANG_.call(null, inst_12590__$1, inst_12510, done);
                  var state_12642__$1 = function() {
                    var statearr_12648 = state_12642;
                    statearr_12648[10] = inst_12590__$1;
                    return statearr_12648;
                  }();
                  if (cljs.core.truth_(inst_12591)) {
                    var statearr_12649_12734 = state_12642__$1;
                    statearr_12649_12734[1] = 30;
                  } else {
                    var statearr_12650_12735 = state_12642__$1;
                    statearr_12650_12735[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12643 === 1) {
                    var state_12642__$1 = state_12642;
                    var statearr_12651_12736 = state_12642__$1;
                    statearr_12651_12736[2] = null;
                    statearr_12651_12736[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12643 === 24) {
                      var inst_12541 = state_12642[7];
                      var inst_12560 = state_12642[2];
                      var inst_12561 = cljs.core.next.call(null, inst_12541);
                      var inst_12519 = inst_12561;
                      var inst_12520 = null;
                      var inst_12521 = 0;
                      var inst_12522 = 0;
                      var state_12642__$1 = function() {
                        var statearr_12652 = state_12642;
                        statearr_12652[13] = inst_12520;
                        statearr_12652[14] = inst_12519;
                        statearr_12652[15] = inst_12522;
                        statearr_12652[16] = inst_12521;
                        statearr_12652[17] = inst_12560;
                        return statearr_12652;
                      }();
                      var statearr_12653_12737 = state_12642__$1;
                      statearr_12653_12737[2] = null;
                      statearr_12653_12737[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12643 === 39) {
                        var state_12642__$1 = state_12642;
                        var statearr_12657_12738 = state_12642__$1;
                        statearr_12657_12738[2] = null;
                        statearr_12657_12738[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12643 === 4) {
                          var inst_12510 = state_12642[9];
                          var inst_12510__$1 = state_12642[2];
                          var inst_12511 = inst_12510__$1 == null;
                          var state_12642__$1 = function() {
                            var statearr_12658 = state_12642;
                            statearr_12658[9] = inst_12510__$1;
                            return statearr_12658;
                          }();
                          if (cljs.core.truth_(inst_12511)) {
                            var statearr_12659_12739 = state_12642__$1;
                            statearr_12659_12739[1] = 5;
                          } else {
                            var statearr_12660_12740 = state_12642__$1;
                            statearr_12660_12740[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12643 === 15) {
                            var inst_12520 = state_12642[13];
                            var inst_12519 = state_12642[14];
                            var inst_12522 = state_12642[15];
                            var inst_12521 = state_12642[16];
                            var inst_12537 = state_12642[2];
                            var inst_12538 = inst_12522 + 1;
                            var tmp12654 = inst_12520;
                            var tmp12655 = inst_12519;
                            var tmp12656 = inst_12521;
                            var inst_12519__$1 = tmp12655;
                            var inst_12520__$1 = tmp12654;
                            var inst_12521__$1 = tmp12656;
                            var inst_12522__$1 = inst_12538;
                            var state_12642__$1 = function() {
                              var statearr_12661 = state_12642;
                              statearr_12661[13] = inst_12520__$1;
                              statearr_12661[18] = inst_12537;
                              statearr_12661[14] = inst_12519__$1;
                              statearr_12661[15] = inst_12522__$1;
                              statearr_12661[16] = inst_12521__$1;
                              return statearr_12661;
                            }();
                            var statearr_12662_12741 = state_12642__$1;
                            statearr_12662_12741[2] = null;
                            statearr_12662_12741[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12643 === 21) {
                              var inst_12564 = state_12642[2];
                              var state_12642__$1 = state_12642;
                              var statearr_12666_12742 = state_12642__$1;
                              statearr_12666_12742[2] = inst_12564;
                              statearr_12666_12742[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12643 === 31) {
                                var inst_12590 = state_12642[10];
                                var inst_12594 = done.call(null, null);
                                var inst_12595 = cljs.core.async.untap_STAR_.call(null, m, inst_12590);
                                var state_12642__$1 = function() {
                                  var statearr_12667 = state_12642;
                                  statearr_12667[19] = inst_12594;
                                  return statearr_12667;
                                }();
                                var statearr_12668_12743 = state_12642__$1;
                                statearr_12668_12743[2] = inst_12595;
                                statearr_12668_12743[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12643 === 32) {
                                  var inst_12582 = state_12642[20];
                                  var inst_12583 = state_12642[11];
                                  var inst_12584 = state_12642[21];
                                  var inst_12585 = state_12642[12];
                                  var inst_12597 = state_12642[2];
                                  var inst_12598 = inst_12585 + 1;
                                  var tmp12663 = inst_12582;
                                  var tmp12664 = inst_12583;
                                  var tmp12665 = inst_12584;
                                  var inst_12582__$1 = tmp12663;
                                  var inst_12583__$1 = tmp12664;
                                  var inst_12584__$1 = tmp12665;
                                  var inst_12585__$1 = inst_12598;
                                  var state_12642__$1 = function() {
                                    var statearr_12669 = state_12642;
                                    statearr_12669[20] = inst_12582__$1;
                                    statearr_12669[22] = inst_12597;
                                    statearr_12669[11] = inst_12583__$1;
                                    statearr_12669[21] = inst_12584__$1;
                                    statearr_12669[12] = inst_12585__$1;
                                    return statearr_12669;
                                  }();
                                  var statearr_12670_12744 = state_12642__$1;
                                  statearr_12670_12744[2] = null;
                                  statearr_12670_12744[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12643 === 40) {
                                    var inst_12610 = state_12642[23];
                                    var inst_12614 = done.call(null, null);
                                    var inst_12615 = cljs.core.async.untap_STAR_.call(null, m, inst_12610);
                                    var state_12642__$1 = function() {
                                      var statearr_12671 = state_12642;
                                      statearr_12671[24] = inst_12614;
                                      return statearr_12671;
                                    }();
                                    var statearr_12672_12745 = state_12642__$1;
                                    statearr_12672_12745[2] = inst_12615;
                                    statearr_12672_12745[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12643 === 33) {
                                      var inst_12601 = state_12642[25];
                                      var inst_12603 = cljs.core.chunked_seq_QMARK_.call(null, inst_12601);
                                      var state_12642__$1 = state_12642;
                                      if (inst_12603) {
                                        var statearr_12673_12746 = state_12642__$1;
                                        statearr_12673_12746[1] = 36;
                                      } else {
                                        var statearr_12674_12747 = state_12642__$1;
                                        statearr_12674_12747[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12643 === 13) {
                                        var inst_12531 = state_12642[26];
                                        var inst_12534 = cljs.core.async.close_BANG_.call(null, inst_12531);
                                        var state_12642__$1 = state_12642;
                                        var statearr_12675_12748 = state_12642__$1;
                                        statearr_12675_12748[2] = inst_12534;
                                        statearr_12675_12748[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12643 === 22) {
                                          var inst_12554 = state_12642[8];
                                          var inst_12557 = cljs.core.async.close_BANG_.call(null, inst_12554);
                                          var state_12642__$1 = state_12642;
                                          var statearr_12676_12749 = state_12642__$1;
                                          statearr_12676_12749[2] = inst_12557;
                                          statearr_12676_12749[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12643 === 36) {
                                            var inst_12601 = state_12642[25];
                                            var inst_12605 = cljs.core.chunk_first.call(null, inst_12601);
                                            var inst_12606 = cljs.core.chunk_rest.call(null, inst_12601);
                                            var inst_12607 = cljs.core.count.call(null, inst_12605);
                                            var inst_12582 = inst_12606;
                                            var inst_12583 = inst_12605;
                                            var inst_12584 = inst_12607;
                                            var inst_12585 = 0;
                                            var state_12642__$1 = function() {
                                              var statearr_12677 = state_12642;
                                              statearr_12677[20] = inst_12582;
                                              statearr_12677[11] = inst_12583;
                                              statearr_12677[21] = inst_12584;
                                              statearr_12677[12] = inst_12585;
                                              return statearr_12677;
                                            }();
                                            var statearr_12678_12750 = state_12642__$1;
                                            statearr_12678_12750[2] = null;
                                            statearr_12678_12750[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12643 === 41) {
                                              var inst_12601 = state_12642[25];
                                              var inst_12617 = state_12642[2];
                                              var inst_12618 = cljs.core.next.call(null, inst_12601);
                                              var inst_12582 = inst_12618;
                                              var inst_12583 = null;
                                              var inst_12584 = 0;
                                              var inst_12585 = 0;
                                              var state_12642__$1 = function() {
                                                var statearr_12679 = state_12642;
                                                statearr_12679[20] = inst_12582;
                                                statearr_12679[27] = inst_12617;
                                                statearr_12679[11] = inst_12583;
                                                statearr_12679[21] = inst_12584;
                                                statearr_12679[12] = inst_12585;
                                                return statearr_12679;
                                              }();
                                              var statearr_12680_12751 = state_12642__$1;
                                              statearr_12680_12751[2] = null;
                                              statearr_12680_12751[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12643 === 43) {
                                                var state_12642__$1 = state_12642;
                                                var statearr_12681_12752 = state_12642__$1;
                                                statearr_12681_12752[2] = null;
                                                statearr_12681_12752[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12643 === 29) {
                                                  var inst_12626 = state_12642[2];
                                                  var state_12642__$1 = state_12642;
                                                  var statearr_12682_12753 = state_12642__$1;
                                                  statearr_12682_12753[2] = inst_12626;
                                                  statearr_12682_12753[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12643 === 44) {
                                                    var inst_12635 = state_12642[2];
                                                    var state_12642__$1 = function() {
                                                      var statearr_12683 = state_12642;
                                                      statearr_12683[28] = inst_12635;
                                                      return statearr_12683;
                                                    }();
                                                    var statearr_12684_12754 = state_12642__$1;
                                                    statearr_12684_12754[2] = null;
                                                    statearr_12684_12754[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12643 === 6) {
                                                      var inst_12574 = state_12642[29];
                                                      var inst_12573 = cljs.core.deref.call(null, cs);
                                                      var inst_12574__$1 = cljs.core.keys.call(null, inst_12573);
                                                      var inst_12575 = cljs.core.count.call(null, inst_12574__$1);
                                                      var inst_12576 = cljs.core.reset_BANG_.call(null, dctr, inst_12575);
                                                      var inst_12581 = cljs.core.seq.call(null, inst_12574__$1);
                                                      var inst_12582 = inst_12581;
                                                      var inst_12583 = null;
                                                      var inst_12584 = 0;
                                                      var inst_12585 = 0;
                                                      var state_12642__$1 = function() {
                                                        var statearr_12685 = state_12642;
                                                        statearr_12685[30] = inst_12576;
                                                        statearr_12685[20] = inst_12582;
                                                        statearr_12685[11] = inst_12583;
                                                        statearr_12685[29] = inst_12574__$1;
                                                        statearr_12685[21] = inst_12584;
                                                        statearr_12685[12] = inst_12585;
                                                        return statearr_12685;
                                                      }();
                                                      var statearr_12686_12755 = state_12642__$1;
                                                      statearr_12686_12755[2] = null;
                                                      statearr_12686_12755[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12643 === 28) {
                                                        var inst_12582 = state_12642[20];
                                                        var inst_12601 = state_12642[25];
                                                        var inst_12601__$1 = cljs.core.seq.call(null, inst_12582);
                                                        var state_12642__$1 = function() {
                                                          var statearr_12687 = state_12642;
                                                          statearr_12687[25] = inst_12601__$1;
                                                          return statearr_12687;
                                                        }();
                                                        if (inst_12601__$1) {
                                                          var statearr_12688_12756 = state_12642__$1;
                                                          statearr_12688_12756[1] = 33;
                                                        } else {
                                                          var statearr_12689_12757 = state_12642__$1;
                                                          statearr_12689_12757[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12643 === 25) {
                                                          var inst_12584 = state_12642[21];
                                                          var inst_12585 = state_12642[12];
                                                          var inst_12587 = inst_12585 < inst_12584;
                                                          var inst_12588 = inst_12587;
                                                          var state_12642__$1 = state_12642;
                                                          if (cljs.core.truth_(inst_12588)) {
                                                            var statearr_12690_12758 = state_12642__$1;
                                                            statearr_12690_12758[1] = 27;
                                                          } else {
                                                            var statearr_12691_12759 = state_12642__$1;
                                                            statearr_12691_12759[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12643 === 34) {
                                                            var state_12642__$1 = state_12642;
                                                            var statearr_12692_12760 = state_12642__$1;
                                                            statearr_12692_12760[2] = null;
                                                            statearr_12692_12760[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12643 === 17) {
                                                              var state_12642__$1 = state_12642;
                                                              var statearr_12693_12761 = state_12642__$1;
                                                              statearr_12693_12761[2] = null;
                                                              statearr_12693_12761[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12643 === 3) {
                                                                var inst_12640 = state_12642[2];
                                                                var state_12642__$1 = state_12642;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12642__$1, inst_12640);
                                                              } else {
                                                                if (state_val_12643 === 12) {
                                                                  var inst_12569 = state_12642[2];
                                                                  var state_12642__$1 = state_12642;
                                                                  var statearr_12694_12762 = state_12642__$1;
                                                                  statearr_12694_12762[2] = inst_12569;
                                                                  statearr_12694_12762[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_12643 === 2) {
                                                                    var state_12642__$1 = state_12642;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12642__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_12643 === 23) {
                                                                      var state_12642__$1 = state_12642;
                                                                      var statearr_12695_12763 = state_12642__$1;
                                                                      statearr_12695_12763[2] = null;
                                                                      statearr_12695_12763[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_12643 === 35) {
                                                                        var inst_12624 = state_12642[2];
                                                                        var state_12642__$1 = state_12642;
                                                                        var statearr_12696_12764 = state_12642__$1;
                                                                        statearr_12696_12764[2] = inst_12624;
                                                                        statearr_12696_12764[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_12643 === 19) {
                                                                          var inst_12541 = state_12642[7];
                                                                          var inst_12545 = cljs.core.chunk_first.call(null, inst_12541);
                                                                          var inst_12546 = cljs.core.chunk_rest.call(null, inst_12541);
                                                                          var inst_12547 = cljs.core.count.call(null, inst_12545);
                                                                          var inst_12519 = inst_12546;
                                                                          var inst_12520 = inst_12545;
                                                                          var inst_12521 = inst_12547;
                                                                          var inst_12522 = 0;
                                                                          var state_12642__$1 = function() {
                                                                            var statearr_12697 = state_12642;
                                                                            statearr_12697[13] = inst_12520;
                                                                            statearr_12697[14] = inst_12519;
                                                                            statearr_12697[15] = inst_12522;
                                                                            statearr_12697[16] = inst_12521;
                                                                            return statearr_12697;
                                                                          }();
                                                                          var statearr_12698_12765 = state_12642__$1;
                                                                          statearr_12698_12765[2] = null;
                                                                          statearr_12698_12765[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_12643 === 11) {
                                                                            var inst_12541 = state_12642[7];
                                                                            var inst_12519 = state_12642[14];
                                                                            var inst_12541__$1 = cljs.core.seq.call(null, inst_12519);
                                                                            var state_12642__$1 = function() {
                                                                              var statearr_12699 = state_12642;
                                                                              statearr_12699[7] = inst_12541__$1;
                                                                              return statearr_12699;
                                                                            }();
                                                                            if (inst_12541__$1) {
                                                                              var statearr_12700_12766 = state_12642__$1;
                                                                              statearr_12700_12766[1] = 16;
                                                                            } else {
                                                                              var statearr_12701_12767 = state_12642__$1;
                                                                              statearr_12701_12767[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_12643 === 9) {
                                                                              var inst_12571 = state_12642[2];
                                                                              var state_12642__$1 = state_12642;
                                                                              var statearr_12702_12768 = state_12642__$1;
                                                                              statearr_12702_12768[2] = inst_12571;
                                                                              statearr_12702_12768[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_12643 === 5) {
                                                                                var inst_12517 = cljs.core.deref.call(null, cs);
                                                                                var inst_12518 = cljs.core.seq.call(null, inst_12517);
                                                                                var inst_12519 = inst_12518;
                                                                                var inst_12520 = null;
                                                                                var inst_12521 = 0;
                                                                                var inst_12522 = 0;
                                                                                var state_12642__$1 = function() {
                                                                                  var statearr_12703 = state_12642;
                                                                                  statearr_12703[13] = inst_12520;
                                                                                  statearr_12703[14] = inst_12519;
                                                                                  statearr_12703[15] = inst_12522;
                                                                                  statearr_12703[16] = inst_12521;
                                                                                  return statearr_12703;
                                                                                }();
                                                                                var statearr_12704_12769 = state_12642__$1;
                                                                                statearr_12704_12769[2] = null;
                                                                                statearr_12704_12769[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_12643 === 14) {
                                                                                  var state_12642__$1 = state_12642;
                                                                                  var statearr_12705_12770 = state_12642__$1;
                                                                                  statearr_12705_12770[2] = null;
                                                                                  statearr_12705_12770[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_12643 === 45) {
                                                                                    var inst_12632 = state_12642[2];
                                                                                    var state_12642__$1 = state_12642;
                                                                                    var statearr_12706_12771 = state_12642__$1;
                                                                                    statearr_12706_12771[2] = inst_12632;
                                                                                    statearr_12706_12771[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_12643 === 26) {
                                                                                      var inst_12574 = state_12642[29];
                                                                                      var inst_12628 = state_12642[2];
                                                                                      var inst_12629 = cljs.core.seq.call(null, inst_12574);
                                                                                      var state_12642__$1 = function() {
                                                                                        var statearr_12707 = state_12642;
                                                                                        statearr_12707[31] = inst_12628;
                                                                                        return statearr_12707;
                                                                                      }();
                                                                                      if (inst_12629) {
                                                                                        var statearr_12708_12772 = state_12642__$1;
                                                                                        statearr_12708_12772[1] = 42;
                                                                                      } else {
                                                                                        var statearr_12709_12773 = state_12642__$1;
                                                                                        statearr_12709_12773[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_12643 === 16) {
                                                                                        var inst_12541 = state_12642[7];
                                                                                        var inst_12543 = cljs.core.chunked_seq_QMARK_.call(null, inst_12541);
                                                                                        var state_12642__$1 = state_12642;
                                                                                        if (inst_12543) {
                                                                                          var statearr_12710_12774 = state_12642__$1;
                                                                                          statearr_12710_12774[1] = 19;
                                                                                        } else {
                                                                                          var statearr_12711_12775 = state_12642__$1;
                                                                                          statearr_12711_12775[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_12643 === 38) {
                                                                                          var inst_12621 = state_12642[2];
                                                                                          var state_12642__$1 = state_12642;
                                                                                          var statearr_12712_12776 = state_12642__$1;
                                                                                          statearr_12712_12776[2] = inst_12621;
                                                                                          statearr_12712_12776[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_12643 === 30) {
                                                                                            var state_12642__$1 = state_12642;
                                                                                            var statearr_12713_12777 = state_12642__$1;
                                                                                            statearr_12713_12777[2] = null;
                                                                                            statearr_12713_12777[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_12643 === 10) {
                                                                                              var inst_12520 = state_12642[13];
                                                                                              var inst_12522 = state_12642[15];
                                                                                              var inst_12530 = cljs.core._nth.call(null, inst_12520, inst_12522);
                                                                                              var inst_12531 = cljs.core.nth.call(null, inst_12530, 0, null);
                                                                                              var inst_12532 = cljs.core.nth.call(null, inst_12530, 1, null);
                                                                                              var state_12642__$1 = function() {
                                                                                                var statearr_12714 = state_12642;
                                                                                                statearr_12714[26] = inst_12531;
                                                                                                return statearr_12714;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_12532)) {
                                                                                                var statearr_12715_12778 = state_12642__$1;
                                                                                                statearr_12715_12778[1] = 13;
                                                                                              } else {
                                                                                                var statearr_12716_12779 = state_12642__$1;
                                                                                                statearr_12716_12779[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_12643 === 18) {
                                                                                                var inst_12567 = state_12642[2];
                                                                                                var state_12642__$1 = state_12642;
                                                                                                var statearr_12717_12780 = state_12642__$1;
                                                                                                statearr_12717_12780[2] = inst_12567;
                                                                                                statearr_12717_12780[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_12643 === 42) {
                                                                                                  var state_12642__$1 = state_12642;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12642__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_12643 === 37) {
                                                                                                    var inst_12510 = state_12642[9];
                                                                                                    var inst_12601 = state_12642[25];
                                                                                                    var inst_12610 = state_12642[23];
                                                                                                    var inst_12610__$1 = cljs.core.first.call(null, inst_12601);
                                                                                                    var inst_12611 = cljs.core.async.put_BANG_.call(null, inst_12610__$1, inst_12510, done);
                                                                                                    var state_12642__$1 = function() {
                                                                                                      var statearr_12718 = state_12642;
                                                                                                      statearr_12718[23] = inst_12610__$1;
                                                                                                      return statearr_12718;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_12611)) {
                                                                                                      var statearr_12719_12781 = state_12642__$1;
                                                                                                      statearr_12719_12781[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_12720_12782 = state_12642__$1;
                                                                                                      statearr_12720_12782[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_12643 === 8) {
                                                                                                      var inst_12522 = state_12642[15];
                                                                                                      var inst_12521 = state_12642[16];
                                                                                                      var inst_12524 = inst_12522 < inst_12521;
                                                                                                      var inst_12525 = inst_12524;
                                                                                                      var state_12642__$1 = state_12642;
                                                                                                      if (cljs.core.truth_(inst_12525)) {
                                                                                                        var statearr_12721_12783 = state_12642__$1;
                                                                                                        statearr_12721_12783[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_12722_12784 = state_12642__$1;
                                                                                                        statearr_12722_12784[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___12730, cs, m, dchan, dctr, done);
        return function(switch__11265__auto__, c__11377__auto___12730, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__11266__auto__ = null;
            var cljs$core$async$mult_$_state_machine__11266__auto____0 = function() {
              var statearr_12726 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12726[0] = cljs$core$async$mult_$_state_machine__11266__auto__;
              statearr_12726[1] = 1;
              return statearr_12726;
            };
            var cljs$core$async$mult_$_state_machine__11266__auto____1 = function(state_12642) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_12642);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e12727) {
                    if (e12727 instanceof Object) {
                      var ex__11269__auto__ = e12727;
                      var statearr_12728_12785 = state_12642;
                      statearr_12728_12785[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12642);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12727;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12786 = state_12642;
                  state_12642 = G__12786;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__11266__auto__ = function(state_12642) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__11266__auto____1.call(this, state_12642);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$mult_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__11266__auto____0;
            cljs$core$async$mult_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__11266__auto____1;
            return cljs$core$async$mult_$_state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___12730, cs, m, dchan, dctr, done);
      }();
      var state__11379__auto__ = function() {
        var statearr_12729 = f__11378__auto__.call(null);
        statearr_12729[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___12730;
        return statearr_12729;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___12730, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap(var_args) {
  var args12787 = [];
  var len__8373__auto___12790 = arguments.length;
  var i__8374__auto___12791 = 0;
  while (true) {
    if (i__8374__auto___12791 < len__8373__auto___12790) {
      args12787.push(arguments[i__8374__auto___12791]);
      var G__12792 = i__8374__auto___12791 + 1;
      i__8374__auto___12791 = G__12792;
      continue;
    } else {
    }
    break;
  }
  var G__12789 = args12787.length;
  switch(G__12789) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12787.length)].join(""));
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
};
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$admix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__7928__auto__ = m == null ? null : m;
    var m__7929__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, m, ch);
    } else {
      var m__7929__auto____$1 = cljs.core.async.admix_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
      }
    }
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__7928__auto__ = m == null ? null : m;
    var m__7929__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, m, ch);
    } else {
      var m__7929__auto____$1 = cljs.core.async.unmix_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
      }
    }
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__7928__auto__ = m == null ? null : m;
    var m__7929__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, m);
    } else {
      var m__7929__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, m);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
      }
    }
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (!(m == null) && !(m.cljs$core$async$Mix$toggle_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__7928__auto__ = m == null ? null : m;
    var m__7929__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, m, state_map);
    } else {
      var m__7929__auto____$1 = cljs.core.async.toggle_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, m, state_map);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
      }
    }
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (!(m == null) && !(m.cljs$core$async$Mix$solo_mode_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__7928__auto__ = m == null ? null : m;
    var m__7929__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, m, mode);
    } else {
      var m__7929__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, m, mode);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
      }
    }
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___12804 = arguments.length;
  var i__8374__auto___12805 = 0;
  while (true) {
    if (i__8374__auto___12805 < len__8373__auto___12804) {
      args__8380__auto__.push(arguments[i__8374__auto___12805]);
      var G__12806 = i__8374__auto___12805 + 1;
      i__8374__auto___12805 = G__12806;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 3 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(3), 0, null) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8381__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__12798) {
  var map__12799 = p__12798;
  var map__12799__$1 = (!(map__12799 == null) ? map__12799.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__12799.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12799) : map__12799;
  var opts = map__12799__$1;
  var statearr_12801_12807 = state;
  statearr_12801_12807[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4657__auto__ = cljs.core.async.do_alts.call(null, function(map__12799, map__12799__$1, opts) {
    return function(val) {
      var statearr_12802_12808 = state;
      statearr_12802_12808[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__12799, map__12799__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var cb = temp__4657__auto__;
    var statearr_12803_12809 = state;
    statearr_12803_12809[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq12794) {
  var G__12795 = cljs.core.first.call(null, seq12794);
  var seq12794__$1 = cljs.core.next.call(null, seq12794);
  var G__12796 = cljs.core.first.call(null, seq12794__$1);
  var seq12794__$2 = cljs.core.next.call(null, seq12794__$1);
  var G__12797 = cljs.core.first.call(null, seq12794__$2);
  var seq12794__$3 = cljs.core.next.call(null, seq12794__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12795, G__12796, G__12797, seq12794__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t_cljs$core$async12977 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async12977 = function(out, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, meta12978) {
        this.out = out;
        this.cs = cs;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.solo_mode = solo_mode;
        this.change = change;
        this.changed = changed;
        this.pick = pick;
        this.calc_state = calc_state;
        this.meta12978 = meta12978;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_12979, meta12978__$1) {
          var self__ = this;
          var _12979__$1 = this;
          return new cljs.core.async.t_cljs$core$async12977(self__.out, self__.cs, self__.solo_modes, self__.attrs, self__.solo_mode, self__.change, self__.changed, self__.pick, self__.calc_state, meta12978__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_12979) {
          var self__ = this;
          var _12979__$1 = this;
          return self__.meta12978;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$async$Mix$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(solo-modes mode)")].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.getBasis = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function() {
          return new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "out", "out", 729986010, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "attrs", "attrs", -450137186, null), new cljs.core.Symbol(null, "solo-mode", "solo-mode", 2031788074, null), new cljs.core.Symbol(null, "change", "change", 477485025, null), new cljs.core.Symbol(null, 
          "changed", "changed", -2083710852, null), new cljs.core.Symbol(null, "pick", "pick", 1300068175, null), new cljs.core.Symbol(null, "calc-state", "calc-state", -349968968, null), new cljs.core.Symbol(null, "meta12978", "meta12978", -173704706, null)], null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async12977.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async12977.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async12977";
      cljs.core.async.t_cljs$core$async12977.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
          return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async12977");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t_cljs$core$async12977 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t_cljs$core$async12977(out__$1, cs__$1, solo_modes__$1, attrs__$1, solo_mode__$1, change__$1, changed__$1, pick__$1, calc_state__$1, meta12978) {
          return new cljs.core.async.t_cljs$core$async12977(out__$1, cs__$1, solo_modes__$1, attrs__$1, solo_mode__$1, change__$1, changed__$1, pick__$1, calc_state__$1, meta12978);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t_cljs$core$async12977(out, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__11377__auto___13144 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___13144, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___13144, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_13081) {
            var state_val_13082 = state_13081[1];
            if (state_val_13082 === 7) {
              var inst_12996 = state_13081[2];
              var state_13081__$1 = state_13081;
              var statearr_13083_13145 = state_13081__$1;
              statearr_13083_13145[2] = inst_12996;
              statearr_13083_13145[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13082 === 20) {
                var inst_13008 = state_13081[7];
                var state_13081__$1 = state_13081;
                var statearr_13084_13146 = state_13081__$1;
                statearr_13084_13146[2] = inst_13008;
                statearr_13084_13146[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13082 === 27) {
                  var state_13081__$1 = state_13081;
                  var statearr_13085_13147 = state_13081__$1;
                  statearr_13085_13147[2] = null;
                  statearr_13085_13147[1] = 28;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13082 === 1) {
                    var inst_12983 = state_13081[8];
                    var inst_12983__$1 = calc_state.call(null);
                    var inst_12985 = inst_12983__$1 == null;
                    var inst_12986 = cljs.core.not.call(null, inst_12985);
                    var state_13081__$1 = function() {
                      var statearr_13086 = state_13081;
                      statearr_13086[8] = inst_12983__$1;
                      return statearr_13086;
                    }();
                    if (inst_12986) {
                      var statearr_13087_13148 = state_13081__$1;
                      statearr_13087_13148[1] = 2;
                    } else {
                      var statearr_13088_13149 = state_13081__$1;
                      statearr_13088_13149[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13082 === 24) {
                      var inst_13041 = state_13081[9];
                      var inst_13032 = state_13081[10];
                      var inst_13055 = state_13081[11];
                      var inst_13055__$1 = inst_13032.call(null, inst_13041);
                      var state_13081__$1 = function() {
                        var statearr_13089 = state_13081;
                        statearr_13089[11] = inst_13055__$1;
                        return statearr_13089;
                      }();
                      if (cljs.core.truth_(inst_13055__$1)) {
                        var statearr_13090_13150 = state_13081__$1;
                        statearr_13090_13150[1] = 29;
                      } else {
                        var statearr_13091_13151 = state_13081__$1;
                        statearr_13091_13151[1] = 30;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13082 === 4) {
                        var inst_12999 = state_13081[2];
                        var state_13081__$1 = state_13081;
                        if (cljs.core.truth_(inst_12999)) {
                          var statearr_13092_13152 = state_13081__$1;
                          statearr_13092_13152[1] = 8;
                        } else {
                          var statearr_13093_13153 = state_13081__$1;
                          statearr_13093_13153[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13082 === 15) {
                          var inst_13026 = state_13081[2];
                          var state_13081__$1 = state_13081;
                          if (cljs.core.truth_(inst_13026)) {
                            var statearr_13094_13154 = state_13081__$1;
                            statearr_13094_13154[1] = 19;
                          } else {
                            var statearr_13095_13155 = state_13081__$1;
                            statearr_13095_13155[1] = 20;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13082 === 21) {
                            var inst_13031 = state_13081[12];
                            var inst_13031__$1 = state_13081[2];
                            var inst_13032 = cljs.core.get.call(null, inst_13031__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                            var inst_13033 = cljs.core.get.call(null, inst_13031__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                            var inst_13034 = cljs.core.get.call(null, inst_13031__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                            var state_13081__$1 = function() {
                              var statearr_13096 = state_13081;
                              statearr_13096[12] = inst_13031__$1;
                              statearr_13096[13] = inst_13033;
                              statearr_13096[10] = inst_13032;
                              return statearr_13096;
                            }();
                            return cljs.core.async.ioc_alts_BANG_.call(null, state_13081__$1, 22, inst_13034);
                          } else {
                            if (state_val_13082 === 31) {
                              var inst_13063 = state_13081[2];
                              var state_13081__$1 = state_13081;
                              if (cljs.core.truth_(inst_13063)) {
                                var statearr_13097_13156 = state_13081__$1;
                                statearr_13097_13156[1] = 32;
                              } else {
                                var statearr_13098_13157 = state_13081__$1;
                                statearr_13098_13157[1] = 33;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13082 === 32) {
                                var inst_13040 = state_13081[14];
                                var state_13081__$1 = state_13081;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13081__$1, 35, out, inst_13040);
                              } else {
                                if (state_val_13082 === 33) {
                                  var inst_13031 = state_13081[12];
                                  var inst_13008 = inst_13031;
                                  var state_13081__$1 = function() {
                                    var statearr_13099 = state_13081;
                                    statearr_13099[7] = inst_13008;
                                    return statearr_13099;
                                  }();
                                  var statearr_13100_13158 = state_13081__$1;
                                  statearr_13100_13158[2] = null;
                                  statearr_13100_13158[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13082 === 13) {
                                    var inst_13008 = state_13081[7];
                                    var inst_13015 = inst_13008.cljs$lang$protocol_mask$partition0$;
                                    var inst_13016 = inst_13015 & 64;
                                    var inst_13017 = inst_13008.cljs$core$ISeq$;
                                    var inst_13018 = cljs.core.PROTOCOL_SENTINEL === inst_13017;
                                    var inst_13019 = inst_13016 || inst_13018;
                                    var state_13081__$1 = state_13081;
                                    if (cljs.core.truth_(inst_13019)) {
                                      var statearr_13101_13159 = state_13081__$1;
                                      statearr_13101_13159[1] = 16;
                                    } else {
                                      var statearr_13102_13160 = state_13081__$1;
                                      statearr_13102_13160[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13082 === 22) {
                                      var inst_13041 = state_13081[9];
                                      var inst_13040 = state_13081[14];
                                      var inst_13039 = state_13081[2];
                                      var inst_13040__$1 = cljs.core.nth.call(null, inst_13039, 0, null);
                                      var inst_13041__$1 = cljs.core.nth.call(null, inst_13039, 1, null);
                                      var inst_13042 = inst_13040__$1 == null;
                                      var inst_13043 = cljs.core._EQ_.call(null, inst_13041__$1, change);
                                      var inst_13044 = inst_13042 || inst_13043;
                                      var state_13081__$1 = function() {
                                        var statearr_13103 = state_13081;
                                        statearr_13103[9] = inst_13041__$1;
                                        statearr_13103[14] = inst_13040__$1;
                                        return statearr_13103;
                                      }();
                                      if (cljs.core.truth_(inst_13044)) {
                                        var statearr_13104_13161 = state_13081__$1;
                                        statearr_13104_13161[1] = 23;
                                      } else {
                                        var statearr_13105_13162 = state_13081__$1;
                                        statearr_13105_13162[1] = 24;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13082 === 36) {
                                        var inst_13031 = state_13081[12];
                                        var inst_13008 = inst_13031;
                                        var state_13081__$1 = function() {
                                          var statearr_13106 = state_13081;
                                          statearr_13106[7] = inst_13008;
                                          return statearr_13106;
                                        }();
                                        var statearr_13107_13163 = state_13081__$1;
                                        statearr_13107_13163[2] = null;
                                        statearr_13107_13163[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13082 === 29) {
                                          var inst_13055 = state_13081[11];
                                          var state_13081__$1 = state_13081;
                                          var statearr_13108_13164 = state_13081__$1;
                                          statearr_13108_13164[2] = inst_13055;
                                          statearr_13108_13164[1] = 31;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13082 === 6) {
                                            var state_13081__$1 = state_13081;
                                            var statearr_13109_13165 = state_13081__$1;
                                            statearr_13109_13165[2] = false;
                                            statearr_13109_13165[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13082 === 28) {
                                              var inst_13051 = state_13081[2];
                                              var inst_13052 = calc_state.call(null);
                                              var inst_13008 = inst_13052;
                                              var state_13081__$1 = function() {
                                                var statearr_13110 = state_13081;
                                                statearr_13110[15] = inst_13051;
                                                statearr_13110[7] = inst_13008;
                                                return statearr_13110;
                                              }();
                                              var statearr_13111_13166 = state_13081__$1;
                                              statearr_13111_13166[2] = null;
                                              statearr_13111_13166[1] = 11;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13082 === 25) {
                                                var inst_13077 = state_13081[2];
                                                var state_13081__$1 = state_13081;
                                                var statearr_13112_13167 = state_13081__$1;
                                                statearr_13112_13167[2] = inst_13077;
                                                statearr_13112_13167[1] = 12;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13082 === 34) {
                                                  var inst_13075 = state_13081[2];
                                                  var state_13081__$1 = state_13081;
                                                  var statearr_13113_13168 = state_13081__$1;
                                                  statearr_13113_13168[2] = inst_13075;
                                                  statearr_13113_13168[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13082 === 17) {
                                                    var state_13081__$1 = state_13081;
                                                    var statearr_13114_13169 = state_13081__$1;
                                                    statearr_13114_13169[2] = false;
                                                    statearr_13114_13169[1] = 18;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13082 === 3) {
                                                      var state_13081__$1 = state_13081;
                                                      var statearr_13115_13170 = state_13081__$1;
                                                      statearr_13115_13170[2] = false;
                                                      statearr_13115_13170[1] = 4;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13082 === 12) {
                                                        var inst_13079 = state_13081[2];
                                                        var state_13081__$1 = state_13081;
                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13081__$1, inst_13079);
                                                      } else {
                                                        if (state_val_13082 === 2) {
                                                          var inst_12983 = state_13081[8];
                                                          var inst_12988 = inst_12983.cljs$lang$protocol_mask$partition0$;
                                                          var inst_12989 = inst_12988 & 64;
                                                          var inst_12990 = inst_12983.cljs$core$ISeq$;
                                                          var inst_12991 = cljs.core.PROTOCOL_SENTINEL === inst_12990;
                                                          var inst_12992 = inst_12989 || inst_12991;
                                                          var state_13081__$1 = state_13081;
                                                          if (cljs.core.truth_(inst_12992)) {
                                                            var statearr_13116_13171 = state_13081__$1;
                                                            statearr_13116_13171[1] = 5;
                                                          } else {
                                                            var statearr_13117_13172 = state_13081__$1;
                                                            statearr_13117_13172[1] = 6;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13082 === 23) {
                                                            var inst_13040 = state_13081[14];
                                                            var inst_13046 = inst_13040 == null;
                                                            var state_13081__$1 = state_13081;
                                                            if (cljs.core.truth_(inst_13046)) {
                                                              var statearr_13118_13173 = state_13081__$1;
                                                              statearr_13118_13173[1] = 26;
                                                            } else {
                                                              var statearr_13119_13174 = state_13081__$1;
                                                              statearr_13119_13174[1] = 27;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_13082 === 35) {
                                                              var inst_13066 = state_13081[2];
                                                              var state_13081__$1 = state_13081;
                                                              if (cljs.core.truth_(inst_13066)) {
                                                                var statearr_13120_13175 = state_13081__$1;
                                                                statearr_13120_13175[1] = 36;
                                                              } else {
                                                                var statearr_13121_13176 = state_13081__$1;
                                                                statearr_13121_13176[1] = 37;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_13082 === 19) {
                                                                var inst_13008 = state_13081[7];
                                                                var inst_13028 = cljs.core.apply.call(null, cljs.core.hash_map, inst_13008);
                                                                var state_13081__$1 = state_13081;
                                                                var statearr_13122_13177 = state_13081__$1;
                                                                statearr_13122_13177[2] = inst_13028;
                                                                statearr_13122_13177[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_13082 === 11) {
                                                                  var inst_13008 = state_13081[7];
                                                                  var inst_13012 = inst_13008 == null;
                                                                  var inst_13013 = cljs.core.not.call(null, inst_13012);
                                                                  var state_13081__$1 = state_13081;
                                                                  if (inst_13013) {
                                                                    var statearr_13123_13178 = state_13081__$1;
                                                                    statearr_13123_13178[1] = 13;
                                                                  } else {
                                                                    var statearr_13124_13179 = state_13081__$1;
                                                                    statearr_13124_13179[1] = 14;
                                                                  }
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_13082 === 9) {
                                                                    var inst_12983 = state_13081[8];
                                                                    var state_13081__$1 = state_13081;
                                                                    var statearr_13125_13180 = state_13081__$1;
                                                                    statearr_13125_13180[2] = inst_12983;
                                                                    statearr_13125_13180[1] = 10;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_13082 === 5) {
                                                                      var state_13081__$1 = state_13081;
                                                                      var statearr_13126_13181 = state_13081__$1;
                                                                      statearr_13126_13181[2] = true;
                                                                      statearr_13126_13181[1] = 7;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_13082 === 14) {
                                                                        var state_13081__$1 = state_13081;
                                                                        var statearr_13127_13182 = state_13081__$1;
                                                                        statearr_13127_13182[2] = false;
                                                                        statearr_13127_13182[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_13082 === 26) {
                                                                          var inst_13041 = state_13081[9];
                                                                          var inst_13048 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_13041);
                                                                          var state_13081__$1 = state_13081;
                                                                          var statearr_13128_13183 = state_13081__$1;
                                                                          statearr_13128_13183[2] = inst_13048;
                                                                          statearr_13128_13183[1] = 28;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_13082 === 16) {
                                                                            var state_13081__$1 = state_13081;
                                                                            var statearr_13129_13184 = state_13081__$1;
                                                                            statearr_13129_13184[2] = true;
                                                                            statearr_13129_13184[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_13082 === 38) {
                                                                              var inst_13071 = state_13081[2];
                                                                              var state_13081__$1 = state_13081;
                                                                              var statearr_13130_13185 = state_13081__$1;
                                                                              statearr_13130_13185[2] = inst_13071;
                                                                              statearr_13130_13185[1] = 34;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_13082 === 30) {
                                                                                var inst_13041 = state_13081[9];
                                                                                var inst_13033 = state_13081[13];
                                                                                var inst_13032 = state_13081[10];
                                                                                var inst_13058 = cljs.core.empty_QMARK_.call(null, inst_13032);
                                                                                var inst_13059 = inst_13033.call(null, inst_13041);
                                                                                var inst_13060 = cljs.core.not.call(null, inst_13059);
                                                                                var inst_13061 = inst_13058 && inst_13060;
                                                                                var state_13081__$1 = state_13081;
                                                                                var statearr_13131_13186 = state_13081__$1;
                                                                                statearr_13131_13186[2] = inst_13061;
                                                                                statearr_13131_13186[1] = 31;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_13082 === 10) {
                                                                                  var inst_12983 = state_13081[8];
                                                                                  var inst_13004 = state_13081[2];
                                                                                  var inst_13005 = cljs.core.get.call(null, inst_13004, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                                                  var inst_13006 = cljs.core.get.call(null, inst_13004, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                                                  var inst_13007 = cljs.core.get.call(null, inst_13004, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                                                  var inst_13008 = inst_12983;
                                                                                  var state_13081__$1 = function() {
                                                                                    var statearr_13132 = state_13081;
                                                                                    statearr_13132[16] = inst_13007;
                                                                                    statearr_13132[17] = inst_13005;
                                                                                    statearr_13132[7] = inst_13008;
                                                                                    statearr_13132[18] = inst_13006;
                                                                                    return statearr_13132;
                                                                                  }();
                                                                                  var statearr_13133_13187 = state_13081__$1;
                                                                                  statearr_13133_13187[2] = null;
                                                                                  statearr_13133_13187[1] = 11;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_13082 === 18) {
                                                                                    var inst_13023 = state_13081[2];
                                                                                    var state_13081__$1 = state_13081;
                                                                                    var statearr_13134_13188 = state_13081__$1;
                                                                                    statearr_13134_13188[2] = inst_13023;
                                                                                    statearr_13134_13188[1] = 15;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_13082 === 37) {
                                                                                      var state_13081__$1 = state_13081;
                                                                                      var statearr_13135_13189 = state_13081__$1;
                                                                                      statearr_13135_13189[2] = null;
                                                                                      statearr_13135_13189[1] = 38;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_13082 === 8) {
                                                                                        var inst_12983 = state_13081[8];
                                                                                        var inst_13001 = cljs.core.apply.call(null, cljs.core.hash_map, inst_12983);
                                                                                        var state_13081__$1 = state_13081;
                                                                                        var statearr_13136_13190 = state_13081__$1;
                                                                                        statearr_13136_13190[2] = inst_13001;
                                                                                        statearr_13136_13190[1] = 10;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        return null;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___13144, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__11265__auto__, c__11377__auto___13144, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__11266__auto__ = null;
            var cljs$core$async$mix_$_state_machine__11266__auto____0 = function() {
              var statearr_13140 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13140[0] = cljs$core$async$mix_$_state_machine__11266__auto__;
              statearr_13140[1] = 1;
              return statearr_13140;
            };
            var cljs$core$async$mix_$_state_machine__11266__auto____1 = function(state_13081) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_13081);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e13141) {
                    if (e13141 instanceof Object) {
                      var ex__11269__auto__ = e13141;
                      var statearr_13142_13191 = state_13081;
                      statearr_13142_13191[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13081);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13141;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13192 = state_13081;
                  state_13081 = G__13192;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__11266__auto__ = function(state_13081) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__11266__auto____1.call(this, state_13081);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$mix_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__11266__auto____0;
            cljs$core$async$mix_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__11266__auto____1;
            return cljs$core$async$mix_$_state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___13144, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__11379__auto__ = function() {
        var statearr_13143 = f__11378__auto__.call(null);
        statearr_13143[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___13144;
        return statearr_13143;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___13144, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
};
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (!(p == null) && !(p.cljs$core$async$Pub$sub_STAR_$arity$4 == null)) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__7928__auto__ = p == null ? null : p;
    var m__7929__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, p, v, ch, close_QMARK_);
    } else {
      var m__7929__auto____$1 = cljs.core.async.sub_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, p, v, ch, close_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
      }
    }
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_STAR_$arity$3 == null)) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__7928__auto__ = p == null ? null : p;
    var m__7929__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, p, v, ch);
    } else {
      var m__7929__auto____$1 = cljs.core.async.unsub_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, p, v, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_(var_args) {
  var args13193 = [];
  var len__8373__auto___13196 = arguments.length;
  var i__8374__auto___13197 = 0;
  while (true) {
    if (i__8374__auto___13197 < len__8373__auto___13196) {
      args13193.push(arguments[i__8374__auto___13197]);
      var G__13198 = i__8374__auto___13197 + 1;
      i__8374__auto___13197 = G__13198;
      continue;
    } else {
    }
    break;
  }
  var G__13195 = args13193.length;
  switch(G__13195) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13193.length)].join(""));
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$1 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__7928__auto__ = p == null ? null : p;
    var m__7929__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, p);
    } else {
      var m__7929__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, p);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$2 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__7928__auto__ = p == null ? null : p;
    var m__7929__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__7928__auto__)];
    if (!(m__7929__auto__ == null)) {
      return m__7929__auto__.call(null, p, v);
    } else {
      var m__7929__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__7929__auto____$1 == null)) {
        return m__7929__auto____$1.call(null, p, v);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub(var_args) {
  var args13201 = [];
  var len__8373__auto___13326 = arguments.length;
  var i__8374__auto___13327 = 0;
  while (true) {
    if (i__8374__auto___13327 < len__8373__auto___13326) {
      args13201.push(arguments[i__8374__auto___13327]);
      var G__13328 = i__8374__auto___13327 + 1;
      i__8374__auto___13327 = G__13328;
      continue;
    } else {
    }
    break;
  }
  var G__13203 = args13201.length;
  switch(G__13203) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13201.length)].join(""));
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__7260__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__7260__auto__)) {
        return or__7260__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__7260__auto__, mults) {
          return function(p1__13200_SHARP_) {
            if (cljs.core.truth_(p1__13200_SHARP_.call(null, topic))) {
              return p1__13200_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__13200_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__7260__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t_cljs$core$async13204 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async13204 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta13205) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta13205 = meta13205;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_13206, meta13205__$1) {
          var self__ = this;
          var _13206__$1 = this;
          return new cljs.core.async.t_cljs$core$async13204(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta13205__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_13206) {
          var self__ = this;
          var _13206__$1 = this;
          return self__.meta13205;
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$async$Pub$ = cljs.core.PROTOCOL_SENTINEL;
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4657__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4657__auto__)) {
            var m = temp__4657__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async13204.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async13204.getBasis = function(mults, ensure_mult) {
        return function() {
          return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "topic-fn", "topic-fn", -862449736, null), new cljs.core.Symbol(null, "buf-fn", "buf-fn", -1200281591, null), new cljs.core.Symbol(null, "mults", "mults", -461114485, null), new cljs.core.Symbol(null, "ensure-mult", "ensure-mult", 1796584816, null), new cljs.core.Symbol(null, "meta13205", "meta13205", 1277574912, null)], 
          null);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async13204.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async13204.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13204";
      cljs.core.async.t_cljs$core$async13204.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
          return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async13204");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t_cljs$core$async13204 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t_cljs$core$async13204(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta13205) {
          return new cljs.core.async.t_cljs$core$async13204(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta13205);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t_cljs$core$async13204(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__11377__auto___13330 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___13330, mults, ensure_mult, p) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___13330, mults, ensure_mult, p) {
          return function(state_13278) {
            var state_val_13279 = state_13278[1];
            if (state_val_13279 === 7) {
              var inst_13274 = state_13278[2];
              var state_13278__$1 = state_13278;
              var statearr_13280_13331 = state_13278__$1;
              statearr_13280_13331[2] = inst_13274;
              statearr_13280_13331[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13279 === 20) {
                var state_13278__$1 = state_13278;
                var statearr_13281_13332 = state_13278__$1;
                statearr_13281_13332[2] = null;
                statearr_13281_13332[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13279 === 1) {
                  var state_13278__$1 = state_13278;
                  var statearr_13282_13333 = state_13278__$1;
                  statearr_13282_13333[2] = null;
                  statearr_13282_13333[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13279 === 24) {
                    var inst_13257 = state_13278[7];
                    var inst_13266 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_13257);
                    var state_13278__$1 = state_13278;
                    var statearr_13283_13334 = state_13278__$1;
                    statearr_13283_13334[2] = inst_13266;
                    statearr_13283_13334[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13279 === 4) {
                      var inst_13209 = state_13278[8];
                      var inst_13209__$1 = state_13278[2];
                      var inst_13210 = inst_13209__$1 == null;
                      var state_13278__$1 = function() {
                        var statearr_13284 = state_13278;
                        statearr_13284[8] = inst_13209__$1;
                        return statearr_13284;
                      }();
                      if (cljs.core.truth_(inst_13210)) {
                        var statearr_13285_13335 = state_13278__$1;
                        statearr_13285_13335[1] = 5;
                      } else {
                        var statearr_13286_13336 = state_13278__$1;
                        statearr_13286_13336[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13279 === 15) {
                        var inst_13251 = state_13278[2];
                        var state_13278__$1 = state_13278;
                        var statearr_13287_13337 = state_13278__$1;
                        statearr_13287_13337[2] = inst_13251;
                        statearr_13287_13337[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13279 === 21) {
                          var inst_13271 = state_13278[2];
                          var state_13278__$1 = function() {
                            var statearr_13288 = state_13278;
                            statearr_13288[9] = inst_13271;
                            return statearr_13288;
                          }();
                          var statearr_13289_13338 = state_13278__$1;
                          statearr_13289_13338[2] = null;
                          statearr_13289_13338[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13279 === 13) {
                            var inst_13233 = state_13278[10];
                            var inst_13235 = cljs.core.chunked_seq_QMARK_.call(null, inst_13233);
                            var state_13278__$1 = state_13278;
                            if (inst_13235) {
                              var statearr_13290_13339 = state_13278__$1;
                              statearr_13290_13339[1] = 16;
                            } else {
                              var statearr_13291_13340 = state_13278__$1;
                              statearr_13291_13340[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13279 === 22) {
                              var inst_13263 = state_13278[2];
                              var state_13278__$1 = state_13278;
                              if (cljs.core.truth_(inst_13263)) {
                                var statearr_13292_13341 = state_13278__$1;
                                statearr_13292_13341[1] = 23;
                              } else {
                                var statearr_13293_13342 = state_13278__$1;
                                statearr_13293_13342[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13279 === 6) {
                                var inst_13259 = state_13278[11];
                                var inst_13257 = state_13278[7];
                                var inst_13209 = state_13278[8];
                                var inst_13257__$1 = topic_fn.call(null, inst_13209);
                                var inst_13258 = cljs.core.deref.call(null, mults);
                                var inst_13259__$1 = cljs.core.get.call(null, inst_13258, inst_13257__$1);
                                var state_13278__$1 = function() {
                                  var statearr_13294 = state_13278;
                                  statearr_13294[11] = inst_13259__$1;
                                  statearr_13294[7] = inst_13257__$1;
                                  return statearr_13294;
                                }();
                                if (cljs.core.truth_(inst_13259__$1)) {
                                  var statearr_13295_13343 = state_13278__$1;
                                  statearr_13295_13343[1] = 19;
                                } else {
                                  var statearr_13296_13344 = state_13278__$1;
                                  statearr_13296_13344[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13279 === 25) {
                                  var inst_13268 = state_13278[2];
                                  var state_13278__$1 = state_13278;
                                  var statearr_13297_13345 = state_13278__$1;
                                  statearr_13297_13345[2] = inst_13268;
                                  statearr_13297_13345[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13279 === 17) {
                                    var inst_13233 = state_13278[10];
                                    var inst_13242 = cljs.core.first.call(null, inst_13233);
                                    var inst_13243 = cljs.core.async.muxch_STAR_.call(null, inst_13242);
                                    var inst_13244 = cljs.core.async.close_BANG_.call(null, inst_13243);
                                    var inst_13245 = cljs.core.next.call(null, inst_13233);
                                    var inst_13219 = inst_13245;
                                    var inst_13220 = null;
                                    var inst_13221 = 0;
                                    var inst_13222 = 0;
                                    var state_13278__$1 = function() {
                                      var statearr_13298 = state_13278;
                                      statearr_13298[12] = inst_13219;
                                      statearr_13298[13] = inst_13244;
                                      statearr_13298[14] = inst_13221;
                                      statearr_13298[15] = inst_13220;
                                      statearr_13298[16] = inst_13222;
                                      return statearr_13298;
                                    }();
                                    var statearr_13299_13346 = state_13278__$1;
                                    statearr_13299_13346[2] = null;
                                    statearr_13299_13346[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13279 === 3) {
                                      var inst_13276 = state_13278[2];
                                      var state_13278__$1 = state_13278;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13278__$1, inst_13276);
                                    } else {
                                      if (state_val_13279 === 12) {
                                        var inst_13253 = state_13278[2];
                                        var state_13278__$1 = state_13278;
                                        var statearr_13300_13347 = state_13278__$1;
                                        statearr_13300_13347[2] = inst_13253;
                                        statearr_13300_13347[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13279 === 2) {
                                          var state_13278__$1 = state_13278;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13278__$1, 4, ch);
                                        } else {
                                          if (state_val_13279 === 23) {
                                            var state_13278__$1 = state_13278;
                                            var statearr_13301_13348 = state_13278__$1;
                                            statearr_13301_13348[2] = null;
                                            statearr_13301_13348[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13279 === 19) {
                                              var inst_13259 = state_13278[11];
                                              var inst_13209 = state_13278[8];
                                              var inst_13261 = cljs.core.async.muxch_STAR_.call(null, inst_13259);
                                              var state_13278__$1 = state_13278;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13278__$1, 22, inst_13261, inst_13209);
                                            } else {
                                              if (state_val_13279 === 11) {
                                                var inst_13219 = state_13278[12];
                                                var inst_13233 = state_13278[10];
                                                var inst_13233__$1 = cljs.core.seq.call(null, inst_13219);
                                                var state_13278__$1 = function() {
                                                  var statearr_13302 = state_13278;
                                                  statearr_13302[10] = inst_13233__$1;
                                                  return statearr_13302;
                                                }();
                                                if (inst_13233__$1) {
                                                  var statearr_13303_13349 = state_13278__$1;
                                                  statearr_13303_13349[1] = 13;
                                                } else {
                                                  var statearr_13304_13350 = state_13278__$1;
                                                  statearr_13304_13350[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13279 === 9) {
                                                  var inst_13255 = state_13278[2];
                                                  var state_13278__$1 = state_13278;
                                                  var statearr_13305_13351 = state_13278__$1;
                                                  statearr_13305_13351[2] = inst_13255;
                                                  statearr_13305_13351[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13279 === 5) {
                                                    var inst_13216 = cljs.core.deref.call(null, mults);
                                                    var inst_13217 = cljs.core.vals.call(null, inst_13216);
                                                    var inst_13218 = cljs.core.seq.call(null, inst_13217);
                                                    var inst_13219 = inst_13218;
                                                    var inst_13220 = null;
                                                    var inst_13221 = 0;
                                                    var inst_13222 = 0;
                                                    var state_13278__$1 = function() {
                                                      var statearr_13306 = state_13278;
                                                      statearr_13306[12] = inst_13219;
                                                      statearr_13306[14] = inst_13221;
                                                      statearr_13306[15] = inst_13220;
                                                      statearr_13306[16] = inst_13222;
                                                      return statearr_13306;
                                                    }();
                                                    var statearr_13307_13352 = state_13278__$1;
                                                    statearr_13307_13352[2] = null;
                                                    statearr_13307_13352[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13279 === 14) {
                                                      var state_13278__$1 = state_13278;
                                                      var statearr_13311_13353 = state_13278__$1;
                                                      statearr_13311_13353[2] = null;
                                                      statearr_13311_13353[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_13279 === 16) {
                                                        var inst_13233 = state_13278[10];
                                                        var inst_13237 = cljs.core.chunk_first.call(null, inst_13233);
                                                        var inst_13238 = cljs.core.chunk_rest.call(null, inst_13233);
                                                        var inst_13239 = cljs.core.count.call(null, inst_13237);
                                                        var inst_13219 = inst_13238;
                                                        var inst_13220 = inst_13237;
                                                        var inst_13221 = inst_13239;
                                                        var inst_13222 = 0;
                                                        var state_13278__$1 = function() {
                                                          var statearr_13312 = state_13278;
                                                          statearr_13312[12] = inst_13219;
                                                          statearr_13312[14] = inst_13221;
                                                          statearr_13312[15] = inst_13220;
                                                          statearr_13312[16] = inst_13222;
                                                          return statearr_13312;
                                                        }();
                                                        var statearr_13313_13354 = state_13278__$1;
                                                        statearr_13313_13354[2] = null;
                                                        statearr_13313_13354[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_13279 === 10) {
                                                          var inst_13219 = state_13278[12];
                                                          var inst_13221 = state_13278[14];
                                                          var inst_13220 = state_13278[15];
                                                          var inst_13222 = state_13278[16];
                                                          var inst_13227 = cljs.core._nth.call(null, inst_13220, inst_13222);
                                                          var inst_13228 = cljs.core.async.muxch_STAR_.call(null, inst_13227);
                                                          var inst_13229 = cljs.core.async.close_BANG_.call(null, inst_13228);
                                                          var inst_13230 = inst_13222 + 1;
                                                          var tmp13308 = inst_13219;
                                                          var tmp13309 = inst_13221;
                                                          var tmp13310 = inst_13220;
                                                          var inst_13219__$1 = tmp13308;
                                                          var inst_13220__$1 = tmp13310;
                                                          var inst_13221__$1 = tmp13309;
                                                          var inst_13222__$1 = inst_13230;
                                                          var state_13278__$1 = function() {
                                                            var statearr_13314 = state_13278;
                                                            statearr_13314[12] = inst_13219__$1;
                                                            statearr_13314[14] = inst_13221__$1;
                                                            statearr_13314[17] = inst_13229;
                                                            statearr_13314[15] = inst_13220__$1;
                                                            statearr_13314[16] = inst_13222__$1;
                                                            return statearr_13314;
                                                          }();
                                                          var statearr_13315_13355 = state_13278__$1;
                                                          statearr_13315_13355[2] = null;
                                                          statearr_13315_13355[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_13279 === 18) {
                                                            var inst_13248 = state_13278[2];
                                                            var state_13278__$1 = state_13278;
                                                            var statearr_13316_13356 = state_13278__$1;
                                                            statearr_13316_13356[2] = inst_13248;
                                                            statearr_13316_13356[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_13279 === 8) {
                                                              var inst_13221 = state_13278[14];
                                                              var inst_13222 = state_13278[16];
                                                              var inst_13224 = inst_13222 < inst_13221;
                                                              var inst_13225 = inst_13224;
                                                              var state_13278__$1 = state_13278;
                                                              if (cljs.core.truth_(inst_13225)) {
                                                                var statearr_13317_13357 = state_13278__$1;
                                                                statearr_13317_13357[1] = 10;
                                                              } else {
                                                                var statearr_13318_13358 = state_13278__$1;
                                                                statearr_13318_13358[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___13330, mults, ensure_mult, p);
        return function(switch__11265__auto__, c__11377__auto___13330, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_13322 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13322[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_13322[1] = 1;
              return statearr_13322;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_13278) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_13278);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e13323) {
                    if (e13323 instanceof Object) {
                      var ex__11269__auto__ = e13323;
                      var statearr_13324_13359 = state_13278;
                      statearr_13324_13359[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13278);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13323;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13360 = state_13278;
                  state_13278 = G__13360;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_13278) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_13278);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___13330, mults, ensure_mult, p);
      }();
      var state__11379__auto__ = function() {
        var statearr_13325 = f__11378__auto__.call(null);
        statearr_13325[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___13330;
        return statearr_13325;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___13330, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub(var_args) {
  var args13361 = [];
  var len__8373__auto___13364 = arguments.length;
  var i__8374__auto___13365 = 0;
  while (true) {
    if (i__8374__auto___13365 < len__8373__auto___13364) {
      args13361.push(arguments[i__8374__auto___13365]);
      var G__13366 = i__8374__auto___13365 + 1;
      i__8374__auto___13365 = G__13366;
      continue;
    } else {
    }
    break;
  }
  var G__13363 = args13361.length;
  switch(G__13363) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13361.length)].join(""));
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all(var_args) {
  var args13368 = [];
  var len__8373__auto___13371 = arguments.length;
  var i__8374__auto___13372 = 0;
  while (true) {
    if (i__8374__auto___13372 < len__8373__auto___13371) {
      args13368.push(arguments[i__8374__auto___13372]);
      var G__13373 = i__8374__auto___13372 + 1;
      i__8374__auto___13372 = G__13373;
      continue;
    } else {
    }
    break;
  }
  var G__13370 = args13368.length;
  switch(G__13370) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13368.length)].join(""));
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map(var_args) {
  var args13375 = [];
  var len__8373__auto___13446 = arguments.length;
  var i__8374__auto___13447 = 0;
  while (true) {
    if (i__8374__auto___13447 < len__8373__auto___13446) {
      args13375.push(arguments[i__8374__auto___13447]);
      var G__13448 = i__8374__auto___13447 + 1;
      i__8374__auto___13447 = G__13448;
      continue;
    } else {
    }
    break;
  }
  var G__13377 = args13375.length;
  switch(G__13377) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13375.length)].join(""));
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__11377__auto___13450 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___13450, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___13450, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_13416) {
            var state_val_13417 = state_13416[1];
            if (state_val_13417 === 7) {
              var state_13416__$1 = state_13416;
              var statearr_13418_13451 = state_13416__$1;
              statearr_13418_13451[2] = null;
              statearr_13418_13451[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13417 === 1) {
                var state_13416__$1 = state_13416;
                var statearr_13419_13452 = state_13416__$1;
                statearr_13419_13452[2] = null;
                statearr_13419_13452[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13417 === 4) {
                  var inst_13380 = state_13416[7];
                  var inst_13382 = inst_13380 < cnt;
                  var state_13416__$1 = state_13416;
                  if (cljs.core.truth_(inst_13382)) {
                    var statearr_13420_13453 = state_13416__$1;
                    statearr_13420_13453[1] = 6;
                  } else {
                    var statearr_13421_13454 = state_13416__$1;
                    statearr_13421_13454[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13417 === 15) {
                    var inst_13412 = state_13416[2];
                    var state_13416__$1 = state_13416;
                    var statearr_13422_13455 = state_13416__$1;
                    statearr_13422_13455[2] = inst_13412;
                    statearr_13422_13455[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13417 === 13) {
                      var inst_13405 = cljs.core.async.close_BANG_.call(null, out);
                      var state_13416__$1 = state_13416;
                      var statearr_13423_13456 = state_13416__$1;
                      statearr_13423_13456[2] = inst_13405;
                      statearr_13423_13456[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13417 === 6) {
                        var state_13416__$1 = state_13416;
                        var statearr_13424_13457 = state_13416__$1;
                        statearr_13424_13457[2] = null;
                        statearr_13424_13457[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13417 === 3) {
                          var inst_13414 = state_13416[2];
                          var state_13416__$1 = state_13416;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13416__$1, inst_13414);
                        } else {
                          if (state_val_13417 === 12) {
                            var inst_13402 = state_13416[8];
                            var inst_13402__$1 = state_13416[2];
                            var inst_13403 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_13402__$1);
                            var state_13416__$1 = function() {
                              var statearr_13425 = state_13416;
                              statearr_13425[8] = inst_13402__$1;
                              return statearr_13425;
                            }();
                            if (cljs.core.truth_(inst_13403)) {
                              var statearr_13426_13458 = state_13416__$1;
                              statearr_13426_13458[1] = 13;
                            } else {
                              var statearr_13427_13459 = state_13416__$1;
                              statearr_13427_13459[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13417 === 2) {
                              var inst_13379 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_13380 = 0;
                              var state_13416__$1 = function() {
                                var statearr_13428 = state_13416;
                                statearr_13428[9] = inst_13379;
                                statearr_13428[7] = inst_13380;
                                return statearr_13428;
                              }();
                              var statearr_13429_13460 = state_13416__$1;
                              statearr_13429_13460[2] = null;
                              statearr_13429_13460[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13417 === 11) {
                                var inst_13380 = state_13416[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_13416, 10, Object, null, 9);
                                var inst_13389 = chs__$1.call(null, inst_13380);
                                var inst_13390 = done.call(null, inst_13380);
                                var inst_13391 = cljs.core.async.take_BANG_.call(null, inst_13389, inst_13390);
                                var state_13416__$1 = state_13416;
                                var statearr_13430_13461 = state_13416__$1;
                                statearr_13430_13461[2] = inst_13391;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13416__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13417 === 9) {
                                  var inst_13380 = state_13416[7];
                                  var inst_13393 = state_13416[2];
                                  var inst_13394 = inst_13380 + 1;
                                  var inst_13380__$1 = inst_13394;
                                  var state_13416__$1 = function() {
                                    var statearr_13431 = state_13416;
                                    statearr_13431[10] = inst_13393;
                                    statearr_13431[7] = inst_13380__$1;
                                    return statearr_13431;
                                  }();
                                  var statearr_13432_13462 = state_13416__$1;
                                  statearr_13432_13462[2] = null;
                                  statearr_13432_13462[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13417 === 5) {
                                    var inst_13400 = state_13416[2];
                                    var state_13416__$1 = function() {
                                      var statearr_13433 = state_13416;
                                      statearr_13433[11] = inst_13400;
                                      return statearr_13433;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13416__$1, 12, dchan);
                                  } else {
                                    if (state_val_13417 === 14) {
                                      var inst_13402 = state_13416[8];
                                      var inst_13407 = cljs.core.apply.call(null, f, inst_13402);
                                      var state_13416__$1 = state_13416;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13416__$1, 16, out, inst_13407);
                                    } else {
                                      if (state_val_13417 === 16) {
                                        var inst_13409 = state_13416[2];
                                        var state_13416__$1 = function() {
                                          var statearr_13434 = state_13416;
                                          statearr_13434[12] = inst_13409;
                                          return statearr_13434;
                                        }();
                                        var statearr_13435_13463 = state_13416__$1;
                                        statearr_13435_13463[2] = null;
                                        statearr_13435_13463[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13417 === 10) {
                                          var inst_13384 = state_13416[2];
                                          var inst_13385 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_13416__$1 = function() {
                                            var statearr_13436 = state_13416;
                                            statearr_13436[13] = inst_13384;
                                            return statearr_13436;
                                          }();
                                          var statearr_13437_13464 = state_13416__$1;
                                          statearr_13437_13464[2] = inst_13385;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13416__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13417 === 8) {
                                            var inst_13398 = state_13416[2];
                                            var state_13416__$1 = state_13416;
                                            var statearr_13438_13465 = state_13416__$1;
                                            statearr_13438_13465[2] = inst_13398;
                                            statearr_13438_13465[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___13450, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__11265__auto__, c__11377__auto___13450, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_13442 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13442[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_13442[1] = 1;
              return statearr_13442;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_13416) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_13416);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e13443) {
                    if (e13443 instanceof Object) {
                      var ex__11269__auto__ = e13443;
                      var statearr_13444_13466 = state_13416;
                      statearr_13444_13466[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13416);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13443;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13467 = state_13416;
                  state_13416 = G__13467;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_13416) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_13416);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___13450, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__11379__auto__ = function() {
        var statearr_13445 = f__11378__auto__.call(null);
        statearr_13445[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___13450;
        return statearr_13445;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___13450, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge(var_args) {
  var args13469 = [];
  var len__8373__auto___13527 = arguments.length;
  var i__8374__auto___13528 = 0;
  while (true) {
    if (i__8374__auto___13528 < len__8373__auto___13527) {
      args13469.push(arguments[i__8374__auto___13528]);
      var G__13529 = i__8374__auto___13528 + 1;
      i__8374__auto___13528 = G__13529;
      continue;
    } else {
    }
    break;
  }
  var G__13471 = args13469.length;
  switch(G__13471) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13469.length)].join(""));
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__11377__auto___13531 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___13531, out) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___13531, out) {
          return function(state_13503) {
            var state_val_13504 = state_13503[1];
            if (state_val_13504 === 7) {
              var inst_13483 = state_13503[7];
              var inst_13482 = state_13503[8];
              var inst_13482__$1 = state_13503[2];
              var inst_13483__$1 = cljs.core.nth.call(null, inst_13482__$1, 0, null);
              var inst_13484 = cljs.core.nth.call(null, inst_13482__$1, 1, null);
              var inst_13485 = inst_13483__$1 == null;
              var state_13503__$1 = function() {
                var statearr_13505 = state_13503;
                statearr_13505[9] = inst_13484;
                statearr_13505[7] = inst_13483__$1;
                statearr_13505[8] = inst_13482__$1;
                return statearr_13505;
              }();
              if (cljs.core.truth_(inst_13485)) {
                var statearr_13506_13532 = state_13503__$1;
                statearr_13506_13532[1] = 8;
              } else {
                var statearr_13507_13533 = state_13503__$1;
                statearr_13507_13533[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13504 === 1) {
                var inst_13472 = cljs.core.vec.call(null, chs);
                var inst_13473 = inst_13472;
                var state_13503__$1 = function() {
                  var statearr_13508 = state_13503;
                  statearr_13508[10] = inst_13473;
                  return statearr_13508;
                }();
                var statearr_13509_13534 = state_13503__$1;
                statearr_13509_13534[2] = null;
                statearr_13509_13534[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13504 === 4) {
                  var inst_13473 = state_13503[10];
                  var state_13503__$1 = state_13503;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_13503__$1, 7, inst_13473);
                } else {
                  if (state_val_13504 === 6) {
                    var inst_13499 = state_13503[2];
                    var state_13503__$1 = state_13503;
                    var statearr_13510_13535 = state_13503__$1;
                    statearr_13510_13535[2] = inst_13499;
                    statearr_13510_13535[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13504 === 3) {
                      var inst_13501 = state_13503[2];
                      var state_13503__$1 = state_13503;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13503__$1, inst_13501);
                    } else {
                      if (state_val_13504 === 2) {
                        var inst_13473 = state_13503[10];
                        var inst_13475 = cljs.core.count.call(null, inst_13473);
                        var inst_13476 = inst_13475 > 0;
                        var state_13503__$1 = state_13503;
                        if (cljs.core.truth_(inst_13476)) {
                          var statearr_13512_13536 = state_13503__$1;
                          statearr_13512_13536[1] = 4;
                        } else {
                          var statearr_13513_13537 = state_13503__$1;
                          statearr_13513_13537[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13504 === 11) {
                          var inst_13473 = state_13503[10];
                          var inst_13492 = state_13503[2];
                          var tmp13511 = inst_13473;
                          var inst_13473__$1 = tmp13511;
                          var state_13503__$1 = function() {
                            var statearr_13514 = state_13503;
                            statearr_13514[11] = inst_13492;
                            statearr_13514[10] = inst_13473__$1;
                            return statearr_13514;
                          }();
                          var statearr_13515_13538 = state_13503__$1;
                          statearr_13515_13538[2] = null;
                          statearr_13515_13538[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13504 === 9) {
                            var inst_13483 = state_13503[7];
                            var state_13503__$1 = state_13503;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13503__$1, 11, out, inst_13483);
                          } else {
                            if (state_val_13504 === 5) {
                              var inst_13497 = cljs.core.async.close_BANG_.call(null, out);
                              var state_13503__$1 = state_13503;
                              var statearr_13516_13539 = state_13503__$1;
                              statearr_13516_13539[2] = inst_13497;
                              statearr_13516_13539[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13504 === 10) {
                                var inst_13495 = state_13503[2];
                                var state_13503__$1 = state_13503;
                                var statearr_13517_13540 = state_13503__$1;
                                statearr_13517_13540[2] = inst_13495;
                                statearr_13517_13540[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13504 === 8) {
                                  var inst_13484 = state_13503[9];
                                  var inst_13483 = state_13503[7];
                                  var inst_13482 = state_13503[8];
                                  var inst_13473 = state_13503[10];
                                  var inst_13487 = function() {
                                    var cs = inst_13473;
                                    var vec__13478 = inst_13482;
                                    var v = inst_13483;
                                    var c = inst_13484;
                                    return function(cs, vec__13478, v, c, inst_13484, inst_13483, inst_13482, inst_13473, state_val_13504, c__11377__auto___13531, out) {
                                      return function(p1__13468_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__13468_SHARP_);
                                      };
                                    }(cs, vec__13478, v, c, inst_13484, inst_13483, inst_13482, inst_13473, state_val_13504, c__11377__auto___13531, out);
                                  }();
                                  var inst_13488 = cljs.core.filterv.call(null, inst_13487, inst_13473);
                                  var inst_13473__$1 = inst_13488;
                                  var state_13503__$1 = function() {
                                    var statearr_13518 = state_13503;
                                    statearr_13518[10] = inst_13473__$1;
                                    return statearr_13518;
                                  }();
                                  var statearr_13519_13541 = state_13503__$1;
                                  statearr_13519_13541[2] = null;
                                  statearr_13519_13541[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___13531, out);
        return function(switch__11265__auto__, c__11377__auto___13531, out) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_13523 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13523[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_13523[1] = 1;
              return statearr_13523;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_13503) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_13503);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e13524) {
                    if (e13524 instanceof Object) {
                      var ex__11269__auto__ = e13524;
                      var statearr_13525_13542 = state_13503;
                      statearr_13525_13542[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13503);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13524;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13543 = state_13503;
                  state_13503 = G__13543;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_13503) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_13503);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___13531, out);
      }();
      var state__11379__auto__ = function() {
        var statearr_13526 = f__11378__auto__.call(null);
        statearr_13526[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___13531;
        return statearr_13526;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___13531, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take(var_args) {
  var args13544 = [];
  var len__8373__auto___13593 = arguments.length;
  var i__8374__auto___13594 = 0;
  while (true) {
    if (i__8374__auto___13594 < len__8373__auto___13593) {
      args13544.push(arguments[i__8374__auto___13594]);
      var G__13595 = i__8374__auto___13594 + 1;
      i__8374__auto___13594 = G__13595;
      continue;
    } else {
    }
    break;
  }
  var G__13546 = args13544.length;
  switch(G__13546) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13544.length)].join(""));
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__11377__auto___13597 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___13597, out) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___13597, out) {
          return function(state_13570) {
            var state_val_13571 = state_13570[1];
            if (state_val_13571 === 7) {
              var inst_13552 = state_13570[7];
              var inst_13552__$1 = state_13570[2];
              var inst_13553 = inst_13552__$1 == null;
              var inst_13554 = cljs.core.not.call(null, inst_13553);
              var state_13570__$1 = function() {
                var statearr_13572 = state_13570;
                statearr_13572[7] = inst_13552__$1;
                return statearr_13572;
              }();
              if (inst_13554) {
                var statearr_13573_13598 = state_13570__$1;
                statearr_13573_13598[1] = 8;
              } else {
                var statearr_13574_13599 = state_13570__$1;
                statearr_13574_13599[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13571 === 1) {
                var inst_13547 = 0;
                var state_13570__$1 = function() {
                  var statearr_13575 = state_13570;
                  statearr_13575[8] = inst_13547;
                  return statearr_13575;
                }();
                var statearr_13576_13600 = state_13570__$1;
                statearr_13576_13600[2] = null;
                statearr_13576_13600[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13571 === 4) {
                  var state_13570__$1 = state_13570;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13570__$1, 7, ch);
                } else {
                  if (state_val_13571 === 6) {
                    var inst_13565 = state_13570[2];
                    var state_13570__$1 = state_13570;
                    var statearr_13577_13601 = state_13570__$1;
                    statearr_13577_13601[2] = inst_13565;
                    statearr_13577_13601[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13571 === 3) {
                      var inst_13567 = state_13570[2];
                      var inst_13568 = cljs.core.async.close_BANG_.call(null, out);
                      var state_13570__$1 = function() {
                        var statearr_13578 = state_13570;
                        statearr_13578[9] = inst_13567;
                        return statearr_13578;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13570__$1, inst_13568);
                    } else {
                      if (state_val_13571 === 2) {
                        var inst_13547 = state_13570[8];
                        var inst_13549 = inst_13547 < n;
                        var state_13570__$1 = state_13570;
                        if (cljs.core.truth_(inst_13549)) {
                          var statearr_13579_13602 = state_13570__$1;
                          statearr_13579_13602[1] = 4;
                        } else {
                          var statearr_13580_13603 = state_13570__$1;
                          statearr_13580_13603[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13571 === 11) {
                          var inst_13547 = state_13570[8];
                          var inst_13557 = state_13570[2];
                          var inst_13558 = inst_13547 + 1;
                          var inst_13547__$1 = inst_13558;
                          var state_13570__$1 = function() {
                            var statearr_13581 = state_13570;
                            statearr_13581[8] = inst_13547__$1;
                            statearr_13581[10] = inst_13557;
                            return statearr_13581;
                          }();
                          var statearr_13582_13604 = state_13570__$1;
                          statearr_13582_13604[2] = null;
                          statearr_13582_13604[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13571 === 9) {
                            var state_13570__$1 = state_13570;
                            var statearr_13583_13605 = state_13570__$1;
                            statearr_13583_13605[2] = null;
                            statearr_13583_13605[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13571 === 5) {
                              var state_13570__$1 = state_13570;
                              var statearr_13584_13606 = state_13570__$1;
                              statearr_13584_13606[2] = null;
                              statearr_13584_13606[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13571 === 10) {
                                var inst_13562 = state_13570[2];
                                var state_13570__$1 = state_13570;
                                var statearr_13585_13607 = state_13570__$1;
                                statearr_13585_13607[2] = inst_13562;
                                statearr_13585_13607[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13571 === 8) {
                                  var inst_13552 = state_13570[7];
                                  var state_13570__$1 = state_13570;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13570__$1, 11, out, inst_13552);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___13597, out);
        return function(switch__11265__auto__, c__11377__auto___13597, out) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_13589 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13589[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_13589[1] = 1;
              return statearr_13589;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_13570) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_13570);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e13590) {
                    if (e13590 instanceof Object) {
                      var ex__11269__auto__ = e13590;
                      var statearr_13591_13608 = state_13570;
                      statearr_13591_13608[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13570);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13590;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13609 = state_13570;
                  state_13570 = G__13609;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_13570) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_13570);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___13597, out);
      }();
      var state__11379__auto__ = function() {
        var statearr_13592 = f__11378__auto__.call(null);
        statearr_13592[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___13597;
        return statearr_13592;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___13597, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t_cljs$core$async13617 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13617 = function(f, ch, meta13618) {
      this.f = f;
      this.ch = ch;
      this.meta13618 = meta13618;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13619, meta13618__$1) {
      var self__ = this;
      var _13619__$1 = this;
      return new cljs.core.async.t_cljs$core$async13617(self__.f, self__.ch, meta13618__$1);
    };
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13619) {
      var self__ = this;
      var _13619__$1 = this;
      return self__.meta13618;
    };
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t_cljs$core$async13620 !== "undefined") {
        } else {
          cljs.core.async.t_cljs$core$async13620 = function(f, ch, meta13618, _, fn1, meta13621) {
            this.f = f;
            this.ch = ch;
            this.meta13618 = meta13618;
            this._ = _;
            this.fn1 = fn1;
            this.meta13621 = meta13621;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t_cljs$core$async13620.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_13622, meta13621__$1) {
              var self__ = this;
              var _13622__$1 = this;
              return new cljs.core.async.t_cljs$core$async13620(self__.f, self__.ch, self__.meta13618, self__._, self__.fn1, meta13621__$1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13620.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_13622) {
              var self__ = this;
              var _13622__$1 = this;
              return self__.meta13621;
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13620.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL;
          cljs.core.async.t_cljs$core$async13620.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13620.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return true;
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13620.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__13610_SHARP_) {
                  return f1.call(null, p1__13610_SHARP_ == null ? null : self__.f.call(null, p1__13610_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13620.getBasis = function(___$1) {
            return function() {
              return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta13618", "meta13618", -633280627, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core.async", 
              "t_cljs$core$async13617", "cljs.core.async/t_cljs$core$async13617", 2060500823, null)], null)), new cljs.core.Symbol(null, "fn1", "fn1", 895834444, null), new cljs.core.Symbol(null, "meta13621", "meta13621", -2104003706, null)], null);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async13620.cljs$lang$type = true;
          cljs.core.async.t_cljs$core$async13620.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13620";
          cljs.core.async.t_cljs$core$async13620.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
              return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async13620");
            };
          }(___$1);
          cljs.core.async.__GT_t_cljs$core$async13620 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t_cljs$core$async13620(f__$1, ch__$1, meta13618__$1, ___$2, fn1__$1, meta13621) {
              return new cljs.core.async.t_cljs$core$async13620(f__$1, ch__$1, meta13618__$1, ___$2, fn1__$1, meta13621);
            };
          }(___$1);
        }
        return new cljs.core.async.t_cljs$core$async13620(self__.f, self__.ch, self__.meta13618, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__7248__auto__ = ret;
        if (cljs.core.truth_(and__7248__auto__)) {
          return !(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__7248__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13617.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t_cljs$core$async13617.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta13618", "meta13618", -633280627, null)], null);
    };
    cljs.core.async.t_cljs$core$async13617.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13617.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13617";
    cljs.core.async.t_cljs$core$async13617.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async13617");
    };
    cljs.core.async.__GT_t_cljs$core$async13617 = function cljs$core$async$map_LT__$___GT_t_cljs$core$async13617(f__$1, ch__$1, meta13618) {
      return new cljs.core.async.t_cljs$core$async13617(f__$1, ch__$1, meta13618);
    };
  }
  return new cljs.core.async.t_cljs$core$async13617(f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t_cljs$core$async13626 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13626 = function(f, ch, meta13627) {
      this.f = f;
      this.ch = ch;
      this.meta13627 = meta13627;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13626.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13628, meta13627__$1) {
      var self__ = this;
      var _13628__$1 = this;
      return new cljs.core.async.t_cljs$core$async13626(self__.f, self__.ch, meta13627__$1);
    };
    cljs.core.async.t_cljs$core$async13626.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13628) {
      var self__ = this;
      var _13628__$1 = this;
      return self__.meta13627;
    };
    cljs.core.async.t_cljs$core$async13626.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13626.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13626.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13626.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async13626.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13626.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t_cljs$core$async13626.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta13627", "meta13627", 1797725651, null)], null);
    };
    cljs.core.async.t_cljs$core$async13626.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13626.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13626";
    cljs.core.async.t_cljs$core$async13626.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async13626");
    };
    cljs.core.async.__GT_t_cljs$core$async13626 = function cljs$core$async$map_GT__$___GT_t_cljs$core$async13626(f__$1, ch__$1, meta13627) {
      return new cljs.core.async.t_cljs$core$async13626(f__$1, ch__$1, meta13627);
    };
  }
  return new cljs.core.async.t_cljs$core$async13626(f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t_cljs$core$async13632 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13632 = function(p, ch, meta13633) {
      this.p = p;
      this.ch = ch;
      this.meta13633 = meta13633;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13634, meta13633__$1) {
      var self__ = this;
      var _13634__$1 = this;
      return new cljs.core.async.t_cljs$core$async13632(self__.p, self__.ch, meta13633__$1);
    };
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13634) {
      var self__ = this;
      var _13634__$1 = this;
      return self__.meta13633;
    };
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL;
    cljs.core.async.t_cljs$core$async13632.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t_cljs$core$async13632.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta13633", "meta13633", -33016208, null)], null);
    };
    cljs.core.async.t_cljs$core$async13632.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13632.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13632";
    cljs.core.async.t_cljs$core$async13632.cljs$lang$ctorPrWriter = function(this__7871__auto__, writer__7872__auto__, opt__7873__auto__) {
      return cljs.core._write.call(null, writer__7872__auto__, "cljs.core.async/t_cljs$core$async13632");
    };
    cljs.core.async.__GT_t_cljs$core$async13632 = function cljs$core$async$filter_GT__$___GT_t_cljs$core$async13632(p__$1, ch__$1, meta13633) {
      return new cljs.core.async.t_cljs$core$async13632(p__$1, ch__$1, meta13633);
    };
  }
  return new cljs.core.async.t_cljs$core$async13632(p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_(var_args) {
  var args13635 = [];
  var len__8373__auto___13679 = arguments.length;
  var i__8374__auto___13680 = 0;
  while (true) {
    if (i__8374__auto___13680 < len__8373__auto___13679) {
      args13635.push(arguments[i__8374__auto___13680]);
      var G__13681 = i__8374__auto___13680 + 1;
      i__8374__auto___13680 = G__13681;
      continue;
    } else {
    }
    break;
  }
  var G__13637 = args13635.length;
  switch(G__13637) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13635.length)].join(""));
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__11377__auto___13683 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___13683, out) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___13683, out) {
          return function(state_13658) {
            var state_val_13659 = state_13658[1];
            if (state_val_13659 === 7) {
              var inst_13654 = state_13658[2];
              var state_13658__$1 = state_13658;
              var statearr_13660_13684 = state_13658__$1;
              statearr_13660_13684[2] = inst_13654;
              statearr_13660_13684[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13659 === 1) {
                var state_13658__$1 = state_13658;
                var statearr_13661_13685 = state_13658__$1;
                statearr_13661_13685[2] = null;
                statearr_13661_13685[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13659 === 4) {
                  var inst_13640 = state_13658[7];
                  var inst_13640__$1 = state_13658[2];
                  var inst_13641 = inst_13640__$1 == null;
                  var state_13658__$1 = function() {
                    var statearr_13662 = state_13658;
                    statearr_13662[7] = inst_13640__$1;
                    return statearr_13662;
                  }();
                  if (cljs.core.truth_(inst_13641)) {
                    var statearr_13663_13686 = state_13658__$1;
                    statearr_13663_13686[1] = 5;
                  } else {
                    var statearr_13664_13687 = state_13658__$1;
                    statearr_13664_13687[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13659 === 6) {
                    var inst_13640 = state_13658[7];
                    var inst_13645 = p.call(null, inst_13640);
                    var state_13658__$1 = state_13658;
                    if (cljs.core.truth_(inst_13645)) {
                      var statearr_13665_13688 = state_13658__$1;
                      statearr_13665_13688[1] = 8;
                    } else {
                      var statearr_13666_13689 = state_13658__$1;
                      statearr_13666_13689[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13659 === 3) {
                      var inst_13656 = state_13658[2];
                      var state_13658__$1 = state_13658;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13658__$1, inst_13656);
                    } else {
                      if (state_val_13659 === 2) {
                        var state_13658__$1 = state_13658;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13658__$1, 4, ch);
                      } else {
                        if (state_val_13659 === 11) {
                          var inst_13648 = state_13658[2];
                          var state_13658__$1 = state_13658;
                          var statearr_13667_13690 = state_13658__$1;
                          statearr_13667_13690[2] = inst_13648;
                          statearr_13667_13690[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13659 === 9) {
                            var state_13658__$1 = state_13658;
                            var statearr_13668_13691 = state_13658__$1;
                            statearr_13668_13691[2] = null;
                            statearr_13668_13691[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13659 === 5) {
                              var inst_13643 = cljs.core.async.close_BANG_.call(null, out);
                              var state_13658__$1 = state_13658;
                              var statearr_13669_13692 = state_13658__$1;
                              statearr_13669_13692[2] = inst_13643;
                              statearr_13669_13692[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13659 === 10) {
                                var inst_13651 = state_13658[2];
                                var state_13658__$1 = function() {
                                  var statearr_13670 = state_13658;
                                  statearr_13670[8] = inst_13651;
                                  return statearr_13670;
                                }();
                                var statearr_13671_13693 = state_13658__$1;
                                statearr_13671_13693[2] = null;
                                statearr_13671_13693[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13659 === 8) {
                                  var inst_13640 = state_13658[7];
                                  var state_13658__$1 = state_13658;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13658__$1, 11, out, inst_13640);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___13683, out);
        return function(switch__11265__auto__, c__11377__auto___13683, out) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_13675 = [null, null, null, null, null, null, null, null, null];
              statearr_13675[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_13675[1] = 1;
              return statearr_13675;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_13658) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_13658);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e13676) {
                    if (e13676 instanceof Object) {
                      var ex__11269__auto__ = e13676;
                      var statearr_13677_13694 = state_13658;
                      statearr_13677_13694[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13658);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13676;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13695 = state_13658;
                  state_13658 = G__13695;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_13658) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_13658);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___13683, out);
      }();
      var state__11379__auto__ = function() {
        var statearr_13678 = f__11378__auto__.call(null);
        statearr_13678[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___13683;
        return statearr_13678;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___13683, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_(var_args) {
  var args13696 = [];
  var len__8373__auto___13699 = arguments.length;
  var i__8374__auto___13700 = 0;
  while (true) {
    if (i__8374__auto___13700 < len__8373__auto___13699) {
      args13696.push(arguments[i__8374__auto___13700]);
      var G__13701 = i__8374__auto___13700 + 1;
      i__8374__auto___13700 = G__13701;
      continue;
    } else {
    }
    break;
  }
  var G__13698 = args13696.length;
  switch(G__13698) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13696.length)].join(""));
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__11377__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto__) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto__) {
          return function(state_13868) {
            var state_val_13869 = state_13868[1];
            if (state_val_13869 === 7) {
              var inst_13864 = state_13868[2];
              var state_13868__$1 = state_13868;
              var statearr_13870_13911 = state_13868__$1;
              statearr_13870_13911[2] = inst_13864;
              statearr_13870_13911[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13869 === 20) {
                var inst_13834 = state_13868[7];
                var inst_13845 = state_13868[2];
                var inst_13846 = cljs.core.next.call(null, inst_13834);
                var inst_13820 = inst_13846;
                var inst_13821 = null;
                var inst_13822 = 0;
                var inst_13823 = 0;
                var state_13868__$1 = function() {
                  var statearr_13871 = state_13868;
                  statearr_13871[8] = inst_13821;
                  statearr_13871[9] = inst_13823;
                  statearr_13871[10] = inst_13820;
                  statearr_13871[11] = inst_13845;
                  statearr_13871[12] = inst_13822;
                  return statearr_13871;
                }();
                var statearr_13872_13912 = state_13868__$1;
                statearr_13872_13912[2] = null;
                statearr_13872_13912[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13869 === 1) {
                  var state_13868__$1 = state_13868;
                  var statearr_13873_13913 = state_13868__$1;
                  statearr_13873_13913[2] = null;
                  statearr_13873_13913[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13869 === 4) {
                    var inst_13809 = state_13868[13];
                    var inst_13809__$1 = state_13868[2];
                    var inst_13810 = inst_13809__$1 == null;
                    var state_13868__$1 = function() {
                      var statearr_13874 = state_13868;
                      statearr_13874[13] = inst_13809__$1;
                      return statearr_13874;
                    }();
                    if (cljs.core.truth_(inst_13810)) {
                      var statearr_13875_13914 = state_13868__$1;
                      statearr_13875_13914[1] = 5;
                    } else {
                      var statearr_13876_13915 = state_13868__$1;
                      statearr_13876_13915[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13869 === 15) {
                      var state_13868__$1 = state_13868;
                      var statearr_13880_13916 = state_13868__$1;
                      statearr_13880_13916[2] = null;
                      statearr_13880_13916[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13869 === 21) {
                        var state_13868__$1 = state_13868;
                        var statearr_13881_13917 = state_13868__$1;
                        statearr_13881_13917[2] = null;
                        statearr_13881_13917[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13869 === 13) {
                          var inst_13821 = state_13868[8];
                          var inst_13823 = state_13868[9];
                          var inst_13820 = state_13868[10];
                          var inst_13822 = state_13868[12];
                          var inst_13830 = state_13868[2];
                          var inst_13831 = inst_13823 + 1;
                          var tmp13877 = inst_13821;
                          var tmp13878 = inst_13820;
                          var tmp13879 = inst_13822;
                          var inst_13820__$1 = tmp13878;
                          var inst_13821__$1 = tmp13877;
                          var inst_13822__$1 = tmp13879;
                          var inst_13823__$1 = inst_13831;
                          var state_13868__$1 = function() {
                            var statearr_13882 = state_13868;
                            statearr_13882[8] = inst_13821__$1;
                            statearr_13882[9] = inst_13823__$1;
                            statearr_13882[10] = inst_13820__$1;
                            statearr_13882[14] = inst_13830;
                            statearr_13882[12] = inst_13822__$1;
                            return statearr_13882;
                          }();
                          var statearr_13883_13918 = state_13868__$1;
                          statearr_13883_13918[2] = null;
                          statearr_13883_13918[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13869 === 22) {
                            var state_13868__$1 = state_13868;
                            var statearr_13884_13919 = state_13868__$1;
                            statearr_13884_13919[2] = null;
                            statearr_13884_13919[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13869 === 6) {
                              var inst_13809 = state_13868[13];
                              var inst_13818 = f.call(null, inst_13809);
                              var inst_13819 = cljs.core.seq.call(null, inst_13818);
                              var inst_13820 = inst_13819;
                              var inst_13821 = null;
                              var inst_13822 = 0;
                              var inst_13823 = 0;
                              var state_13868__$1 = function() {
                                var statearr_13885 = state_13868;
                                statearr_13885[8] = inst_13821;
                                statearr_13885[9] = inst_13823;
                                statearr_13885[10] = inst_13820;
                                statearr_13885[12] = inst_13822;
                                return statearr_13885;
                              }();
                              var statearr_13886_13920 = state_13868__$1;
                              statearr_13886_13920[2] = null;
                              statearr_13886_13920[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13869 === 17) {
                                var inst_13834 = state_13868[7];
                                var inst_13838 = cljs.core.chunk_first.call(null, inst_13834);
                                var inst_13839 = cljs.core.chunk_rest.call(null, inst_13834);
                                var inst_13840 = cljs.core.count.call(null, inst_13838);
                                var inst_13820 = inst_13839;
                                var inst_13821 = inst_13838;
                                var inst_13822 = inst_13840;
                                var inst_13823 = 0;
                                var state_13868__$1 = function() {
                                  var statearr_13887 = state_13868;
                                  statearr_13887[8] = inst_13821;
                                  statearr_13887[9] = inst_13823;
                                  statearr_13887[10] = inst_13820;
                                  statearr_13887[12] = inst_13822;
                                  return statearr_13887;
                                }();
                                var statearr_13888_13921 = state_13868__$1;
                                statearr_13888_13921[2] = null;
                                statearr_13888_13921[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13869 === 3) {
                                  var inst_13866 = state_13868[2];
                                  var state_13868__$1 = state_13868;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13868__$1, inst_13866);
                                } else {
                                  if (state_val_13869 === 12) {
                                    var inst_13854 = state_13868[2];
                                    var state_13868__$1 = state_13868;
                                    var statearr_13889_13922 = state_13868__$1;
                                    statearr_13889_13922[2] = inst_13854;
                                    statearr_13889_13922[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13869 === 2) {
                                      var state_13868__$1 = state_13868;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13868__$1, 4, in$);
                                    } else {
                                      if (state_val_13869 === 23) {
                                        var inst_13862 = state_13868[2];
                                        var state_13868__$1 = state_13868;
                                        var statearr_13890_13923 = state_13868__$1;
                                        statearr_13890_13923[2] = inst_13862;
                                        statearr_13890_13923[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13869 === 19) {
                                          var inst_13849 = state_13868[2];
                                          var state_13868__$1 = state_13868;
                                          var statearr_13891_13924 = state_13868__$1;
                                          statearr_13891_13924[2] = inst_13849;
                                          statearr_13891_13924[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13869 === 11) {
                                            var inst_13820 = state_13868[10];
                                            var inst_13834 = state_13868[7];
                                            var inst_13834__$1 = cljs.core.seq.call(null, inst_13820);
                                            var state_13868__$1 = function() {
                                              var statearr_13892 = state_13868;
                                              statearr_13892[7] = inst_13834__$1;
                                              return statearr_13892;
                                            }();
                                            if (inst_13834__$1) {
                                              var statearr_13893_13925 = state_13868__$1;
                                              statearr_13893_13925[1] = 14;
                                            } else {
                                              var statearr_13894_13926 = state_13868__$1;
                                              statearr_13894_13926[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13869 === 9) {
                                              var inst_13856 = state_13868[2];
                                              var inst_13857 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_13868__$1 = function() {
                                                var statearr_13895 = state_13868;
                                                statearr_13895[15] = inst_13856;
                                                return statearr_13895;
                                              }();
                                              if (cljs.core.truth_(inst_13857)) {
                                                var statearr_13896_13927 = state_13868__$1;
                                                statearr_13896_13927[1] = 21;
                                              } else {
                                                var statearr_13897_13928 = state_13868__$1;
                                                statearr_13897_13928[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13869 === 5) {
                                                var inst_13812 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_13868__$1 = state_13868;
                                                var statearr_13898_13929 = state_13868__$1;
                                                statearr_13898_13929[2] = inst_13812;
                                                statearr_13898_13929[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13869 === 14) {
                                                  var inst_13834 = state_13868[7];
                                                  var inst_13836 = cljs.core.chunked_seq_QMARK_.call(null, inst_13834);
                                                  var state_13868__$1 = state_13868;
                                                  if (inst_13836) {
                                                    var statearr_13899_13930 = state_13868__$1;
                                                    statearr_13899_13930[1] = 17;
                                                  } else {
                                                    var statearr_13900_13931 = state_13868__$1;
                                                    statearr_13900_13931[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13869 === 16) {
                                                    var inst_13852 = state_13868[2];
                                                    var state_13868__$1 = state_13868;
                                                    var statearr_13901_13932 = state_13868__$1;
                                                    statearr_13901_13932[2] = inst_13852;
                                                    statearr_13901_13932[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13869 === 10) {
                                                      var inst_13821 = state_13868[8];
                                                      var inst_13823 = state_13868[9];
                                                      var inst_13828 = cljs.core._nth.call(null, inst_13821, inst_13823);
                                                      var state_13868__$1 = state_13868;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13868__$1, 13, out, inst_13828);
                                                    } else {
                                                      if (state_val_13869 === 18) {
                                                        var inst_13834 = state_13868[7];
                                                        var inst_13843 = cljs.core.first.call(null, inst_13834);
                                                        var state_13868__$1 = state_13868;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13868__$1, 20, out, inst_13843);
                                                      } else {
                                                        if (state_val_13869 === 8) {
                                                          var inst_13823 = state_13868[9];
                                                          var inst_13822 = state_13868[12];
                                                          var inst_13825 = inst_13823 < inst_13822;
                                                          var inst_13826 = inst_13825;
                                                          var state_13868__$1 = state_13868;
                                                          if (cljs.core.truth_(inst_13826)) {
                                                            var statearr_13902_13933 = state_13868__$1;
                                                            statearr_13902_13933[1] = 10;
                                                          } else {
                                                            var statearr_13903_13934 = state_13868__$1;
                                                            statearr_13903_13934[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto__);
        return function(switch__11265__auto__, c__11377__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__11266__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__11266__auto____0 = function() {
              var statearr_13907 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13907[0] = cljs$core$async$mapcat_STAR__$_state_machine__11266__auto__;
              statearr_13907[1] = 1;
              return statearr_13907;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__11266__auto____1 = function(state_13868) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_13868);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e13908) {
                    if (e13908 instanceof Object) {
                      var ex__11269__auto__ = e13908;
                      var statearr_13909_13935 = state_13868;
                      statearr_13909_13935[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13868);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13908;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13936 = state_13868;
                  state_13868 = G__13936;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__11266__auto__ = function(state_13868) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__11266__auto____1.call(this, state_13868);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$mapcat_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__11266__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__11266__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto__);
      }();
      var state__11379__auto__ = function() {
        var statearr_13910 = f__11378__auto__.call(null);
        statearr_13910[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto__;
        return statearr_13910;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto__));
  return c__11377__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_(var_args) {
  var args13937 = [];
  var len__8373__auto___13940 = arguments.length;
  var i__8374__auto___13941 = 0;
  while (true) {
    if (i__8374__auto___13941 < len__8373__auto___13940) {
      args13937.push(arguments[i__8374__auto___13941]);
      var G__13942 = i__8374__auto___13941 + 1;
      i__8374__auto___13941 = G__13942;
      continue;
    } else {
    }
    break;
  }
  var G__13939 = args13937.length;
  switch(G__13939) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13937.length)].join(""));
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_(var_args) {
  var args13944 = [];
  var len__8373__auto___13947 = arguments.length;
  var i__8374__auto___13948 = 0;
  while (true) {
    if (i__8374__auto___13948 < len__8373__auto___13947) {
      args13944.push(arguments[i__8374__auto___13948]);
      var G__13949 = i__8374__auto___13948 + 1;
      i__8374__auto___13948 = G__13949;
      continue;
    } else {
    }
    break;
  }
  var G__13946 = args13944.length;
  switch(G__13946) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13944.length)].join(""));
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique(var_args) {
  var args13951 = [];
  var len__8373__auto___14002 = arguments.length;
  var i__8374__auto___14003 = 0;
  while (true) {
    if (i__8374__auto___14003 < len__8373__auto___14002) {
      args13951.push(arguments[i__8374__auto___14003]);
      var G__14004 = i__8374__auto___14003 + 1;
      i__8374__auto___14003 = G__14004;
      continue;
    } else {
    }
    break;
  }
  var G__13953 = args13951.length;
  switch(G__13953) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13951.length)].join(""));
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__11377__auto___14006 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___14006, out) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___14006, out) {
          return function(state_13977) {
            var state_val_13978 = state_13977[1];
            if (state_val_13978 === 7) {
              var inst_13972 = state_13977[2];
              var state_13977__$1 = state_13977;
              var statearr_13979_14007 = state_13977__$1;
              statearr_13979_14007[2] = inst_13972;
              statearr_13979_14007[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13978 === 1) {
                var inst_13954 = null;
                var state_13977__$1 = function() {
                  var statearr_13980 = state_13977;
                  statearr_13980[7] = inst_13954;
                  return statearr_13980;
                }();
                var statearr_13981_14008 = state_13977__$1;
                statearr_13981_14008[2] = null;
                statearr_13981_14008[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13978 === 4) {
                  var inst_13957 = state_13977[8];
                  var inst_13957__$1 = state_13977[2];
                  var inst_13958 = inst_13957__$1 == null;
                  var inst_13959 = cljs.core.not.call(null, inst_13958);
                  var state_13977__$1 = function() {
                    var statearr_13982 = state_13977;
                    statearr_13982[8] = inst_13957__$1;
                    return statearr_13982;
                  }();
                  if (inst_13959) {
                    var statearr_13983_14009 = state_13977__$1;
                    statearr_13983_14009[1] = 5;
                  } else {
                    var statearr_13984_14010 = state_13977__$1;
                    statearr_13984_14010[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13978 === 6) {
                    var state_13977__$1 = state_13977;
                    var statearr_13985_14011 = state_13977__$1;
                    statearr_13985_14011[2] = null;
                    statearr_13985_14011[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13978 === 3) {
                      var inst_13974 = state_13977[2];
                      var inst_13975 = cljs.core.async.close_BANG_.call(null, out);
                      var state_13977__$1 = function() {
                        var statearr_13986 = state_13977;
                        statearr_13986[9] = inst_13974;
                        return statearr_13986;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13977__$1, inst_13975);
                    } else {
                      if (state_val_13978 === 2) {
                        var state_13977__$1 = state_13977;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13977__$1, 4, ch);
                      } else {
                        if (state_val_13978 === 11) {
                          var inst_13957 = state_13977[8];
                          var inst_13966 = state_13977[2];
                          var inst_13954 = inst_13957;
                          var state_13977__$1 = function() {
                            var statearr_13987 = state_13977;
                            statearr_13987[10] = inst_13966;
                            statearr_13987[7] = inst_13954;
                            return statearr_13987;
                          }();
                          var statearr_13988_14012 = state_13977__$1;
                          statearr_13988_14012[2] = null;
                          statearr_13988_14012[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13978 === 9) {
                            var inst_13957 = state_13977[8];
                            var state_13977__$1 = state_13977;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13977__$1, 11, out, inst_13957);
                          } else {
                            if (state_val_13978 === 5) {
                              var inst_13957 = state_13977[8];
                              var inst_13954 = state_13977[7];
                              var inst_13961 = cljs.core._EQ_.call(null, inst_13957, inst_13954);
                              var state_13977__$1 = state_13977;
                              if (inst_13961) {
                                var statearr_13990_14013 = state_13977__$1;
                                statearr_13990_14013[1] = 8;
                              } else {
                                var statearr_13991_14014 = state_13977__$1;
                                statearr_13991_14014[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13978 === 10) {
                                var inst_13969 = state_13977[2];
                                var state_13977__$1 = state_13977;
                                var statearr_13992_14015 = state_13977__$1;
                                statearr_13992_14015[2] = inst_13969;
                                statearr_13992_14015[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13978 === 8) {
                                  var inst_13954 = state_13977[7];
                                  var tmp13989 = inst_13954;
                                  var inst_13954__$1 = tmp13989;
                                  var state_13977__$1 = function() {
                                    var statearr_13993 = state_13977;
                                    statearr_13993[7] = inst_13954__$1;
                                    return statearr_13993;
                                  }();
                                  var statearr_13994_14016 = state_13977__$1;
                                  statearr_13994_14016[2] = null;
                                  statearr_13994_14016[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___14006, out);
        return function(switch__11265__auto__, c__11377__auto___14006, out) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_13998 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13998[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_13998[1] = 1;
              return statearr_13998;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_13977) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_13977);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e13999) {
                    if (e13999 instanceof Object) {
                      var ex__11269__auto__ = e13999;
                      var statearr_14000_14017 = state_13977;
                      statearr_14000_14017[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13977);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13999;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14018 = state_13977;
                  state_13977 = G__14018;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_13977) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_13977);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___14006, out);
      }();
      var state__11379__auto__ = function() {
        var statearr_14001 = f__11378__auto__.call(null);
        statearr_14001[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___14006;
        return statearr_14001;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___14006, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition(var_args) {
  var args14019 = [];
  var len__8373__auto___14089 = arguments.length;
  var i__8374__auto___14090 = 0;
  while (true) {
    if (i__8374__auto___14090 < len__8373__auto___14089) {
      args14019.push(arguments[i__8374__auto___14090]);
      var G__14091 = i__8374__auto___14090 + 1;
      i__8374__auto___14090 = G__14091;
      continue;
    } else {
    }
    break;
  }
  var G__14021 = args14019.length;
  switch(G__14021) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args14019.length)].join(""));
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__11377__auto___14093 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___14093, out) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___14093, out) {
          return function(state_14059) {
            var state_val_14060 = state_14059[1];
            if (state_val_14060 === 7) {
              var inst_14055 = state_14059[2];
              var state_14059__$1 = state_14059;
              var statearr_14061_14094 = state_14059__$1;
              statearr_14061_14094[2] = inst_14055;
              statearr_14061_14094[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14060 === 1) {
                var inst_14022 = new Array(n);
                var inst_14023 = inst_14022;
                var inst_14024 = 0;
                var state_14059__$1 = function() {
                  var statearr_14062 = state_14059;
                  statearr_14062[7] = inst_14023;
                  statearr_14062[8] = inst_14024;
                  return statearr_14062;
                }();
                var statearr_14063_14095 = state_14059__$1;
                statearr_14063_14095[2] = null;
                statearr_14063_14095[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14060 === 4) {
                  var inst_14027 = state_14059[9];
                  var inst_14027__$1 = state_14059[2];
                  var inst_14028 = inst_14027__$1 == null;
                  var inst_14029 = cljs.core.not.call(null, inst_14028);
                  var state_14059__$1 = function() {
                    var statearr_14064 = state_14059;
                    statearr_14064[9] = inst_14027__$1;
                    return statearr_14064;
                  }();
                  if (inst_14029) {
                    var statearr_14065_14096 = state_14059__$1;
                    statearr_14065_14096[1] = 5;
                  } else {
                    var statearr_14066_14097 = state_14059__$1;
                    statearr_14066_14097[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14060 === 15) {
                    var inst_14049 = state_14059[2];
                    var state_14059__$1 = state_14059;
                    var statearr_14067_14098 = state_14059__$1;
                    statearr_14067_14098[2] = inst_14049;
                    statearr_14067_14098[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14060 === 13) {
                      var state_14059__$1 = state_14059;
                      var statearr_14068_14099 = state_14059__$1;
                      statearr_14068_14099[2] = null;
                      statearr_14068_14099[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14060 === 6) {
                        var inst_14024 = state_14059[8];
                        var inst_14045 = inst_14024 > 0;
                        var state_14059__$1 = state_14059;
                        if (cljs.core.truth_(inst_14045)) {
                          var statearr_14069_14100 = state_14059__$1;
                          statearr_14069_14100[1] = 12;
                        } else {
                          var statearr_14070_14101 = state_14059__$1;
                          statearr_14070_14101[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14060 === 3) {
                          var inst_14057 = state_14059[2];
                          var state_14059__$1 = state_14059;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14059__$1, inst_14057);
                        } else {
                          if (state_val_14060 === 12) {
                            var inst_14023 = state_14059[7];
                            var inst_14047 = cljs.core.vec.call(null, inst_14023);
                            var state_14059__$1 = state_14059;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14059__$1, 15, out, inst_14047);
                          } else {
                            if (state_val_14060 === 2) {
                              var state_14059__$1 = state_14059;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14059__$1, 4, ch);
                            } else {
                              if (state_val_14060 === 11) {
                                var inst_14039 = state_14059[2];
                                var inst_14040 = new Array(n);
                                var inst_14023 = inst_14040;
                                var inst_14024 = 0;
                                var state_14059__$1 = function() {
                                  var statearr_14071 = state_14059;
                                  statearr_14071[7] = inst_14023;
                                  statearr_14071[10] = inst_14039;
                                  statearr_14071[8] = inst_14024;
                                  return statearr_14071;
                                }();
                                var statearr_14072_14102 = state_14059__$1;
                                statearr_14072_14102[2] = null;
                                statearr_14072_14102[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14060 === 9) {
                                  var inst_14023 = state_14059[7];
                                  var inst_14037 = cljs.core.vec.call(null, inst_14023);
                                  var state_14059__$1 = state_14059;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14059__$1, 11, out, inst_14037);
                                } else {
                                  if (state_val_14060 === 5) {
                                    var inst_14027 = state_14059[9];
                                    var inst_14023 = state_14059[7];
                                    var inst_14024 = state_14059[8];
                                    var inst_14032 = state_14059[11];
                                    var inst_14031 = inst_14023[inst_14024] = inst_14027;
                                    var inst_14032__$1 = inst_14024 + 1;
                                    var inst_14033 = inst_14032__$1 < n;
                                    var state_14059__$1 = function() {
                                      var statearr_14073 = state_14059;
                                      statearr_14073[12] = inst_14031;
                                      statearr_14073[11] = inst_14032__$1;
                                      return statearr_14073;
                                    }();
                                    if (cljs.core.truth_(inst_14033)) {
                                      var statearr_14074_14103 = state_14059__$1;
                                      statearr_14074_14103[1] = 8;
                                    } else {
                                      var statearr_14075_14104 = state_14059__$1;
                                      statearr_14075_14104[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14060 === 14) {
                                      var inst_14052 = state_14059[2];
                                      var inst_14053 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_14059__$1 = function() {
                                        var statearr_14077 = state_14059;
                                        statearr_14077[13] = inst_14052;
                                        return statearr_14077;
                                      }();
                                      var statearr_14078_14105 = state_14059__$1;
                                      statearr_14078_14105[2] = inst_14053;
                                      statearr_14078_14105[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14060 === 10) {
                                        var inst_14043 = state_14059[2];
                                        var state_14059__$1 = state_14059;
                                        var statearr_14079_14106 = state_14059__$1;
                                        statearr_14079_14106[2] = inst_14043;
                                        statearr_14079_14106[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14060 === 8) {
                                          var inst_14023 = state_14059[7];
                                          var inst_14032 = state_14059[11];
                                          var tmp14076 = inst_14023;
                                          var inst_14023__$1 = tmp14076;
                                          var inst_14024 = inst_14032;
                                          var state_14059__$1 = function() {
                                            var statearr_14080 = state_14059;
                                            statearr_14080[7] = inst_14023__$1;
                                            statearr_14080[8] = inst_14024;
                                            return statearr_14080;
                                          }();
                                          var statearr_14081_14107 = state_14059__$1;
                                          statearr_14081_14107[2] = null;
                                          statearr_14081_14107[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___14093, out);
        return function(switch__11265__auto__, c__11377__auto___14093, out) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_14085 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14085[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_14085[1] = 1;
              return statearr_14085;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_14059) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_14059);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e14086) {
                    if (e14086 instanceof Object) {
                      var ex__11269__auto__ = e14086;
                      var statearr_14087_14108 = state_14059;
                      statearr_14087_14108[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14059);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14086;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14109 = state_14059;
                  state_14059 = G__14109;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_14059) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_14059);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___14093, out);
      }();
      var state__11379__auto__ = function() {
        var statearr_14088 = f__11378__auto__.call(null);
        statearr_14088[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___14093;
        return statearr_14088;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___14093, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by(var_args) {
  var args14110 = [];
  var len__8373__auto___14184 = arguments.length;
  var i__8374__auto___14185 = 0;
  while (true) {
    if (i__8374__auto___14185 < len__8373__auto___14184) {
      args14110.push(arguments[i__8374__auto___14185]);
      var G__14186 = i__8374__auto___14185 + 1;
      i__8374__auto___14185 = G__14186;
      continue;
    } else {
    }
    break;
  }
  var G__14112 = args14110.length;
  switch(G__14112) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args14110.length)].join(""));
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__11377__auto___14188 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___14188, out) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto___14188, out) {
          return function(state_14154) {
            var state_val_14155 = state_14154[1];
            if (state_val_14155 === 7) {
              var inst_14150 = state_14154[2];
              var state_14154__$1 = state_14154;
              var statearr_14156_14189 = state_14154__$1;
              statearr_14156_14189[2] = inst_14150;
              statearr_14156_14189[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14155 === 1) {
                var inst_14113 = [];
                var inst_14114 = inst_14113;
                var inst_14115 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_14154__$1 = function() {
                  var statearr_14157 = state_14154;
                  statearr_14157[7] = inst_14114;
                  statearr_14157[8] = inst_14115;
                  return statearr_14157;
                }();
                var statearr_14158_14190 = state_14154__$1;
                statearr_14158_14190[2] = null;
                statearr_14158_14190[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14155 === 4) {
                  var inst_14118 = state_14154[9];
                  var inst_14118__$1 = state_14154[2];
                  var inst_14119 = inst_14118__$1 == null;
                  var inst_14120 = cljs.core.not.call(null, inst_14119);
                  var state_14154__$1 = function() {
                    var statearr_14159 = state_14154;
                    statearr_14159[9] = inst_14118__$1;
                    return statearr_14159;
                  }();
                  if (inst_14120) {
                    var statearr_14160_14191 = state_14154__$1;
                    statearr_14160_14191[1] = 5;
                  } else {
                    var statearr_14161_14192 = state_14154__$1;
                    statearr_14161_14192[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14155 === 15) {
                    var inst_14144 = state_14154[2];
                    var state_14154__$1 = state_14154;
                    var statearr_14162_14193 = state_14154__$1;
                    statearr_14162_14193[2] = inst_14144;
                    statearr_14162_14193[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14155 === 13) {
                      var state_14154__$1 = state_14154;
                      var statearr_14163_14194 = state_14154__$1;
                      statearr_14163_14194[2] = null;
                      statearr_14163_14194[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14155 === 6) {
                        var inst_14114 = state_14154[7];
                        var inst_14139 = inst_14114.length;
                        var inst_14140 = inst_14139 > 0;
                        var state_14154__$1 = state_14154;
                        if (cljs.core.truth_(inst_14140)) {
                          var statearr_14164_14195 = state_14154__$1;
                          statearr_14164_14195[1] = 12;
                        } else {
                          var statearr_14165_14196 = state_14154__$1;
                          statearr_14165_14196[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14155 === 3) {
                          var inst_14152 = state_14154[2];
                          var state_14154__$1 = state_14154;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14154__$1, inst_14152);
                        } else {
                          if (state_val_14155 === 12) {
                            var inst_14114 = state_14154[7];
                            var inst_14142 = cljs.core.vec.call(null, inst_14114);
                            var state_14154__$1 = state_14154;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14154__$1, 15, out, inst_14142);
                          } else {
                            if (state_val_14155 === 2) {
                              var state_14154__$1 = state_14154;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14154__$1, 4, ch);
                            } else {
                              if (state_val_14155 === 11) {
                                var inst_14122 = state_14154[10];
                                var inst_14118 = state_14154[9];
                                var inst_14132 = state_14154[2];
                                var inst_14133 = [];
                                var inst_14134 = inst_14133.push(inst_14118);
                                var inst_14114 = inst_14133;
                                var inst_14115 = inst_14122;
                                var state_14154__$1 = function() {
                                  var statearr_14166 = state_14154;
                                  statearr_14166[11] = inst_14134;
                                  statearr_14166[7] = inst_14114;
                                  statearr_14166[12] = inst_14132;
                                  statearr_14166[8] = inst_14115;
                                  return statearr_14166;
                                }();
                                var statearr_14167_14197 = state_14154__$1;
                                statearr_14167_14197[2] = null;
                                statearr_14167_14197[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14155 === 9) {
                                  var inst_14114 = state_14154[7];
                                  var inst_14130 = cljs.core.vec.call(null, inst_14114);
                                  var state_14154__$1 = state_14154;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14154__$1, 11, out, inst_14130);
                                } else {
                                  if (state_val_14155 === 5) {
                                    var inst_14122 = state_14154[10];
                                    var inst_14118 = state_14154[9];
                                    var inst_14115 = state_14154[8];
                                    var inst_14122__$1 = f.call(null, inst_14118);
                                    var inst_14123 = cljs.core._EQ_.call(null, inst_14122__$1, inst_14115);
                                    var inst_14124 = cljs.core.keyword_identical_QMARK_.call(null, inst_14115, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_14125 = inst_14123 || inst_14124;
                                    var state_14154__$1 = function() {
                                      var statearr_14168 = state_14154;
                                      statearr_14168[10] = inst_14122__$1;
                                      return statearr_14168;
                                    }();
                                    if (cljs.core.truth_(inst_14125)) {
                                      var statearr_14169_14198 = state_14154__$1;
                                      statearr_14169_14198[1] = 8;
                                    } else {
                                      var statearr_14170_14199 = state_14154__$1;
                                      statearr_14170_14199[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14155 === 14) {
                                      var inst_14147 = state_14154[2];
                                      var inst_14148 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_14154__$1 = function() {
                                        var statearr_14172 = state_14154;
                                        statearr_14172[13] = inst_14147;
                                        return statearr_14172;
                                      }();
                                      var statearr_14173_14200 = state_14154__$1;
                                      statearr_14173_14200[2] = inst_14148;
                                      statearr_14173_14200[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14155 === 10) {
                                        var inst_14137 = state_14154[2];
                                        var state_14154__$1 = state_14154;
                                        var statearr_14174_14201 = state_14154__$1;
                                        statearr_14174_14201[2] = inst_14137;
                                        statearr_14174_14201[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14155 === 8) {
                                          var inst_14122 = state_14154[10];
                                          var inst_14114 = state_14154[7];
                                          var inst_14118 = state_14154[9];
                                          var inst_14127 = inst_14114.push(inst_14118);
                                          var tmp14171 = inst_14114;
                                          var inst_14114__$1 = tmp14171;
                                          var inst_14115 = inst_14122;
                                          var state_14154__$1 = function() {
                                            var statearr_14175 = state_14154;
                                            statearr_14175[14] = inst_14127;
                                            statearr_14175[7] = inst_14114__$1;
                                            statearr_14175[8] = inst_14115;
                                            return statearr_14175;
                                          }();
                                          var statearr_14176_14202 = state_14154__$1;
                                          statearr_14176_14202[2] = null;
                                          statearr_14176_14202[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__11377__auto___14188, out);
        return function(switch__11265__auto__, c__11377__auto___14188, out) {
          return function() {
            var cljs$core$async$state_machine__11266__auto__ = null;
            var cljs$core$async$state_machine__11266__auto____0 = function() {
              var statearr_14180 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14180[0] = cljs$core$async$state_machine__11266__auto__;
              statearr_14180[1] = 1;
              return statearr_14180;
            };
            var cljs$core$async$state_machine__11266__auto____1 = function(state_14154) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_14154);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e14181) {
                    if (e14181 instanceof Object) {
                      var ex__11269__auto__ = e14181;
                      var statearr_14182_14203 = state_14154;
                      statearr_14182_14203[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14154);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14181;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14204 = state_14154;
                  state_14154 = G__14204;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__11266__auto__ = function(state_14154) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__11266__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__11266__auto____1.call(this, state_14154);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__11266__auto____0;
            cljs$core$async$state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__11266__auto____1;
            return cljs$core$async$state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto___14188, out);
      }();
      var state__11379__auto__ = function() {
        var statearr_14183 = f__11378__auto__.call(null);
        statearr_14183[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___14188;
        return statearr_14183;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto___14188, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("cljs_http.core");
goog.require("cljs.core");
goog.require("goog.net.EventType");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.XhrIo");
goog.require("goog.net.Jsonp");
goog.require("cljs_http.util");
goog.require("cljs.core.async");
goog.require("clojure.string");
cljs_http.core.pending_requests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs_http.core.abort_BANG_ = function cljs_http$core$abort_BANG_(channel) {
  var temp__4657__auto__ = cljs.core.deref.call(null, cljs_http.core.pending_requests).call(null, channel);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var req = temp__4657__auto__;
    cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
    cljs.core.async.close_BANG_.call(null, channel);
    if (cljs.core.truth_(req.hasOwnProperty("abort"))) {
      return req.abort();
    } else {
      return (new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588)).cljs$core$IFn$_invoke$arity$1(req).cancel((new cljs.core.Keyword(null, "request", "request", 1772954723)).cljs$core$IFn$_invoke$arity$1(req));
    }
  } else {
    return null;
  }
};
cljs_http.core.aborted_QMARK_ = function cljs_http$core$aborted_QMARK_(xhr) {
  return cljs.core._EQ_.call(null, xhr.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
cljs_http.core.apply_default_headers_BANG_ = function cljs_http$core$apply_default_headers_BANG_(xhr, headers) {
  var formatted_h = cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, headers)), cljs.core.vals.call(null, headers));
  return cljs.core.dorun.call(null, cljs.core.map.call(null, function(formatted_h) {
    return function(p__14211) {
      var vec__14212 = p__14211;
      var k = cljs.core.nth.call(null, vec__14212, 0, null);
      var v = cljs.core.nth.call(null, vec__14212, 1, null);
      return xhr.headers.set(k, v);
    };
  }(formatted_h), formatted_h));
};
cljs_http.core.apply_response_type_BANG_ = function cljs_http$core$apply_response_type_BANG_(xhr, response_type) {
  return xhr.setResponseType(function() {
    var G__14216 = response_type;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "array-buffer", "array-buffer", 519008380), G__14216)) {
      return goog.net.XhrIo.ResponseType.ARRAY_BUFFER;
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "blob", "blob", 1636965233), G__14216)) {
        return goog.net.XhrIo.ResponseType.BLOB;
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "document", "document", -1329188687), G__14216)) {
          return goog.net.XhrIo.ResponseType.DOCUMENT;
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "text", "text", -1790561697), G__14216)) {
            return goog.net.XhrIo.ResponseType.TEXT;
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), G__14216)) {
              return goog.net.XhrIo.ResponseType.DEFAULT;
            } else {
              if (cljs.core._EQ_.call(null, null, G__14216)) {
                return goog.net.XhrIo.ResponseType.DEFAULT;
              } else {
                throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(response_type)].join(""));
              }
            }
          }
        }
      }
    }
  }());
};
cljs_http.core.build_xhr = function cljs_http$core$build_xhr(p__14217) {
  var map__14221 = p__14217;
  var map__14221__$1 = (!(map__14221 == null) ? map__14221.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14221.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14221) : map__14221;
  var request = map__14221__$1;
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__14221__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var default_headers = cljs.core.get.call(null, map__14221__$1, new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094));
  var response_type = cljs.core.get.call(null, map__14221__$1, new cljs.core.Keyword(null, "response-type", "response-type", -1493770458));
  var timeout = function() {
    var or__7260__auto__ = (new cljs.core.Keyword(null, "timeout", "timeout", -318625318)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return 0;
    }
  }();
  var send_credentials = with_credentials_QMARK_ == null ? true : with_credentials_QMARK_;
  var G__14223 = new goog.net.XhrIo;
  cljs_http.core.apply_default_headers_BANG_.call(null, G__14223, default_headers);
  cljs_http.core.apply_response_type_BANG_.call(null, G__14223, response_type);
  G__14223.setTimeoutInterval(timeout);
  G__14223.setWithCredentials(send_credentials);
  return G__14223;
};
cljs_http.core.error_kw = cljs.core.PersistentHashMap.fromArrays([0, 7, 1, 4, 6, 3, 2, 9, 5, 8], [new cljs.core.Keyword(null, "no-error", "no-error", 1984610064), new cljs.core.Keyword(null, "abort", "abort", 521193198), new cljs.core.Keyword(null, "access-denied", "access-denied", 959449406), new cljs.core.Keyword(null, "custom-error", "custom-error", -1565161123), new cljs.core.Keyword(null, "http-error", "http-error", -1040049553), new cljs.core.Keyword(null, "ff-silent-error", "ff-silent-error", 
189390514), new cljs.core.Keyword(null, "file-not-found", "file-not-found", -65398940), new cljs.core.Keyword(null, "offline", "offline", -107631935), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "timeout", "timeout", -318625318)]);
cljs_http.core.xhr = function cljs_http$core$xhr(p__14224) {
  var map__14252 = p__14224;
  var map__14252__$1 = (!(map__14252 == null) ? map__14252.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14252.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14252) : map__14252;
  var request = map__14252__$1;
  var request_method = cljs.core.get.call(null, map__14252__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  var headers = cljs.core.get.call(null, map__14252__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var body = cljs.core.get.call(null, map__14252__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__14252__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var cancel = cljs.core.get.call(null, map__14252__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var progress = cljs.core.get.call(null, map__14252__$1, new cljs.core.Keyword(null, "progress", "progress", 244323547));
  var channel = cljs.core.async.chan.call(null);
  var request_url = cljs_http.util.build_url.call(null, request);
  var method = cljs.core.name.call(null, function() {
    var or__7260__auto__ = request_method;
    if (cljs.core.truth_(or__7260__auto__)) {
      return or__7260__auto__;
    } else {
      return new cljs.core.Keyword(null, "get", "get", 1683182755);
    }
  }());
  var headers__$1 = cljs_http.util.build_headers.call(null, headers);
  var xhr = cljs_http.core.build_xhr.call(null, request);
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, xhr);
  xhr.listen(goog.net.EventType.COMPLETE, function(channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress) {
    return function(evt) {
      var target = evt.target;
      var response = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "status", "status", -1997798413), target.getStatus(), new cljs.core.Keyword(null, "success", "success", 1890645906), target.isSuccess(), new cljs.core.Keyword(null, "body", "body", -2049205669), target.getResponse(), new cljs.core.Keyword(null, "headers", "headers", -835030129), cljs_http.util.parse_headers.call(null, target.getAllResponseHeaders()), new cljs.core.Keyword(null, "trace-redirects", "trace-redirects", 
      -1149427907), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [request_url, target.getLastUri()], null), new cljs.core.Keyword(null, "error-code", "error-code", 180497232), cljs_http.core.error_kw.call(null, target.getLastErrorCode()), new cljs.core.Keyword(null, "error-text", "error-text", 2021893718), target.getLastError()], null);
      if (cljs.core.not.call(null, cljs_http.core.aborted_QMARK_.call(null, xhr))) {
        cljs.core.async.put_BANG_.call(null, channel, response);
      } else {
      }
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress));
  if (cljs.core.truth_(progress)) {
    var listener_14279 = function(channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress) {
      return function(direction, evt) {
        return cljs.core.async.put_BANG_.call(null, progress, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "direction", "direction", -633359395), direction, new cljs.core.Keyword(null, "loaded", "loaded", -1246482293), evt.loaded], null), cljs.core.truth_(evt.lengthComputable) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "total", "total", 1916810418), evt.total], null) : null));
      };
    }(channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress);
    var G__14254_14280 = xhr;
    G__14254_14280.setProgressEventsEnabled(true);
    G__14254_14280.listen(goog.net.EventType.UPLOAD_PROGRESS, cljs.core.partial.call(null, listener_14279, new cljs.core.Keyword(null, "upload", "upload", -255769218)));
    G__14254_14280.listen(goog.net.EventType.DOWNLOAD_PROGRESS, cljs.core.partial.call(null, listener_14279, new cljs.core.Keyword(null, "download", "download", -300081668)));
  } else {
  }
  xhr.send(request_url, method, body, headers__$1);
  if (cljs.core.truth_(cancel)) {
    var c__11377__auto___14281 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___14281, channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress) {
      return function() {
        var f__11378__auto__ = function() {
          var switch__11265__auto__ = function(c__11377__auto___14281, channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress) {
            return function(state_14265) {
              var state_val_14266 = state_14265[1];
              if (state_val_14266 === 1) {
                var state_14265__$1 = state_14265;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14265__$1, 2, cancel);
              } else {
                if (state_val_14266 === 2) {
                  var inst_14256 = state_14265[2];
                  var inst_14257 = xhr.isComplete();
                  var inst_14258 = cljs.core.not.call(null, inst_14257);
                  var state_14265__$1 = function() {
                    var statearr_14267 = state_14265;
                    statearr_14267[7] = inst_14256;
                    return statearr_14267;
                  }();
                  if (inst_14258) {
                    var statearr_14268_14282 = state_14265__$1;
                    statearr_14268_14282[1] = 3;
                  } else {
                    var statearr_14269_14283 = state_14265__$1;
                    statearr_14269_14283[1] = 4;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14266 === 3) {
                    var inst_14260 = xhr.abort();
                    var state_14265__$1 = state_14265;
                    var statearr_14270_14284 = state_14265__$1;
                    statearr_14270_14284[2] = inst_14260;
                    statearr_14270_14284[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14266 === 4) {
                      var state_14265__$1 = state_14265;
                      var statearr_14271_14285 = state_14265__$1;
                      statearr_14271_14285[2] = null;
                      statearr_14271_14285[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14266 === 5) {
                        var inst_14263 = state_14265[2];
                        var state_14265__$1 = state_14265;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14265__$1, inst_14263);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(c__11377__auto___14281, channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress);
          return function(switch__11265__auto__, c__11377__auto___14281, channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress) {
            return function() {
              var cljs_http$core$xhr_$_state_machine__11266__auto__ = null;
              var cljs_http$core$xhr_$_state_machine__11266__auto____0 = function() {
                var statearr_14275 = [null, null, null, null, null, null, null, null];
                statearr_14275[0] = cljs_http$core$xhr_$_state_machine__11266__auto__;
                statearr_14275[1] = 1;
                return statearr_14275;
              };
              var cljs_http$core$xhr_$_state_machine__11266__auto____1 = function(state_14265) {
                while (true) {
                  var ret_value__11267__auto__ = function() {
                    try {
                      while (true) {
                        var result__11268__auto__ = switch__11265__auto__.call(null, state_14265);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11268__auto__;
                        }
                        break;
                      }
                    } catch (e14276) {
                      if (e14276 instanceof Object) {
                        var ex__11269__auto__ = e14276;
                        var statearr_14277_14286 = state_14265;
                        statearr_14277_14286[5] = ex__11269__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14265);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14276;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14287 = state_14265;
                    state_14265 = G__14287;
                    continue;
                  } else {
                    return ret_value__11267__auto__;
                  }
                  break;
                }
              };
              cljs_http$core$xhr_$_state_machine__11266__auto__ = function(state_14265) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$core$xhr_$_state_machine__11266__auto____0.call(this);
                  case 1:
                    return cljs_http$core$xhr_$_state_machine__11266__auto____1.call(this, state_14265);
                }
                throw new Error("Invalid arity: " + (arguments.length - 1));
              };
              cljs_http$core$xhr_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$core$xhr_$_state_machine__11266__auto____0;
              cljs_http$core$xhr_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$core$xhr_$_state_machine__11266__auto____1;
              return cljs_http$core$xhr_$_state_machine__11266__auto__;
            }();
          }(switch__11265__auto__, c__11377__auto___14281, channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress);
        }();
        var state__11379__auto__ = function() {
          var statearr_14278 = f__11378__auto__.call(null);
          statearr_14278[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___14281;
          return statearr_14278;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
      };
    }(c__11377__auto___14281, channel, request_url, method, headers__$1, xhr, map__14252, map__14252__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel, progress));
  } else {
  }
  return channel;
};
cljs_http.core.jsonp = function cljs_http$core$jsonp(p__14288) {
  var map__14305 = p__14288;
  var map__14305__$1 = (!(map__14305 == null) ? map__14305.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14305.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14305) : map__14305;
  var request = map__14305__$1;
  var timeout = cljs.core.get.call(null, map__14305__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var callback_name = cljs.core.get.call(null, map__14305__$1, new cljs.core.Keyword(null, "callback-name", "callback-name", 336964714));
  var cancel = cljs.core.get.call(null, map__14305__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var keywordize_keys_QMARK_ = cljs.core.get.call(null, map__14305__$1, new cljs.core.Keyword(null, "keywordize-keys?", "keywordize-keys?", -254545987), true);
  var channel = cljs.core.async.chan.call(null);
  var jsonp = new goog.net.Jsonp(cljs_http.util.build_url.call(null, request), callback_name);
  jsonp.setRequestTimeout(timeout);
  var req_14321 = jsonp.send(null, function(channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
    return function cljs_http$core$jsonp_$_success_callback(data) {
      var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), 200, new cljs.core.Keyword(null, "success", "success", 1890645906), true, new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.js__GT_clj.call(null, data, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywordize_keys_QMARK_)], null);
      cljs.core.async.put_BANG_.call(null, channel, response);
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_), function(channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
    return function cljs_http$core$jsonp_$_error_callback() {
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_));
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588), jsonp, new cljs.core.Keyword(null, "request", "request", 1772954723), req_14321], null));
  if (cljs.core.truth_(cancel)) {
    var c__11377__auto___14322 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto___14322, req_14321, channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
      return function() {
        var f__11378__auto__ = function() {
          var switch__11265__auto__ = function(c__11377__auto___14322, req_14321, channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
            return function(state_14311) {
              var state_val_14312 = state_14311[1];
              if (state_val_14312 === 1) {
                var state_14311__$1 = state_14311;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14311__$1, 2, cancel);
              } else {
                if (state_val_14312 === 2) {
                  var inst_14308 = state_14311[2];
                  var inst_14309 = jsonp.cancel(req_14321);
                  var state_14311__$1 = function() {
                    var statearr_14313 = state_14311;
                    statearr_14313[7] = inst_14308;
                    return statearr_14313;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14311__$1, inst_14309);
                } else {
                  return null;
                }
              }
            };
          }(c__11377__auto___14322, req_14321, channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_);
          return function(switch__11265__auto__, c__11377__auto___14322, req_14321, channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
            return function() {
              var cljs_http$core$jsonp_$_state_machine__11266__auto__ = null;
              var cljs_http$core$jsonp_$_state_machine__11266__auto____0 = function() {
                var statearr_14317 = [null, null, null, null, null, null, null, null];
                statearr_14317[0] = cljs_http$core$jsonp_$_state_machine__11266__auto__;
                statearr_14317[1] = 1;
                return statearr_14317;
              };
              var cljs_http$core$jsonp_$_state_machine__11266__auto____1 = function(state_14311) {
                while (true) {
                  var ret_value__11267__auto__ = function() {
                    try {
                      while (true) {
                        var result__11268__auto__ = switch__11265__auto__.call(null, state_14311);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__11268__auto__;
                        }
                        break;
                      }
                    } catch (e14318) {
                      if (e14318 instanceof Object) {
                        var ex__11269__auto__ = e14318;
                        var statearr_14319_14323 = state_14311;
                        statearr_14319_14323[5] = ex__11269__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14311);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e14318;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__14324 = state_14311;
                    state_14311 = G__14324;
                    continue;
                  } else {
                    return ret_value__11267__auto__;
                  }
                  break;
                }
              };
              cljs_http$core$jsonp_$_state_machine__11266__auto__ = function(state_14311) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$core$jsonp_$_state_machine__11266__auto____0.call(this);
                  case 1:
                    return cljs_http$core$jsonp_$_state_machine__11266__auto____1.call(this, state_14311);
                }
                throw new Error("Invalid arity: " + (arguments.length - 1));
              };
              cljs_http$core$jsonp_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$core$jsonp_$_state_machine__11266__auto____0;
              cljs_http$core$jsonp_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$core$jsonp_$_state_machine__11266__auto____1;
              return cljs_http$core$jsonp_$_state_machine__11266__auto__;
            }();
          }(switch__11265__auto__, c__11377__auto___14322, req_14321, channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_);
        }();
        var state__11379__auto__ = function() {
          var statearr_14320 = f__11378__auto__.call(null);
          statearr_14320[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto___14322;
          return statearr_14320;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
      };
    }(c__11377__auto___14322, req_14321, channel, jsonp, map__14305, map__14305__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_));
  } else {
  }
  return channel;
};
cljs_http.core.request = function cljs_http$core$request(p__14325) {
  var map__14328 = p__14325;
  var map__14328__$1 = (!(map__14328 == null) ? map__14328.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14328.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14328) : map__14328;
  var request = map__14328__$1;
  var request_method = cljs.core.get.call(null, map__14328__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  if (cljs.core._EQ_.call(null, request_method, new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588))) {
    return cljs_http.core.jsonp.call(null, request);
  } else {
    return cljs_http.core.xhr.call(null, request);
  }
};
goog.provide("cljs_http.client");
goog.require("cljs.core");
goog.require("cljs_http.core");
goog.require("cljs_http.util");
goog.require("cljs.core.async");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("goog.Uri");
goog.require("no.en.core");
cljs_http.client.if_pos = function cljs_http$client$if_pos(v) {
  if (cljs.core.truth_(function() {
    var and__7248__auto__ = v;
    if (cljs.core.truth_(and__7248__auto__)) {
      return v > 0;
    } else {
      return and__7248__auto__;
    }
  }())) {
    return v;
  } else {
    return null;
  }
};
cljs_http.client.parse_query_params = function cljs_http$client$parse_query_params(s) {
  if (!clojure.string.blank_QMARK_.call(null, s)) {
    return cljs.core.reduce.call(null, function(p1__14333_SHARP_, p2__14332_SHARP_) {
      var vec__14337 = clojure.string.split.call(null, p2__14332_SHARP_, /=/);
      var k = cljs.core.nth.call(null, vec__14337, 0, null);
      var v = cljs.core.nth.call(null, vec__14337, 1, null);
      return cljs.core.assoc.call(null, p1__14333_SHARP_, cljs.core.keyword.call(null, no.en.core.url_decode.call(null, k)), no.en.core.url_decode.call(null, v));
    }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(""), /&/));
  } else {
    return null;
  }
};
cljs_http.client.parse_url = function cljs_http$client$parse_url(url) {
  if (!clojure.string.blank_QMARK_.call(null, url)) {
    var uri = goog.Uri.parse(url);
    var query_data = uri.getQueryData();
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "scheme", "scheme", 90199613), cljs.core.keyword.call(null, uri.getScheme()), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), uri.getDomain(), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), cljs_http.client.if_pos.call(null, uri.getPort()), new cljs.core.Keyword(null, "uri", "uri", -774711847), uri.getPath(), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), 
    cljs.core.not.call(null, query_data.isEmpty()) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_data)].join("") : null, new cljs.core.Keyword(null, "query-params", "query-params", 900640534), cljs.core.not.call(null, query_data.isEmpty()) ? cljs_http.client.parse_query_params.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_data)].join("")) : null], null);
  } else {
    return null;
  }
};
cljs_http.client.unexceptional_status_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [205, null, 206, null, 300, null, 204, null, 307, null, 303, null, 301, null, 201, null, 302, null, 202, null, 200, null, 203, null, 207, null], null), null);
cljs_http.client.encode_val = function cljs_http$client$encode_val(k, v) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(no.en.core.url_encode.call(null, cljs.core.name.call(null, k))), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\x3d"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(no.en.core.url_encode.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(v)].join("")))].join("");
};
cljs_http.client.encode_vals = function cljs_http$client$encode_vals(k, vs) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__14340_SHARP_) {
    return cljs_http.client.encode_val.call(null, k, p1__14340_SHARP_);
  }, vs));
};
cljs_http.client.encode_param = function cljs_http$client$encode_param(p__14341) {
  var vec__14345 = p__14341;
  var k = cljs.core.nth.call(null, vec__14345, 0, null);
  var v = cljs.core.nth.call(null, vec__14345, 1, null);
  if (cljs.core.coll_QMARK_.call(null, v)) {
    return cljs_http.client.encode_vals.call(null, k, v);
  } else {
    return cljs_http.client.encode_val.call(null, k, v);
  }
};
cljs_http.client.generate_query_string = function cljs_http$client$generate_query_string(params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, cljs_http.client.encode_param, params));
};
cljs_http.client.regex_char_esc_smap = function() {
  var esc_chars = "()*\x26^%$#!+";
  return cljs.core.zipmap.call(null, esc_chars, cljs.core.map.call(null, function(esc_chars) {
    return function(p1__14348_SHARP_) {
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("\\"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__14348_SHARP_)].join("");
    };
  }(esc_chars), esc_chars));
}();
cljs_http.client.escape_special = function cljs_http$client$escape_special(string) {
  return cljs.core.reduce.call(null, cljs.core.str, cljs.core.replace.call(null, cljs_http.client.regex_char_esc_smap, string));
};
cljs_http.client.decode_body = function cljs_http$client$decode_body(response, decode_fn, content_type, request_method) {
  if (cljs.core.truth_(function() {
    var and__7248__auto__ = cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "head", "head", -771383919), request_method);
    if (and__7248__auto__) {
      var and__7248__auto____$1 = cljs.core.not_EQ_.call(null, 204, (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(response));
      if (and__7248__auto____$1) {
        return cljs.core.re_find.call(null, cljs.core.re_pattern.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("(?i)"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs_http.client.escape_special.call(null, content_type))].join("")), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.get.call(null, (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(response), "content-type", ""))].join(""));
      } else {
        return and__7248__auto____$1;
      }
    } else {
      return and__7248__auto__;
    }
  }())) {
    return cljs.core.update_in.call(null, response, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669)], null), decode_fn);
  } else {
    return response;
  }
};
cljs_http.client.wrap_edn_params = function cljs_http$client$wrap_edn_params(client) {
  return function(request) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var params = temp__4655__auto__;
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/edn"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.pr_str.call(null, params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_edn_response = function cljs_http$client$wrap_edn_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__14349_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__14349_SHARP_, cljs.reader.read_string, "application/edn", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_default_headers = function cljs_http$client$wrap_default_headers(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14356 = arguments.length;
  var i__8374__auto___14357 = 0;
  while (true) {
    if (i__8374__auto___14357 < len__8373__auto___14356) {
      args__8380__auto__.push(arguments[i__8374__auto___14357]);
      var G__14358 = i__8374__auto___14357 + 1;
      i__8374__auto___14357 = G__14358;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic = function(client, p__14352) {
  var vec__14353 = p__14352;
  var default_headers = cljs.core.nth.call(null, vec__14353, 0, null);
  return function(vec__14353, default_headers) {
    return function(request) {
      var temp__4655__auto__ = function() {
        var or__7260__auto__ = (new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return default_headers;
        }
      }();
      if (cljs.core.truth_(temp__4655__auto__)) {
        var default_headers__$1 = temp__4655__auto__;
        return client.call(null, cljs.core.assoc.call(null, request, new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094), default_headers__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__14353, default_headers);
};
cljs_http.client.wrap_default_headers.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_default_headers.cljs$lang$applyTo = function(seq14350) {
  var G__14351 = cljs.core.first.call(null, seq14350);
  var seq14350__$1 = cljs.core.next.call(null, seq14350);
  return cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic(G__14351, seq14350__$1);
};
cljs_http.client.wrap_accept = function cljs_http$client$wrap_accept(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14365 = arguments.length;
  var i__8374__auto___14366 = 0;
  while (true) {
    if (i__8374__auto___14366 < len__8373__auto___14365) {
      args__8380__auto__.push(arguments[i__8374__auto___14366]);
      var G__14367 = i__8374__auto___14366 + 1;
      i__8374__auto___14366 = G__14367;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic = function(client, p__14361) {
  var vec__14362 = p__14361;
  var accept = cljs.core.nth.call(null, vec__14362, 0, null);
  return function(vec__14362, accept) {
    return function(request) {
      var temp__4655__auto__ = function() {
        var or__7260__auto__ = (new cljs.core.Keyword(null, "accept", "accept", 1874130431)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return accept;
        }
      }();
      if (cljs.core.truth_(temp__4655__auto__)) {
        var accept__$1 = temp__4655__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "accept"], null), accept__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__14362, accept);
};
cljs_http.client.wrap_accept.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_accept.cljs$lang$applyTo = function(seq14359) {
  var G__14360 = cljs.core.first.call(null, seq14359);
  var seq14359__$1 = cljs.core.next.call(null, seq14359);
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(G__14360, seq14359__$1);
};
cljs_http.client.wrap_content_type = function cljs_http$client$wrap_content_type(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14374 = arguments.length;
  var i__8374__auto___14375 = 0;
  while (true) {
    if (i__8374__auto___14375 < len__8373__auto___14374) {
      args__8380__auto__.push(arguments[i__8374__auto___14375]);
      var G__14376 = i__8374__auto___14375 + 1;
      i__8374__auto___14375 = G__14376;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic = function(client, p__14370) {
  var vec__14371 = p__14370;
  var content_type = cljs.core.nth.call(null, vec__14371, 0, null);
  return function(vec__14371, content_type) {
    return function(request) {
      var temp__4655__auto__ = function() {
        var or__7260__auto__ = (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return content_type;
        }
      }();
      if (cljs.core.truth_(temp__4655__auto__)) {
        var content_type__$1 = temp__4655__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), content_type__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__14371, content_type);
};
cljs_http.client.wrap_content_type.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_content_type.cljs$lang$applyTo = function(seq14368) {
  var G__14369 = cljs.core.first.call(null, seq14368);
  var seq14368__$1 = cljs.core.next.call(null, seq14368);
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(G__14369, seq14368__$1);
};
cljs_http.client.default_transit_opts = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "encoding", "encoding", 1728578272), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "decoding", "decoding", -568180903), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 
1050289140), cljs.core.PersistentArrayMap.EMPTY], null);
cljs_http.client.wrap_transit_params = function cljs_http$client$wrap_transit_params(client) {
  return function(request) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var params = temp__4655__auto__;
      var map__14379 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
      var map__14379__$1 = (!(map__14379 == null) ? map__14379.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14379.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14379) : map__14379;
      var encoding = cljs.core.get.call(null, map__14379__$1, new cljs.core.Keyword(null, "encoding", "encoding", 1728578272));
      var encoding_opts = cljs.core.get.call(null, map__14379__$1, new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631));
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/transit+json"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.transit_encode.call(null, params, encoding, encoding_opts)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_transit_response = function cljs_http$client$wrap_transit_response(client) {
  return function(request) {
    var map__14385 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
    var map__14385__$1 = (!(map__14385 == null) ? map__14385.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14385.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14385) : map__14385;
    var decoding = cljs.core.get.call(null, map__14385__$1, new cljs.core.Keyword(null, "decoding", "decoding", -568180903));
    var decoding_opts = cljs.core.get.call(null, map__14385__$1, new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 1050289140));
    var transit_decode = function(map__14385, map__14385__$1, decoding, decoding_opts) {
      return function(p1__14381_SHARP_) {
        return cljs_http.util.transit_decode.call(null, p1__14381_SHARP_, decoding, decoding_opts);
      };
    }(map__14385, map__14385__$1, decoding, decoding_opts);
    return cljs.core.async.map.call(null, function(map__14385, map__14385__$1, decoding, decoding_opts, transit_decode) {
      return function(p1__14382_SHARP_) {
        return cljs_http.client.decode_body.call(null, p1__14382_SHARP_, transit_decode, "application/transit+json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
      };
    }(map__14385, map__14385__$1, decoding, decoding_opts, transit_decode), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_json_params = function cljs_http$client$wrap_json_params(client) {
  return function(request) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var params = temp__4655__auto__;
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/json"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.json_encode.call(null, params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_json_response = function cljs_http$client$wrap_json_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__14387_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__14387_SHARP_, cljs_http.util.json_decode, "application/json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_query_params = function cljs_http$client$wrap_query_params(client) {
  return function(p__14391) {
    var map__14392 = p__14391;
    var map__14392__$1 = (!(map__14392 == null) ? map__14392.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14392.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14392) : map__14392;
    var req = map__14392__$1;
    var query_params = cljs.core.get.call(null, map__14392__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    if (cljs.core.truth_(query_params)) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "query-params", "query-params", 900640534)), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), cljs_http.client.generate_query_string.call(null, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_form_params = function cljs_http$client$wrap_form_params(client) {
  return function(p__14397) {
    var map__14398 = p__14397;
    var map__14398__$1 = (!(map__14398 == null) ? map__14398.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14398.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14398) : map__14398;
    var request = map__14398__$1;
    var form_params = cljs.core.get.call(null, map__14398__$1, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467));
    var request_method = cljs.core.get.call(null, map__14398__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    var headers = cljs.core.get.call(null, map__14398__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = form_params;
      if (cljs.core.truth_(and__7248__auto__)) {
        return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__7248__auto__;
      }
    }())) {
      var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/x-www-form-urlencoded"], null), headers);
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_query_string.call(null, form_params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers__$1));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.generate_form_data = function cljs_http$client$generate_form_data(params) {
  var form_data = new FormData;
  var seq__14410_14420 = cljs.core.seq.call(null, params);
  var chunk__14411_14421 = null;
  var count__14412_14422 = 0;
  var i__14413_14423 = 0;
  while (true) {
    if (i__14413_14423 < count__14412_14422) {
      var vec__14414_14424 = cljs.core._nth.call(null, chunk__14411_14421, i__14413_14423);
      var k_14425 = cljs.core.nth.call(null, vec__14414_14424, 0, null);
      var v_14426 = cljs.core.nth.call(null, vec__14414_14424, 1, null);
      if (cljs.core.coll_QMARK_.call(null, v_14426)) {
        form_data.append(cljs.core.name.call(null, k_14425), cljs.core.first.call(null, v_14426), cljs.core.second.call(null, v_14426));
      } else {
        form_data.append(cljs.core.name.call(null, k_14425), v_14426);
      }
      var G__14427 = seq__14410_14420;
      var G__14428 = chunk__14411_14421;
      var G__14429 = count__14412_14422;
      var G__14430 = i__14413_14423 + 1;
      seq__14410_14420 = G__14427;
      chunk__14411_14421 = G__14428;
      count__14412_14422 = G__14429;
      i__14413_14423 = G__14430;
      continue;
    } else {
      var temp__4657__auto___14431 = cljs.core.seq.call(null, seq__14410_14420);
      if (temp__4657__auto___14431) {
        var seq__14410_14432__$1 = temp__4657__auto___14431;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14410_14432__$1)) {
          var c__8079__auto___14433 = cljs.core.chunk_first.call(null, seq__14410_14432__$1);
          var G__14434 = cljs.core.chunk_rest.call(null, seq__14410_14432__$1);
          var G__14435 = c__8079__auto___14433;
          var G__14436 = cljs.core.count.call(null, c__8079__auto___14433);
          var G__14437 = 0;
          seq__14410_14420 = G__14434;
          chunk__14411_14421 = G__14435;
          count__14412_14422 = G__14436;
          i__14413_14423 = G__14437;
          continue;
        } else {
          var vec__14417_14438 = cljs.core.first.call(null, seq__14410_14432__$1);
          var k_14439 = cljs.core.nth.call(null, vec__14417_14438, 0, null);
          var v_14440 = cljs.core.nth.call(null, vec__14417_14438, 1, null);
          if (cljs.core.coll_QMARK_.call(null, v_14440)) {
            form_data.append(cljs.core.name.call(null, k_14439), cljs.core.first.call(null, v_14440), cljs.core.second.call(null, v_14440));
          } else {
            form_data.append(cljs.core.name.call(null, k_14439), v_14440);
          }
          var G__14441 = cljs.core.next.call(null, seq__14410_14432__$1);
          var G__14442 = null;
          var G__14443 = 0;
          var G__14444 = 0;
          seq__14410_14420 = G__14441;
          chunk__14411_14421 = G__14442;
          count__14412_14422 = G__14443;
          i__14413_14423 = G__14444;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return form_data;
};
cljs_http.client.wrap_multipart_params = function cljs_http$client$wrap_multipart_params(client) {
  return function(p__14448) {
    var map__14449 = p__14448;
    var map__14449__$1 = (!(map__14449 == null) ? map__14449.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14449.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14449) : map__14449;
    var request = map__14449__$1;
    var multipart_params = cljs.core.get.call(null, map__14449__$1, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707));
    var request_method = cljs.core.get.call(null, map__14449__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    if (cljs.core.truth_(function() {
      var and__7248__auto__ = multipart_params;
      if (cljs.core.truth_(and__7248__auto__)) {
        return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__7248__auto__;
      }
    }())) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_form_data.call(null, multipart_params)));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_method = function cljs_http$client$wrap_method(client) {
  return function(req) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "method", "method", 55703592)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var m = temp__4655__auto__;
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "method", "method", 55703592)), new cljs.core.Keyword(null, "request-method", "request-method", 1764796830), m));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_server_name = function cljs_http$client$wrap_server_name(client, server_name) {
  return function(p1__14451_SHARP_) {
    return client.call(null, cljs.core.assoc.call(null, p1__14451_SHARP_, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), server_name));
  };
};
cljs_http.client.wrap_url = function cljs_http$client$wrap_url(client) {
  return function(p__14456) {
    var map__14457 = p__14456;
    var map__14457__$1 = (!(map__14457 == null) ? map__14457.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14457.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14457) : map__14457;
    var req = map__14457__$1;
    var query_params = cljs.core.get.call(null, map__14457__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var temp__4655__auto__ = cljs_http.client.parse_url.call(null, (new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(req));
    if (cljs.core.truth_(temp__4655__auto__)) {
      var spec = temp__4655__auto__;
      return client.call(null, cljs.core.update_in.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, req, spec), new cljs.core.Keyword(null, "url", "url", 276297046)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534)], null), function(spec, temp__4655__auto__, map__14457, map__14457__$1, req, query_params) {
        return function(p1__14452_SHARP_) {
          return cljs.core.merge.call(null, p1__14452_SHARP_, query_params);
        };
      }(spec, temp__4655__auto__, map__14457, map__14457__$1, req, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_basic_auth = function cljs_http$client$wrap_basic_auth(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14465 = arguments.length;
  var i__8374__auto___14466 = 0;
  while (true) {
    if (i__8374__auto___14466 < len__8373__auto___14465) {
      args__8380__auto__.push(arguments[i__8374__auto___14466]);
      var G__14467 = i__8374__auto___14466 + 1;
      i__8374__auto___14466 = G__14467;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic = function(client, p__14461) {
  var vec__14462 = p__14461;
  var credentials = cljs.core.nth.call(null, vec__14462, 0, null);
  return function(vec__14462, credentials) {
    return function(req) {
      var credentials__$1 = function() {
        var or__7260__auto__ = (new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)).cljs$core$IFn$_invoke$arity$1(req);
        if (cljs.core.truth_(or__7260__auto__)) {
          return or__7260__auto__;
        } else {
          return credentials;
        }
      }();
      if (!cljs.core.empty_QMARK_.call(null, credentials__$1)) {
        return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), cljs_http.util.basic_auth.call(null, credentials__$1)));
      } else {
        return client.call(null, req);
      }
    };
  }(vec__14462, credentials);
};
cljs_http.client.wrap_basic_auth.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_basic_auth.cljs$lang$applyTo = function(seq14459) {
  var G__14460 = cljs.core.first.call(null, seq14459);
  var seq14459__$1 = cljs.core.next.call(null, seq14459);
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(G__14460, seq14459__$1);
};
cljs_http.client.wrap_oauth = function cljs_http$client$wrap_oauth(client) {
  return function(req) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var oauth_token = temp__4655__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Bearer "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(oauth_token)].join("")));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_channel_from_request_map = function cljs_http$client$wrap_channel_from_request_map(client) {
  return function(request) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "channel", "channel", 734187692)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var custom_channel = temp__4655__auto__;
      return cljs.core.async.pipe.call(null, client.call(null, request), custom_channel);
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_request = function cljs_http$client$wrap_request(request) {
  return cljs_http.client.wrap_default_headers.call(null, cljs_http.client.wrap_channel_from_request_map.call(null, cljs_http.client.wrap_url.call(null, cljs_http.client.wrap_method.call(null, cljs_http.client.wrap_oauth.call(null, cljs_http.client.wrap_basic_auth.call(null, cljs_http.client.wrap_query_params.call(null, cljs_http.client.wrap_content_type.call(null, cljs_http.client.wrap_json_response.call(null, cljs_http.client.wrap_json_params.call(null, cljs_http.client.wrap_transit_response.call(null, 
  cljs_http.client.wrap_transit_params.call(null, cljs_http.client.wrap_edn_response.call(null, cljs_http.client.wrap_edn_params.call(null, cljs_http.client.wrap_multipart_params.call(null, cljs_http.client.wrap_form_params.call(null, cljs_http.client.wrap_accept.call(null, request)))))))))))))))));
};
cljs_http.client.request = cljs_http.client.wrap_request.call(null, cljs_http.core.request);
cljs_http.client.delete$ = function cljs_http$client$delete(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14474 = arguments.length;
  var i__8374__auto___14475 = 0;
  while (true) {
    if (i__8374__auto___14475 < len__8373__auto___14474) {
      args__8380__auto__.push(arguments[i__8374__auto___14475]);
      var G__14476 = i__8374__auto___14475 + 1;
      i__8374__auto___14475 = G__14476;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14470) {
  var vec__14471 = p__14470;
  var req = cljs.core.nth.call(null, vec__14471, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "delete", "delete", -1768633620), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.delete$.cljs$lang$maxFixedArity = 1;
cljs_http.client.delete$.cljs$lang$applyTo = function(seq14468) {
  var G__14469 = cljs.core.first.call(null, seq14468);
  var seq14468__$1 = cljs.core.next.call(null, seq14468);
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(G__14469, seq14468__$1);
};
cljs_http.client.get = function cljs_http$client$get(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14483 = arguments.length;
  var i__8374__auto___14484 = 0;
  while (true) {
    if (i__8374__auto___14484 < len__8373__auto___14483) {
      args__8380__auto__.push(arguments[i__8374__auto___14484]);
      var G__14485 = i__8374__auto___14484 + 1;
      i__8374__auto___14484 = G__14485;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14479) {
  var vec__14480 = p__14479;
  var req = cljs.core.nth.call(null, vec__14480, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.get.cljs$lang$maxFixedArity = 1;
cljs_http.client.get.cljs$lang$applyTo = function(seq14477) {
  var G__14478 = cljs.core.first.call(null, seq14477);
  var seq14477__$1 = cljs.core.next.call(null, seq14477);
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(G__14478, seq14477__$1);
};
cljs_http.client.head = function cljs_http$client$head(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14492 = arguments.length;
  var i__8374__auto___14493 = 0;
  while (true) {
    if (i__8374__auto___14493 < len__8373__auto___14492) {
      args__8380__auto__.push(arguments[i__8374__auto___14493]);
      var G__14494 = i__8374__auto___14493 + 1;
      i__8374__auto___14493 = G__14494;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14488) {
  var vec__14489 = p__14488;
  var req = cljs.core.nth.call(null, vec__14489, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.head.cljs$lang$maxFixedArity = 1;
cljs_http.client.head.cljs$lang$applyTo = function(seq14486) {
  var G__14487 = cljs.core.first.call(null, seq14486);
  var seq14486__$1 = cljs.core.next.call(null, seq14486);
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(G__14487, seq14486__$1);
};
cljs_http.client.jsonp = function cljs_http$client$jsonp(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14501 = arguments.length;
  var i__8374__auto___14502 = 0;
  while (true) {
    if (i__8374__auto___14502 < len__8373__auto___14501) {
      args__8380__auto__.push(arguments[i__8374__auto___14502]);
      var G__14503 = i__8374__auto___14502 + 1;
      i__8374__auto___14502 = G__14503;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14497) {
  var vec__14498 = p__14497;
  var req = cljs.core.nth.call(null, vec__14498, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.jsonp.cljs$lang$maxFixedArity = 1;
cljs_http.client.jsonp.cljs$lang$applyTo = function(seq14495) {
  var G__14496 = cljs.core.first.call(null, seq14495);
  var seq14495__$1 = cljs.core.next.call(null, seq14495);
  return cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic(G__14496, seq14495__$1);
};
cljs_http.client.move = function cljs_http$client$move(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14510 = arguments.length;
  var i__8374__auto___14511 = 0;
  while (true) {
    if (i__8374__auto___14511 < len__8373__auto___14510) {
      args__8380__auto__.push(arguments[i__8374__auto___14511]);
      var G__14512 = i__8374__auto___14511 + 1;
      i__8374__auto___14511 = G__14512;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14506) {
  var vec__14507 = p__14506;
  var req = cljs.core.nth.call(null, vec__14507, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "move", "move", -2110884309), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.move.cljs$lang$maxFixedArity = 1;
cljs_http.client.move.cljs$lang$applyTo = function(seq14504) {
  var G__14505 = cljs.core.first.call(null, seq14504);
  var seq14504__$1 = cljs.core.next.call(null, seq14504);
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(G__14505, seq14504__$1);
};
cljs_http.client.options = function cljs_http$client$options(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14519 = arguments.length;
  var i__8374__auto___14520 = 0;
  while (true) {
    if (i__8374__auto___14520 < len__8373__auto___14519) {
      args__8380__auto__.push(arguments[i__8374__auto___14520]);
      var G__14521 = i__8374__auto___14520 + 1;
      i__8374__auto___14520 = G__14521;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14515) {
  var vec__14516 = p__14515;
  var req = cljs.core.nth.call(null, vec__14516, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "options", "options", 99638489), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.options.cljs$lang$maxFixedArity = 1;
cljs_http.client.options.cljs$lang$applyTo = function(seq14513) {
  var G__14514 = cljs.core.first.call(null, seq14513);
  var seq14513__$1 = cljs.core.next.call(null, seq14513);
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(G__14514, seq14513__$1);
};
cljs_http.client.patch = function cljs_http$client$patch(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14528 = arguments.length;
  var i__8374__auto___14529 = 0;
  while (true) {
    if (i__8374__auto___14529 < len__8373__auto___14528) {
      args__8380__auto__.push(arguments[i__8374__auto___14529]);
      var G__14530 = i__8374__auto___14529 + 1;
      i__8374__auto___14529 = G__14530;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14524) {
  var vec__14525 = p__14524;
  var req = cljs.core.nth.call(null, vec__14525, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "patch", "patch", 380775109), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.patch.cljs$lang$maxFixedArity = 1;
cljs_http.client.patch.cljs$lang$applyTo = function(seq14522) {
  var G__14523 = cljs.core.first.call(null, seq14522);
  var seq14522__$1 = cljs.core.next.call(null, seq14522);
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(G__14523, seq14522__$1);
};
cljs_http.client.post = function cljs_http$client$post(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14537 = arguments.length;
  var i__8374__auto___14538 = 0;
  while (true) {
    if (i__8374__auto___14538 < len__8373__auto___14537) {
      args__8380__auto__.push(arguments[i__8374__auto___14538]);
      var G__14539 = i__8374__auto___14538 + 1;
      i__8374__auto___14538 = G__14539;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14533) {
  var vec__14534 = p__14533;
  var req = cljs.core.nth.call(null, vec__14534, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "post", "post", 269697687), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.post.cljs$lang$maxFixedArity = 1;
cljs_http.client.post.cljs$lang$applyTo = function(seq14531) {
  var G__14532 = cljs.core.first.call(null, seq14531);
  var seq14531__$1 = cljs.core.next.call(null, seq14531);
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(G__14532, seq14531__$1);
};
cljs_http.client.put = function cljs_http$client$put(var_args) {
  var args__8380__auto__ = [];
  var len__8373__auto___14546 = arguments.length;
  var i__8374__auto___14547 = 0;
  while (true) {
    if (i__8374__auto___14547 < len__8373__auto___14546) {
      args__8380__auto__.push(arguments[i__8374__auto___14547]);
      var G__14548 = i__8374__auto___14547 + 1;
      i__8374__auto___14547 = G__14548;
      continue;
    } else {
    }
    break;
  }
  var argseq__8381__auto__ = 1 < args__8380__auto__.length ? new cljs.core.IndexedSeq(args__8380__auto__.slice(1), 0, null) : null;
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8381__auto__);
};
cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic = function(url, p__14542) {
  var vec__14543 = p__14542;
  var req = cljs.core.nth.call(null, vec__14543, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "put", "put", 1299772570), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.put.cljs$lang$maxFixedArity = 1;
cljs_http.client.put.cljs$lang$applyTo = function(seq14540) {
  var G__14541 = cljs.core.first.call(null, seq14540);
  var seq14540__$1 = cljs.core.next.call(null, seq14540);
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(G__14541, seq14540__$1);
};
goog.provide("cheshire_cat.core");
goog.require("cljs.core");
goog.require("clojure.browser.repl");
goog.require("cljs_http.client");
goog.require("cljs.core.async");
cheshire_cat.core.init = function cheshire_cat$core$init() {
  clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
  var c__11377__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__11377__auto__) {
    return function() {
      var f__11378__auto__ = function() {
        var switch__11265__auto__ = function(c__11377__auto__) {
          return function(state_16371) {
            var state_val_16372 = state_16371[1];
            if (state_val_16372 === 1) {
              var inst_16365 = cljs_http.client.get.call(null, "/cheshire-cat");
              var state_16371__$1 = state_16371;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16371__$1, 2, inst_16365);
            } else {
              if (state_val_16372 === 2) {
                var inst_16367 = state_16371[2];
                var inst_16368 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_16367);
                var inst_16369 = alert(inst_16368);
                var state_16371__$1 = state_16371;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16371__$1, inst_16369);
              } else {
                return null;
              }
            }
          };
        }(c__11377__auto__);
        return function(switch__11265__auto__, c__11377__auto__) {
          return function() {
            var cheshire_cat$core$init_$_state_machine__11266__auto__ = null;
            var cheshire_cat$core$init_$_state_machine__11266__auto____0 = function() {
              var statearr_16376 = [null, null, null, null, null, null, null];
              statearr_16376[0] = cheshire_cat$core$init_$_state_machine__11266__auto__;
              statearr_16376[1] = 1;
              return statearr_16376;
            };
            var cheshire_cat$core$init_$_state_machine__11266__auto____1 = function(state_16371) {
              while (true) {
                var ret_value__11267__auto__ = function() {
                  try {
                    while (true) {
                      var result__11268__auto__ = switch__11265__auto__.call(null, state_16371);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__11268__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__11268__auto__;
                      }
                      break;
                    }
                  } catch (e16377) {
                    if (e16377 instanceof Object) {
                      var ex__11269__auto__ = e16377;
                      var statearr_16378_16380 = state_16371;
                      statearr_16378_16380[5] = ex__11269__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16371);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16377;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__11267__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16381 = state_16371;
                  state_16371 = G__16381;
                  continue;
                } else {
                  return ret_value__11267__auto__;
                }
                break;
              }
            };
            cheshire_cat$core$init_$_state_machine__11266__auto__ = function(state_16371) {
              switch(arguments.length) {
                case 0:
                  return cheshire_cat$core$init_$_state_machine__11266__auto____0.call(this);
                case 1:
                  return cheshire_cat$core$init_$_state_machine__11266__auto____1.call(this, state_16371);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            cheshire_cat$core$init_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$0 = cheshire_cat$core$init_$_state_machine__11266__auto____0;
            cheshire_cat$core$init_$_state_machine__11266__auto__.cljs$core$IFn$_invoke$arity$1 = cheshire_cat$core$init_$_state_machine__11266__auto____1;
            return cheshire_cat$core$init_$_state_machine__11266__auto__;
          }();
        }(switch__11265__auto__, c__11377__auto__);
      }();
      var state__11379__auto__ = function() {
        var statearr_16379 = f__11378__auto__.call(null);
        statearr_16379[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__11377__auto__;
        return statearr_16379;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__11379__auto__);
    };
  }(c__11377__auto__));
  return c__11377__auto__;
};
goog.exportSymbol("cheshire_cat.core.init", cheshire_cat.core.init);
